// This file is auto-generated by @hey-api/openapi-ts

export type GetAdminsData = {
    /**
     * Ascending sort order (overrides all fields in a multi-field sort)
     */
    ascending?: string;
    /**
     * Return a total count as well as items (adds extra database processing)
     */
    count?: string;
    /**
     * Descending sort order (overrides all fields in a multi-field sort)
     */
    descending?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    email?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    id?: string;
    /**
     * The maximum number of records to return (max: 1,000)
     */
    limit?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    namespace?: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * The number of records to skip (max: 1,000). Unsuitable for bulk operations
     */
    skip?: string;
    /**
     * Sort field. For multi-field sort use comma separated values (or multiple query values) with '-' prefix for descending
     */
    sort?: string;
};

export type GetAdminsResponse = Array<{
    /**
     * Admin.email
     */
    email?: string;
    /**
     * Admin.id
     */
    id?: string;
    /**
     * Admin.is_active
     */
    is_active?: boolean;
    /**
     * Admin.namespace
     */
    namespace?: string;
    /**
     * Admin.password
     */
    password?: string;
    /**
     * Admin.role
     */
    role?: string;
}>;

export type PostAdminsData = {
    requestBody?: {
        /**
         * Admin.email
         */
        email?: string;
        /**
         * Admin.id
         */
        id?: string;
        /**
         * Admin.is_active
         */
        is_active?: boolean;
        /**
         * Admin.namespace
         */
        namespace?: string;
        /**
         * Admin.password
         */
        password?: string;
        /**
         * Admin.role
         */
        role?: string;
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PostAdminsResponse = {
    /**
     * Admin.email
     */
    email?: string;
    /**
     * Admin.id
     */
    id?: string;
    /**
     * Admin.is_active
     */
    is_active?: boolean;
    /**
     * Admin.namespace
     */
    namespace?: string;
    /**
     * Admin.password
     */
    password?: string;
    /**
     * Admin.role
     */
    role?: string;
};

export type DeleteAdminsByIdData = {
    /**
     * The admin ID key to get
     */
    id: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type DeleteAdminsByIdResponse = {
    /**
     * The time the operation was created
     */
    created?: string;
    /**
     * Operation.data
     */
    data?: {
        [key: string]: unknown;
    };
    /**
     * Additional detailed information about an operation provided by the connector
     */
    detail?: unknown;
    /**
     * Any error reported back from the plugin for this operation
     */
    error?: string;
    /**
     * The UUID of the operation
     */
    id?: string;
    /**
     * The input to this operation
     */
    input?: {
        [key: string]: unknown;
    };
    /**
     * The namespace of the operation
     */
    namespace?: string;
    /**
     * Any output reported back from the plugin for this operation
     */
    output?: {
        [key: string]: unknown;
    };
    /**
     * The plugin responsible for performing the operation
     */
    plugin?: string;
    /**
     * If this operation was initiated as a retry to a previous operation, this field points to the UUID of the operation being retried
     */
    retry?: string;
    /**
     * The current status of the operation
     */
    status?: string;
    /**
     * The UUID of the FireFly transaction the operation is part of
     */
    tx?: string;
    /**
     * The type of the operation
     */
    type?: 'blockchain_invoke' | 'user_operation_send';
    /**
     * The last update time of the operation
     */
    updated?: string;
};

export type GetAdminsByIdData = {
    /**
     * The admin ID key to get
     */
    id: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type GetAdminsByIdResponse = {
    /**
     * Admin.email
     */
    email?: string;
    /**
     * Admin.id
     */
    id?: string;
    /**
     * Admin.is_active
     */
    is_active?: boolean;
    /**
     * Admin.namespace
     */
    namespace?: string;
    /**
     * Admin.password
     */
    password?: string;
    /**
     * Admin.role
     */
    role?: string;
};

export type PostAdminsLoginData = {
    requestBody?: {
        /**
         * Admin.email
         */
        email?: string;
        /**
         * Admin.password
         */
        password?: string;
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PostAdminsLoginResponse = {
    /**
     * Admin.token
     */
    token?: string;
};

export type GetApisData = {
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    _interface?: string;
    /**
     * Ascending sort order (overrides all fields in a multi-field sort)
     */
    ascending?: string;
    /**
     * Return a total count as well as items (adds extra database processing)
     */
    count?: string;
    /**
     * Descending sort order (overrides all fields in a multi-field sort)
     */
    descending?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    id?: string;
    /**
     * The maximum number of records to return (max: 1,000)
     */
    limit?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    name?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    networkname?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    published?: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * The number of records to skip (max: 1,000). Unsuitable for bulk operations
     */
    skip?: string;
    /**
     * Sort field. For multi-field sort use comma separated values (or multiple query values) with '-' prefix for descending
     */
    sort?: string;
};

export type GetApisResponse = Array<{
    /**
     * The UUID of the contract API
     */
    id?: string;
    /**
     * Reference to the FireFly Interface definition associated with the contract API
     */
    interface?: {
        /**
         * The UUID of the FireFly interface
         */
        id?: string;
        /**
         * The name of the FireFly interface
         */
        name?: string;
        /**
         * The version of the FireFly interface
         */
        version?: string;
    };
    /**
     * If this API is tied to an individual instance of a smart contract, this field can include a blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
     */
    location?: unknown;
    /**
     * The UUID of the broadcast message that was used to publish this API to the network
     */
    message?: string;
    /**
     * The name that is used in the URL to access the API
     */
    name?: string;
    /**
     * The namespace of the contract API
     */
    namespace?: string;
    /**
     * The published name of the API within the multiparty network
     */
    networkName?: string;
    /**
     * Indicates if the API is published to other members of the multiparty network
     */
    published?: boolean;
    /**
     * The URLs to use to access the API
     */
    urls?: {
        /**
         * The URL to use to invoke the API
         */
        api?: string;
        /**
         * The URL to download the OpenAPI v3 (Swagger) description for the API generated in JSON or YAML format
         */
        openapi?: string;
        /**
         * The URL to use in a web browser to access the SwaggerUI explorer/exerciser for the API
         */
        ui?: string;
    };
}>;

export type PostApisData = {
    /**
     * When true the HTTP request blocks until the message is confirmed
     */
    confirm?: string;
    /**
     * When true the definition will be published to all other members of the multiparty network
     */
    publish?: string;
    requestBody?: {
        /**
         * Reference to the FireFly Interface definition associated with the contract API
         */
        interface?: {
            /**
             * The UUID of the FireFly interface
             */
            id?: string;
            /**
             * The name of the FireFly interface
             */
            name?: string;
            /**
             * The version of the FireFly interface
             */
            version?: string;
        };
        /**
         * If this API is tied to an individual instance of a smart contract, this field can include a blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
         */
        location?: unknown;
        /**
         * The name that is used in the URL to access the API
         */
        name?: string;
        /**
         * The published name of the API within the multiparty network
         */
        networkName?: string;
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PostApisResponse = {
    /**
     * The UUID of the contract API
     */
    id?: string;
    /**
     * Reference to the FireFly Interface definition associated with the contract API
     */
    interface?: {
        /**
         * The UUID of the FireFly interface
         */
        id?: string;
        /**
         * The name of the FireFly interface
         */
        name?: string;
        /**
         * The version of the FireFly interface
         */
        version?: string;
    };
    /**
     * If this API is tied to an individual instance of a smart contract, this field can include a blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
     */
    location?: unknown;
    /**
     * The UUID of the broadcast message that was used to publish this API to the network
     */
    message?: string;
    /**
     * The name that is used in the URL to access the API
     */
    name?: string;
    /**
     * The namespace of the contract API
     */
    namespace?: string;
    /**
     * The published name of the API within the multiparty network
     */
    networkName?: string;
    /**
     * Indicates if the API is published to other members of the multiparty network
     */
    published?: boolean;
    /**
     * The URLs to use to access the API
     */
    urls?: {
        /**
         * The URL to use to invoke the API
         */
        api?: string;
        /**
         * The URL to download the OpenAPI v3 (Swagger) description for the API generated in JSON or YAML format
         */
        openapi?: string;
        /**
         * The URL to use in a web browser to access the SwaggerUI explorer/exerciser for the API
         */
        ui?: string;
    };
};

export type DeleteApisByApiNameData = {
    /**
     * The name of the contract API
     */
    apiName: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type DeleteApisByApiNameResponse = void;

export type GetApisByApiNameData = {
    /**
     * The name of the contract API
     */
    apiName: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type GetApisByApiNameResponse = {
    /**
     * The UUID of the contract API
     */
    id?: string;
    /**
     * Reference to the FireFly Interface definition associated with the contract API
     */
    interface?: {
        /**
         * The UUID of the FireFly interface
         */
        id?: string;
        /**
         * The name of the FireFly interface
         */
        name?: string;
        /**
         * The version of the FireFly interface
         */
        version?: string;
    };
    /**
     * If this API is tied to an individual instance of a smart contract, this field can include a blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
     */
    location?: unknown;
    /**
     * The UUID of the broadcast message that was used to publish this API to the network
     */
    message?: string;
    /**
     * The name that is used in the URL to access the API
     */
    name?: string;
    /**
     * The namespace of the contract API
     */
    namespace?: string;
    /**
     * The published name of the API within the multiparty network
     */
    networkName?: string;
    /**
     * Indicates if the API is published to other members of the multiparty network
     */
    published?: boolean;
    /**
     * The URLs to use to access the API
     */
    urls?: {
        /**
         * The URL to use to invoke the API
         */
        api?: string;
        /**
         * The URL to download the OpenAPI v3 (Swagger) description for the API generated in JSON or YAML format
         */
        openapi?: string;
        /**
         * The URL to use in a web browser to access the SwaggerUI explorer/exerciser for the API
         */
        ui?: string;
    };
};

export type PutApisByApiNameData = {
    /**
     * When true the HTTP request blocks until the message is confirmed
     */
    confirm?: string;
    /**
     * The name of the contract API
     */
    id: string;
    requestBody?: {
        /**
         * Reference to the FireFly Interface definition associated with the contract API
         */
        interface?: {
            /**
             * The UUID of the FireFly interface
             */
            id?: string;
            /**
             * The name of the FireFly interface
             */
            name?: string;
            /**
             * The version of the FireFly interface
             */
            version?: string;
        };
        /**
         * If this API is tied to an individual instance of a smart contract, this field can include a blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
         */
        location?: unknown;
        /**
         * The name that is used in the URL to access the API
         */
        name?: string;
        /**
         * The published name of the API within the multiparty network
         */
        networkName?: string;
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PutApisByApiNameResponse = {
    /**
     * The UUID of the contract API
     */
    id?: string;
    /**
     * Reference to the FireFly Interface definition associated with the contract API
     */
    interface?: {
        /**
         * The UUID of the FireFly interface
         */
        id?: string;
        /**
         * The name of the FireFly interface
         */
        name?: string;
        /**
         * The version of the FireFly interface
         */
        version?: string;
    };
    /**
     * If this API is tied to an individual instance of a smart contract, this field can include a blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
     */
    location?: unknown;
    /**
     * The UUID of the broadcast message that was used to publish this API to the network
     */
    message?: string;
    /**
     * The name that is used in the URL to access the API
     */
    name?: string;
    /**
     * The namespace of the contract API
     */
    namespace?: string;
    /**
     * The published name of the API within the multiparty network
     */
    networkName?: string;
    /**
     * Indicates if the API is published to other members of the multiparty network
     */
    published?: boolean;
    /**
     * The URLs to use to access the API
     */
    urls?: {
        /**
         * The URL to use to invoke the API
         */
        api?: string;
        /**
         * The URL to download the OpenAPI v3 (Swagger) description for the API generated in JSON or YAML format
         */
        openapi?: string;
        /**
         * The URL to use in a web browser to access the SwaggerUI explorer/exerciser for the API
         */
        ui?: string;
    };
};

export type GetApisByApiNameInterfaceData = {
    /**
     * The name of the contract API
     */
    apiName: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type GetApisByApiNameInterfaceResponse = {
    /**
     * A description of the smart contract this FFI represents
     */
    description?: string;
    /**
     * An array of smart contract error definitions
     */
    errors?: Array<{
        /**
         * A description of the smart contract error
         */
        description?: string;
        /**
         * The UUID of the FFI error definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this error is part of
         */
        interface?: string;
        /**
         * The name of the error
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of error parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this error within the FFI for use on URL paths
         */
        pathname?: string;
        /**
         * The stringified signature of the error, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * An array of smart contract event definitions
     */
    events?: Array<{
        /**
         * A description of the smart contract event
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The UUID of the FFI event definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this event is part of
         */
        interface?: string;
        /**
         * The name of the event
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of event parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this event within the FFI for use on URL paths. Supports contracts that have multiple event overrides with the same name
         */
        pathname?: string;
        /**
         * The stringified signature of the event, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * The UUID of the FireFly interface (FFI) smart contract definition
     */
    id?: string;
    /**
     * The UUID of the broadcast message that was used to publish this FFI to the network
     */
    message?: string;
    /**
     * An array of smart contract method definitions
     */
    methods?: Array<{
        /**
         * A description of the smart contract method
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The UUID of the FFI method definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this method is part of
         */
        interface?: string;
        /**
         * The name of the method
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of method parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this method within the FFI for use on URL paths. Supports contracts that have multiple method overrides with the same name
         */
        pathname?: string;
        /**
         * An array of method return definitions
         */
        returns?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
    }>;
    /**
     * The name of the FFI - usually matching the smart contract name
     */
    name?: string;
    /**
     * The namespace of the FFI
     */
    namespace?: string;
    /**
     * The published name of the FFI within the multiparty network
     */
    networkName?: string;
    /**
     * Indicates if the FFI is published to other members of the multiparty network
     */
    published?: boolean;
    /**
     * A version for the FFI - use of semantic versioning such as 'v1.0.1' is encouraged
     */
    version?: string;
};

export type PostApisByApiNameInvokeByMethodPathData = {
    /**
     * The name of the contract API
     */
    apiName: string;
    /**
     * When true the HTTP request blocks until the message is confirmed
     */
    confirm?: string;
    /**
     * The name or uniquely generated path name of a method on a smart contract
     */
    methodPath: string;
    requestBody?: {
        /**
         * ContractCallRequest.data
         */
        data?: {
            [key: string]: unknown;
        };
        /**
         * An optional identifier to allow idempotent submission of requests. Stored on the transaction uniquely within a namespace
         */
        idempotencyKey?: string;
        /**
         * A map of named inputs. The name and type of each input must be compatible with the FFI description of the method, so that FireFly knows how to serialize it to the blockchain via the connector
         */
        input?: {
            [key: string]: unknown;
        };
        /**
         * The blockchain signing key that will sign the invocation. Defaults to the first signing key of the organization that operates the node
         */
        key?: string;
        /**
         * A blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
         */
        location?: unknown;
        /**
         * You can specify a message to correlate with the invocation, which can be of type broadcast or private. Your specified method must support on-chain/off-chain correlation by taking a data input on the call
         */
        message?: {
            /**
             * For input allows you to specify data in-line in the message, that will be turned into data attachments. For output when fetchdata is used on API calls, includes the in-line data payloads of all data attachments
             */
            data?: Array<{
                /**
                 * The optional datatype to use for validation of the in-line data
                 */
                datatype?: {
                    /**
                     * The name of the datatype
                     */
                    name?: string;
                    /**
                     * The version of the datatype. Semantic versioning is encouraged, such as v1.0.1
                     */
                    version?: string;
                };
                /**
                 * The UUID of the referenced data resource
                 */
                id?: string;
                /**
                 * The data validator type to use for in-line data
                 */
                validator?: string;
                /**
                 * The in-line value for the data. Can be any JSON type - object, array, string, number or boolean
                 */
                value?: unknown;
            }>;
            /**
             * Allows you to specify details of the private group of recipients in-line in the message. Alternative to using the header.group to specify the hash of a group that has been previously resolved
             */
            group?: {
                /**
                 * An array of members of the group. If no identities local to the sending node are included, then the organization owner of the local node is added automatically
                 */
                members?: Array<{
                    /**
                     * The DID of the group member. On input can be a UUID or org name, and will be resolved to a DID
                     */
                    identity?: string;
                    /**
                     * The UUID of the node that will receive a copy of the off-chain message for the identity. The first applicable node for the identity will be picked automatically on input if not specified
                     */
                    node?: string;
                }>;
                /**
                 * Optional name for the group. Allows you to have multiple separate groups with the same list of participants
                 */
                name?: string;
            };
            /**
             * The message header contains all fields that are used to build the message hash
             */
            header?: {
                /**
                 * The DID of identity of the submitter
                 */
                author?: string;
                /**
                 * The correlation ID of the message. Set this when a message is a response to another message
                 */
                cid?: string;
                /**
                 * Private messages only - the identifier hash of the privacy group. Derived from the name and member list of the group
                 */
                group?: string;
                /**
                 * The on-chain signing key used to sign the transaction
                 */
                key?: string;
                /**
                 * The message tag indicates the purpose of the message to the applications that process it
                 */
                tag?: string;
                /**
                 * A message topic associates this message with an ordered stream of data. A custom topic should be assigned - using the default topic is discouraged
                 */
                topics?: Array<string>;
                /**
                 * The type of transaction used to order/deliver this message
                 */
                txtype?:
                    | 'none'
                    | 'unpinned'
                    | 'batch_pin'
                    | 'network_action'
                    | 'token_pool'
                    | 'token_transfer'
                    | 'contract_deploy'
                    | 'contract_invoke'
                    | 'contract_invoke_pin'
                    | 'token_approval'
                    | 'data_publish'
                    | 'user_operation_send';
                /**
                 * The type of the message
                 */
                type?:
                    | 'definition'
                    | 'broadcast'
                    | 'private'
                    | 'groupinit'
                    | 'transfer_broadcast'
                    | 'transfer_private'
                    | 'approval_broadcast'
                    | 'approval_private';
            };
            /**
             * An optional unique identifier for a message. Cannot be duplicated within a namespace, thus allowing idempotent submission of messages to the API. Local only - not transferred when the message is sent to other members of the network
             */
            idempotencyKey?: string;
        };
        /**
         * A map of named inputs that will be passed through to the blockchain connector
         */
        options?: {
            [key: string]: unknown;
        };
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PostApisByApiNameInvokeByMethodPathResponse = {
    /**
     * The time the operation was created
     */
    created?: string;
    /**
     * Operation.data
     */
    data?: {
        [key: string]: unknown;
    };
    /**
     * Any error reported back from the plugin for this operation
     */
    error?: string;
    /**
     * The UUID of the operation
     */
    id?: string;
    /**
     * The input to this operation
     */
    input?: {
        [key: string]: unknown;
    };
    /**
     * The namespace of the operation
     */
    namespace?: string;
    /**
     * Any output reported back from the plugin for this operation
     */
    output?: {
        [key: string]: unknown;
    };
    /**
     * The plugin responsible for performing the operation
     */
    plugin?: string;
    /**
     * If this operation was initiated as a retry to a previous operation, this field points to the UUID of the operation being retried
     */
    retry?: string;
    /**
     * The current status of the operation
     */
    status?: string;
    /**
     * The UUID of the FireFly transaction the operation is part of
     */
    tx?: string;
    /**
     * The type of the operation
     */
    type?: 'blockchain_invoke' | 'user_operation_send';
    /**
     * The last update time of the operation
     */
    updated?: string;
};

export type GetApisByApiNameListenersByEventPathData = {
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    _interface?: string;
    /**
     * The name of the contract API
     */
    apiName: string;
    /**
     * Ascending sort order (overrides all fields in a multi-field sort)
     */
    ascending?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    backendid?: string;
    /**
     * Return a total count as well as items (adds extra database processing)
     */
    count?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    created?: string;
    /**
     * Descending sort order (overrides all fields in a multi-field sort)
     */
    descending?: string;
    /**
     * The name or uniquely generated path name of a event on a smart contract
     */
    eventPath: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    filters?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    id?: string;
    /**
     * The maximum number of records to return (max: 1,000)
     */
    limit?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    location?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    name?: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    signature?: string;
    /**
     * The number of records to skip (max: 1,000). Unsuitable for bulk operations
     */
    skip?: string;
    /**
     * Sort field. For multi-field sort use comma separated values (or multiple query values) with '-' prefix for descending
     */
    sort?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    state?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    topic?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    updated?: string;
};

export type GetApisByApiNameListenersByEventPathResponse = Array<{
    /**
     * An ID assigned by the blockchain connector to this listener
     */
    backendId?: string;
    /**
     * The creation time of the listener
     */
    created?: string;
    /**
     * Deprecated: Please use 'event' in the array of 'filters' instead
     */
    event?: {
        /**
         * A description of the smart contract event
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The name of the event
         */
        name?: string;
        /**
         * An array of event parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
    };
    /**
     * A list of filters for the contract listener. Each filter is made up of an Event and an optional Location. Events matching these filters will always be emitted in the order determined by the blockchain.
     */
    filters?: Array<{
        /**
         * The definition of the event, either provided in-line when creating the listener, or extracted from the referenced FFI
         */
        event?: {
            /**
             * A description of the smart contract event
             */
            description?: string;
            /**
             * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
             */
            details?: {
                [key: string]: unknown;
            };
            /**
             * The name of the event
             */
            name?: string;
            /**
             * An array of event parameter/argument definitions
             */
            params?: Array<{
                /**
                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                 */
                name?: string;
                /**
                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                 */
                schema?: unknown;
            }>;
        };
        /**
         * A reference to an existing FFI, containing pre-registered type information for the event
         */
        interface?: {
            /**
             * The UUID of the FireFly interface
             */
            id?: string;
            /**
             * The name of the FireFly interface
             */
            name?: string;
            /**
             * The version of the FireFly interface
             */
            version?: string;
        };
        /**
         * A blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
         */
        location?: unknown;
        /**
         * The stringified signature of the event and location, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * The UUID of the smart contract listener
     */
    id?: string;
    /**
     * Deprecated: Please use 'interface' in the array of 'filters' instead
     */
    interface?: {
        /**
         * The UUID of the FireFly interface
         */
        id?: string;
        /**
         * The name of the FireFly interface
         */
        name?: string;
        /**
         * The version of the FireFly interface
         */
        version?: string;
    };
    /**
     * Deprecated: Please use 'location' in the array of 'filters' instead
     */
    location?: unknown;
    /**
     * A descriptive name for the listener
     */
    name?: string;
    /**
     * The namespace of the listener, which defines the namespace of all blockchain events detected by this listener
     */
    namespace?: string;
    /**
     * Options that control how the listener subscribes to events from the underlying blockchain
     */
    options?: {
        /**
         * A blockchain specific string, such as a block number, to start listening from. The special strings 'oldest' and 'newest' are supported by all blockchain connectors. Default is 'newest'
         */
        firstEvent?: string;
    };
    /**
     * A concatenation of all the stringified signature of the event and location, as computed by the blockchain plugin
     */
    signature?: string;
    /**
     * A topic to set on the FireFly event that is emitted each time a blockchain event is detected from the blockchain. Setting this topic on a number of listeners allows applications to easily subscribe to all events they need
     */
    topic?: string;
}>;

export type PostApisByApiNameListenersByEventPathData = {
    /**
     * The name of the contract API
     */
    apiName: string;
    /**
     * The name or uniquely generated path name of a event on a smart contract
     */
    eventPath: string;
    requestBody?: {
        /**
         * Deprecated: Please use 'event' in the array of 'filters' instead
         */
        event?: {
            /**
             * A description of the smart contract event
             */
            description?: string;
            /**
             * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
             */
            details?: {
                [key: string]: unknown;
            };
            /**
             * The name of the event
             */
            name?: string;
            /**
             * An array of event parameter/argument definitions
             */
            params?: Array<{
                /**
                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                 */
                name?: string;
                /**
                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                 */
                schema?: unknown;
            }>;
        };
        /**
         * Deprecated: Please use 'location' in the array of 'filters' instead
         */
        location?: unknown;
        /**
         * A descriptive name for the listener
         */
        name?: string;
        /**
         * Options that control how the listener subscribes to events from the underlying blockchain
         */
        options?: {
            /**
             * A blockchain specific string, such as a block number, to start listening from. The special strings 'oldest' and 'newest' are supported by all blockchain connectors. Default is 'newest'
             */
            firstEvent?: string;
        };
        /**
         * A topic to set on the FireFly event that is emitted each time a blockchain event is detected from the blockchain. Setting this topic on a number of listeners allows applications to easily subscribe to all events they need
         */
        topic?: string;
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PostApisByApiNameListenersByEventPathResponse = {
    /**
     * An ID assigned by the blockchain connector to this listener
     */
    backendId?: string;
    /**
     * The creation time of the listener
     */
    created?: string;
    /**
     * Deprecated: Please use 'event' in the array of 'filters' instead
     */
    event?: {
        /**
         * A description of the smart contract event
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The name of the event
         */
        name?: string;
        /**
         * An array of event parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
    };
    /**
     * A list of filters for the contract listener. Each filter is made up of an Event and an optional Location. Events matching these filters will always be emitted in the order determined by the blockchain.
     */
    filters?: Array<{
        /**
         * The definition of the event, either provided in-line when creating the listener, or extracted from the referenced FFI
         */
        event?: {
            /**
             * A description of the smart contract event
             */
            description?: string;
            /**
             * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
             */
            details?: {
                [key: string]: unknown;
            };
            /**
             * The name of the event
             */
            name?: string;
            /**
             * An array of event parameter/argument definitions
             */
            params?: Array<{
                /**
                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                 */
                name?: string;
                /**
                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                 */
                schema?: unknown;
            }>;
        };
        /**
         * A reference to an existing FFI, containing pre-registered type information for the event
         */
        interface?: {
            /**
             * The UUID of the FireFly interface
             */
            id?: string;
            /**
             * The name of the FireFly interface
             */
            name?: string;
            /**
             * The version of the FireFly interface
             */
            version?: string;
        };
        /**
         * A blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
         */
        location?: unknown;
        /**
         * The stringified signature of the event and location, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * The UUID of the smart contract listener
     */
    id?: string;
    /**
     * Deprecated: Please use 'interface' in the array of 'filters' instead
     */
    interface?: {
        /**
         * The UUID of the FireFly interface
         */
        id?: string;
        /**
         * The name of the FireFly interface
         */
        name?: string;
        /**
         * The version of the FireFly interface
         */
        version?: string;
    };
    /**
     * Deprecated: Please use 'location' in the array of 'filters' instead
     */
    location?: unknown;
    /**
     * A descriptive name for the listener
     */
    name?: string;
    /**
     * The namespace of the listener, which defines the namespace of all blockchain events detected by this listener
     */
    namespace?: string;
    /**
     * Options that control how the listener subscribes to events from the underlying blockchain
     */
    options?: {
        /**
         * A blockchain specific string, such as a block number, to start listening from. The special strings 'oldest' and 'newest' are supported by all blockchain connectors. Default is 'newest'
         */
        firstEvent?: string;
    };
    /**
     * A concatenation of all the stringified signature of the event and location, as computed by the blockchain plugin
     */
    signature?: string;
    /**
     * A topic to set on the FireFly event that is emitted each time a blockchain event is detected from the blockchain. Setting this topic on a number of listeners allows applications to easily subscribe to all events they need
     */
    topic?: string;
};

export type PostApisByApiNamePublishData = {
    /**
     * The name of the contract API
     */
    apiName: string;
    /**
     * When true the HTTP request blocks until the message is confirmed
     */
    confirm?: string;
    requestBody?: {
        /**
         * An optional name to be used for publishing this definition to the multiparty network, which may differ from the local name
         */
        networkName?: string;
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PostApisByApiNamePublishResponse = {
    /**
     * A description of the smart contract this FFI represents
     */
    description?: string;
    /**
     * An array of smart contract error definitions
     */
    errors?: Array<{
        /**
         * A description of the smart contract error
         */
        description?: string;
        /**
         * The UUID of the FFI error definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this error is part of
         */
        interface?: string;
        /**
         * The name of the error
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of error parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this error within the FFI for use on URL paths
         */
        pathname?: string;
        /**
         * The stringified signature of the error, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * An array of smart contract event definitions
     */
    events?: Array<{
        /**
         * A description of the smart contract event
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The UUID of the FFI event definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this event is part of
         */
        interface?: string;
        /**
         * The name of the event
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of event parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this event within the FFI for use on URL paths. Supports contracts that have multiple event overrides with the same name
         */
        pathname?: string;
        /**
         * The stringified signature of the event, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * The UUID of the FireFly interface (FFI) smart contract definition
     */
    id?: string;
    /**
     * The UUID of the broadcast message that was used to publish this FFI to the network
     */
    message?: string;
    /**
     * An array of smart contract method definitions
     */
    methods?: Array<{
        /**
         * A description of the smart contract method
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The UUID of the FFI method definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this method is part of
         */
        interface?: string;
        /**
         * The name of the method
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of method parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this method within the FFI for use on URL paths. Supports contracts that have multiple method overrides with the same name
         */
        pathname?: string;
        /**
         * An array of method return definitions
         */
        returns?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
    }>;
    /**
     * The name of the FFI - usually matching the smart contract name
     */
    name?: string;
    /**
     * The namespace of the FFI
     */
    namespace?: string;
    /**
     * The published name of the FFI within the multiparty network
     */
    networkName?: string;
    /**
     * Indicates if the FFI is published to other members of the multiparty network
     */
    published?: boolean;
    /**
     * A version for the FFI - use of semantic versioning such as 'v1.0.1' is encouraged
     */
    version?: string;
};

export type PostApisByApiNameQueryByMethodPathData = {
    /**
     * The name of the contract API
     */
    apiName: string;
    /**
     * The name or uniquely generated path name of a method on a smart contract
     */
    methodPath: string;
    requestBody?: {
        /**
         * ContractCallRequest.data
         */
        data?: {
            [key: string]: unknown;
        };
        /**
         * An optional identifier to allow idempotent submission of requests. Stored on the transaction uniquely within a namespace
         */
        idempotencyKey?: string;
        /**
         * A map of named inputs. The name and type of each input must be compatible with the FFI description of the method, so that FireFly knows how to serialize it to the blockchain via the connector
         */
        input?: {
            [key: string]: unknown;
        };
        /**
         * The blockchain signing key that will sign the invocation. Defaults to the first signing key of the organization that operates the node
         */
        key?: string;
        /**
         * A blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
         */
        location?: unknown;
        /**
         * A map of named inputs that will be passed through to the blockchain connector
         */
        options?: {
            [key: string]: unknown;
        };
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PostApisByApiNameQueryByMethodPathResponse = {
    [key: string]: unknown;
};

export type GetBlockchaineventsData = {
    /**
     * Ascending sort order (overrides all fields in a multi-field sort)
     */
    ascending?: string;
    /**
     * Return a total count as well as items (adds extra database processing)
     */
    count?: string;
    /**
     * Descending sort order (overrides all fields in a multi-field sort)
     */
    descending?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    id?: string;
    /**
     * The maximum number of records to return (max: 1,000)
     */
    limit?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    listener?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    name?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    protocolid?: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * The number of records to skip (max: 1,000). Unsuitable for bulk operations
     */
    skip?: string;
    /**
     * Sort field. For multi-field sort use comma separated values (or multiple query values) with '-' prefix for descending
     */
    sort?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    source?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    timestamp?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    txBlockchainid?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    txId?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    txType?: string;
};

export type GetBlockchaineventsResponse = Array<{
    /**
     * The UUID assigned to the event by FireFly
     */
    id?: string;
    /**
     * Detailed blockchain specific information about the event, as generated by the blockchain connector
     */
    info?: {
        [key: string]: unknown;
    };
    /**
     * The UUID of the listener that detected this event, or nil for built-in events in the system namespace
     */
    listener?: string;
    /**
     * The name of the event in the blockchain smart contract
     */
    name?: string;
    /**
     * The namespace of the listener that detected this blockchain event
     */
    namespace?: string;
    /**
     * The data output by the event, parsed to JSON according to the interface of the smart contract
     */
    output?: {
        [key: string]: unknown;
    };
    /**
     * An alphanumerically sortable string that represents this event uniquely on the blockchain (convention for plugins is zero-padded values BLOCKNUMBER/TXN_INDEX/EVENT_INDEX)
     */
    protocolId?: string;
    /**
     * The blockchain plugin or token service that detected the event
     */
    source?: string;
    /**
     * The time allocated to this event by the blockchain. This is the block timestamp for most blockchain connectors
     */
    timestamp?: string;
    /**
     * If this blockchain event is coorelated to FireFly transaction such as a FireFly submitted token transfer, this field is set to the UUID of the FireFly transaction
     */
    tx?: {
        /**
         * The blockchain transaction ID, in the format specific to the blockchain involved in the transaction. Not all FireFly transactions include a blockchain
         */
        blockchainId?: string;
        /**
         * The UUID of the FireFly transaction
         */
        id?: string;
        /**
         * The type of the FireFly transaction
         */
        type?: string;
    };
}>;

export type GetBlockchaineventsByIdData = {
    /**
     * The blockchain event ID
     */
    id: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type GetBlockchaineventsByIdResponse = {
    /**
     * The UUID assigned to the event by FireFly
     */
    id?: string;
    /**
     * Detailed blockchain specific information about the event, as generated by the blockchain connector
     */
    info?: {
        [key: string]: unknown;
    };
    /**
     * The UUID of the listener that detected this event, or nil for built-in events in the system namespace
     */
    listener?: string;
    /**
     * The name of the event in the blockchain smart contract
     */
    name?: string;
    /**
     * The namespace of the listener that detected this blockchain event
     */
    namespace?: string;
    /**
     * The data output by the event, parsed to JSON according to the interface of the smart contract
     */
    output?: {
        [key: string]: unknown;
    };
    /**
     * An alphanumerically sortable string that represents this event uniquely on the blockchain (convention for plugins is zero-padded values BLOCKNUMBER/TXN_INDEX/EVENT_INDEX)
     */
    protocolId?: string;
    /**
     * The blockchain plugin or token service that detected the event
     */
    source?: string;
    /**
     * The time allocated to this event by the blockchain. This is the block timestamp for most blockchain connectors
     */
    timestamp?: string;
    /**
     * If this blockchain event is coorelated to FireFly transaction such as a FireFly submitted token transfer, this field is set to the UUID of the FireFly transaction
     */
    tx?: {
        /**
         * The blockchain transaction ID, in the format specific to the blockchain involved in the transaction. Not all FireFly transactions include a blockchain
         */
        blockchainId?: string;
        /**
         * The UUID of the FireFly transaction
         */
        id?: string;
        /**
         * The type of the FireFly transaction
         */
        type?: string;
    };
};

export type GetChartsHistogramByCollectionData = {
    /**
     * Number of buckets between start time and end time
     */
    buckets?: string;
    /**
     * The collection ID
     */
    collection: string;
    /**
     * End time of the data to be fetched
     */
    endTime?: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * Start time of the data to be fetched
     */
    startTime?: string;
};

export type GetChartsHistogramByCollectionResponse = Array<{
    /**
     * Total count of entries in this time bucket within the histogram
     */
    count?: string;
    /**
     * Indicates whether there are more results in this bucket that are not being displayed
     */
    isCapped?: boolean;
    /**
     * Starting timestamp for the bucket
     */
    timestamp?: string;
    /**
     * Array of separate counts for individual types of record within the bucket
     */
    types?: Array<{
        /**
         * Count of entries of a given type within a bucket
         */
        count?: string;
        /**
         * Name of the type
         */
        type?: string;
    }>;
}>;

export type GetContractsInterfacesData = {
    /**
     * Ascending sort order (overrides all fields in a multi-field sort)
     */
    ascending?: string;
    /**
     * Return a total count as well as items (adds extra database processing)
     */
    count?: string;
    /**
     * Descending sort order (overrides all fields in a multi-field sort)
     */
    descending?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    id?: string;
    /**
     * The maximum number of records to return (max: 1,000)
     */
    limit?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    name?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    networkname?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    published?: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * The number of records to skip (max: 1,000). Unsuitable for bulk operations
     */
    skip?: string;
    /**
     * Sort field. For multi-field sort use comma separated values (or multiple query values) with '-' prefix for descending
     */
    sort?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    version?: string;
};

export type GetContractsInterfacesResponse = Array<{
    /**
     * A description of the smart contract this FFI represents
     */
    description?: string;
    /**
     * An array of smart contract error definitions
     */
    errors?: Array<{
        /**
         * A description of the smart contract error
         */
        description?: string;
        /**
         * The UUID of the FFI error definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this error is part of
         */
        interface?: string;
        /**
         * The name of the error
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of error parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this error within the FFI for use on URL paths
         */
        pathname?: string;
        /**
         * The stringified signature of the error, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * An array of smart contract event definitions
     */
    events: Array<{
        /**
         * A description of the smart contract event
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The UUID of the FFI event definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this event is part of
         */
        interface?: string;
        /**
         * The name of the event
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of event parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this event within the FFI for use on URL paths. Supports contracts that have multiple event overrides with the same name
         */
        pathname?: string;
        /**
         * The stringified signature of the event, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * The UUID of the FireFly interface (FFI) smart contract definition
     */
    id: string;
    /**
     * The UUID of the broadcast message that was used to publish this FFI to the network
     */
    message?: string;
    /**
     * An array of smart contract method definitions
     */
    methods?: Array<{
        /**
         * A description of the smart contract method
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The UUID of the FFI method definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this method is part of
         */
        interface?: string;
        /**
         * The name of the method
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of method parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this method within the FFI for use on URL paths. Supports contracts that have multiple method overrides with the same name
         */
        pathname?: string;
        /**
         * An array of method return definitions
         */
        returns?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
    }>;
    /**
     * The name of the FFI - usually matching the smart contract name
     */
    name?: string;
    /**
     * The namespace of the FFI
     */
    namespace?: string;
    /**
     * The published name of the FFI within the multiparty network
     */
    networkName?: string;
    /**
     * Indicates if the FFI is published to other members of the multiparty network
     */
    published?: boolean;
    /**
     * A version for the FFI - use of semantic versioning such as 'v1.0.1' is encouraged
     */
    version?: string;
}>;

export type GetContractsInterfacesWithCountResponse = {
    count: number;
    items: GetContractsInterfacesResponse;
    total: number;
};

export type PostContractsInterfacesData = {
    /**
     * When true the HTTP request blocks until the message is confirmed
     */
    confirm?: string;
    /**
     * When true the definition will be published to all other members of the multiparty network
     */
    publish?: string;
    requestBody?: {
        /**
         * A description of the smart contract this FFI represents
         */
        description?: string;
        /**
         * An array of smart contract error definitions
         */
        errors?: Array<{
            /**
             * A description of the smart contract error
             */
            description?: string;
            /**
             * The name of the error
             */
            name?: string;
            /**
             * An array of error parameter/argument definitions
             */
            params?: Array<{
                /**
                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                 */
                name?: string;
                /**
                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                 */
                schema?: unknown;
            }>;
        }>;
        /**
         * An array of smart contract event definitions
         */
        events?: Array<{
            /**
             * A description of the smart contract event
             */
            description?: string;
            /**
             * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
             */
            details?: {
                [key: string]: unknown;
            };
            /**
             * The name of the event
             */
            name?: string;
            /**
             * An array of event parameter/argument definitions
             */
            params?: Array<{
                /**
                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                 */
                name?: string;
                /**
                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                 */
                schema?: unknown;
            }>;
        }>;
        /**
         * An array of smart contract method definitions
         */
        methods?: Array<{
            /**
             * A description of the smart contract method
             */
            description?: string;
            /**
             * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
             */
            details?: {
                [key: string]: unknown;
            };
            /**
             * The name of the method
             */
            name?: string;
            /**
             * An array of method parameter/argument definitions
             */
            params?: Array<{
                /**
                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                 */
                name?: string;
                /**
                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                 */
                schema?: unknown;
            }>;
            /**
             * An array of method return definitions
             */
            returns?: Array<{
                /**
                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                 */
                name?: string;
                /**
                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                 */
                schema?: unknown;
            }>;
        }>;
        /**
         * The name of the FFI - usually matching the smart contract name
         */
        name?: string;
        /**
         * The published name of the FFI within the multiparty network
         */
        networkName?: string;
        /**
         * A version for the FFI - use of semantic versioning such as 'v1.0.1' is encouraged
         */
        version?: string;
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PostContractsInterfacesResponse = {
    /**
     * A description of the smart contract this FFI represents
     */
    description?: string;
    /**
     * An array of smart contract error definitions
     */
    errors?: Array<{
        /**
         * A description of the smart contract error
         */
        description?: string;
        /**
         * The UUID of the FFI error definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this error is part of
         */
        interface?: string;
        /**
         * The name of the error
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of error parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this error within the FFI for use on URL paths
         */
        pathname?: string;
        /**
         * The stringified signature of the error, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * An array of smart contract event definitions
     */
    events?: Array<{
        /**
         * A description of the smart contract event
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The UUID of the FFI event definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this event is part of
         */
        interface?: string;
        /**
         * The name of the event
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of event parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this event within the FFI for use on URL paths. Supports contracts that have multiple event overrides with the same name
         */
        pathname?: string;
        /**
         * The stringified signature of the event, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * The UUID of the FireFly interface (FFI) smart contract definition
     */
    id?: string;
    /**
     * The UUID of the broadcast message that was used to publish this FFI to the network
     */
    message?: string;
    /**
     * An array of smart contract method definitions
     */
    methods?: Array<{
        /**
         * A description of the smart contract method
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The UUID of the FFI method definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this method is part of
         */
        interface?: string;
        /**
         * The name of the method
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of method parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this method within the FFI for use on URL paths. Supports contracts that have multiple method overrides with the same name
         */
        pathname?: string;
        /**
         * An array of method return definitions
         */
        returns?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
    }>;
    /**
     * The name of the FFI - usually matching the smart contract name
     */
    name?: string;
    /**
     * The namespace of the FFI
     */
    namespace?: string;
    /**
     * The published name of the FFI within the multiparty network
     */
    networkName?: string;
    /**
     * Indicates if the FFI is published to other members of the multiparty network
     */
    published?: boolean;
    /**
     * A version for the FFI - use of semantic versioning such as 'v1.0.1' is encouraged
     */
    version?: string;
};

export type DeleteContractsInterfacesByInterfaceIdData = {
    /**
     * The ID of the contract interface
     */
    interfaceId: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type DeleteContractsInterfacesByInterfaceIdResponse = void;

export type GetContractsInterfacesByInterfaceIdData = {
    /**
     * When set, the API will return the full FireFly Interface document including all methods, events, and parameters
     */
    fetchchildren?: string;
    /**
     * The ID of the contract interface
     */
    interfaceId: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type GetContractsInterfacesByInterfaceIdResponse = {
    /**
     * A description of the smart contract this FFI represents
     */
    description?: string;
    /**
     * An array of smart contract error definitions
     */
    errors?: Array<{
        /**
         * A description of the smart contract error
         */
        description?: string;
        /**
         * The UUID of the FFI error definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this error is part of
         */
        interface?: string;
        /**
         * The name of the error
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of error parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this error within the FFI for use on URL paths
         */
        pathname?: string;
        /**
         * The stringified signature of the error, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * An array of smart contract event definitions
     */
    events?: Array<{
        /**
         * A description of the smart contract event
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The UUID of the FFI event definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this event is part of
         */
        interface?: string;
        /**
         * The name of the event
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of event parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this event within the FFI for use on URL paths. Supports contracts that have multiple event overrides with the same name
         */
        pathname?: string;
        /**
         * The stringified signature of the event, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * The UUID of the FireFly interface (FFI) smart contract definition
     */
    id?: string;
    /**
     * The UUID of the broadcast message that was used to publish this FFI to the network
     */
    message?: string;
    /**
     * An array of smart contract method definitions
     */
    methods?: Array<{
        /**
         * A description of the smart contract method
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The UUID of the FFI method definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this method is part of
         */
        interface?: string;
        /**
         * The name of the method
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of method parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this method within the FFI for use on URL paths. Supports contracts that have multiple method overrides with the same name
         */
        pathname?: string;
        /**
         * An array of method return definitions
         */
        returns?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
    }>;
    /**
     * The name of the FFI - usually matching the smart contract name
     */
    name?: string;
    /**
     * The namespace of the FFI
     */
    namespace?: string;
    /**
     * The published name of the FFI within the multiparty network
     */
    networkName?: string;
    /**
     * Indicates if the FFI is published to other members of the multiparty network
     */
    published?: boolean;
    /**
     * A version for the FFI - use of semantic versioning such as 'v1.0.1' is encouraged
     */
    version?: string;
};

export type GetContractsInterfacesByNameByVersionData = {
    /**
     * When set, the API will return the full FireFly Interface document including all methods, events, and parameters
     */
    fetchchildren?: string;
    /**
     * The name of the contract interface
     */
    name: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * The version of the contract interface
     */
    version: string;
};

export type GetContractsInterfacesByNameByVersionResponse = {
    /**
     * A description of the smart contract this FFI represents
     */
    description?: string;
    /**
     * An array of smart contract error definitions
     */
    errors?: Array<{
        /**
         * A description of the smart contract error
         */
        description?: string;
        /**
         * The UUID of the FFI error definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this error is part of
         */
        interface?: string;
        /**
         * The name of the error
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of error parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this error within the FFI for use on URL paths
         */
        pathname?: string;
        /**
         * The stringified signature of the error, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * An array of smart contract event definitions
     */
    events?: Array<{
        /**
         * A description of the smart contract event
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The UUID of the FFI event definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this event is part of
         */
        interface?: string;
        /**
         * The name of the event
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of event parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this event within the FFI for use on URL paths. Supports contracts that have multiple event overrides with the same name
         */
        pathname?: string;
        /**
         * The stringified signature of the event, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * The UUID of the FireFly interface (FFI) smart contract definition
     */
    id?: string;
    /**
     * The UUID of the broadcast message that was used to publish this FFI to the network
     */
    message?: string;
    /**
     * An array of smart contract method definitions
     */
    methods?: Array<{
        /**
         * A description of the smart contract method
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The UUID of the FFI method definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this method is part of
         */
        interface?: string;
        /**
         * The name of the method
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of method parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this method within the FFI for use on URL paths. Supports contracts that have multiple method overrides with the same name
         */
        pathname?: string;
        /**
         * An array of method return definitions
         */
        returns?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
    }>;
    /**
     * The name of the FFI - usually matching the smart contract name
     */
    name?: string;
    /**
     * The namespace of the FFI
     */
    namespace?: string;
    /**
     * The published name of the FFI within the multiparty network
     */
    networkName?: string;
    /**
     * Indicates if the FFI is published to other members of the multiparty network
     */
    published?: boolean;
    /**
     * A version for the FFI - use of semantic versioning such as 'v1.0.1' is encouraged
     */
    version?: string;
};

export type PostContractsInterfacesByNameByVersionPublishData = {
    /**
     * When true the HTTP request blocks until the message is confirmed
     */
    confirm?: string;
    /**
     * The name of the contract interface
     */
    name: string;
    requestBody?: {
        /**
         * An optional name to be used for publishing this definition to the multiparty network, which may differ from the local name
         */
        networkName?: string;
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * The version of the contract interface
     */
    version: string;
};

export type PostContractsInterfacesByNameByVersionPublishResponse = {
    /**
     * A description of the smart contract this FFI represents
     */
    description?: string;
    /**
     * An array of smart contract error definitions
     */
    errors?: Array<{
        /**
         * A description of the smart contract error
         */
        description?: string;
        /**
         * The UUID of the FFI error definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this error is part of
         */
        interface?: string;
        /**
         * The name of the error
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of error parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this error within the FFI for use on URL paths
         */
        pathname?: string;
        /**
         * The stringified signature of the error, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * An array of smart contract event definitions
     */
    events?: Array<{
        /**
         * A description of the smart contract event
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The UUID of the FFI event definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this event is part of
         */
        interface?: string;
        /**
         * The name of the event
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of event parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this event within the FFI for use on URL paths. Supports contracts that have multiple event overrides with the same name
         */
        pathname?: string;
        /**
         * The stringified signature of the event, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * The UUID of the FireFly interface (FFI) smart contract definition
     */
    id?: string;
    /**
     * The UUID of the broadcast message that was used to publish this FFI to the network
     */
    message?: string;
    /**
     * An array of smart contract method definitions
     */
    methods?: Array<{
        /**
         * A description of the smart contract method
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The UUID of the FFI method definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this method is part of
         */
        interface?: string;
        /**
         * The name of the method
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of method parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this method within the FFI for use on URL paths. Supports contracts that have multiple method overrides with the same name
         */
        pathname?: string;
        /**
         * An array of method return definitions
         */
        returns?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
    }>;
    /**
     * The name of the FFI - usually matching the smart contract name
     */
    name?: string;
    /**
     * The namespace of the FFI
     */
    namespace?: string;
    /**
     * The published name of the FFI within the multiparty network
     */
    networkName?: string;
    /**
     * Indicates if the FFI is published to other members of the multiparty network
     */
    published?: boolean;
    /**
     * A version for the FFI - use of semantic versioning such as 'v1.0.1' is encouraged
     */
    version?: string;
};

export type PostContractsInterfacesGenerateData = {
    requestBody?: {
        /**
         * The description of the FFI to be generated. Defaults to the description extracted by the blockchain specific converter utility
         */
        description?: string;
        /**
         * A blockchain connector specific payload. For example in Ethereum this is a JSON structure containing an 'abi' array, and optionally a 'devdocs' array.
         */
        input?: unknown;
        /**
         * The name of the FFI to generate
         */
        name?: string;
        /**
         * The namespace into which the FFI will be generated
         */
        namespace?: string;
        /**
         * The version of the FFI to generate
         */
        version?: string;
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PostContractsInterfacesGenerateResponse = {
    /**
     * A description of the smart contract this FFI represents
     */
    description?: string;
    /**
     * An array of smart contract error definitions
     */
    errors?: Array<{
        /**
         * A description of the smart contract error
         */
        description?: string;
        /**
         * The UUID of the FFI error definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this error is part of
         */
        interface?: string;
        /**
         * The name of the error
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of error parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this error within the FFI for use on URL paths
         */
        pathname?: string;
        /**
         * The stringified signature of the error, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * An array of smart contract event definitions
     */
    events?: Array<{
        /**
         * A description of the smart contract event
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The UUID of the FFI event definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this event is part of
         */
        interface?: string;
        /**
         * The name of the event
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of event parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this event within the FFI for use on URL paths. Supports contracts that have multiple event overrides with the same name
         */
        pathname?: string;
        /**
         * The stringified signature of the event, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * The UUID of the FireFly interface (FFI) smart contract definition
     */
    id?: string;
    /**
     * The UUID of the broadcast message that was used to publish this FFI to the network
     */
    message?: string;
    /**
     * An array of smart contract method definitions
     */
    methods?: Array<{
        /**
         * A description of the smart contract method
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The UUID of the FFI method definition
         */
        id?: string;
        /**
         * The UUID of the FFI smart contract definition that this method is part of
         */
        interface?: string;
        /**
         * The name of the method
         */
        name?: string;
        /**
         * The namespace of the FFI
         */
        namespace?: string;
        /**
         * An array of method parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
        /**
         * The unique name allocated to this method within the FFI for use on URL paths. Supports contracts that have multiple method overrides with the same name
         */
        pathname?: string;
        /**
         * An array of method return definitions
         */
        returns?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
    }>;
    /**
     * The name of the FFI - usually matching the smart contract name
     */
    name?: string;
    /**
     * The namespace of the FFI
     */
    namespace?: string;
    /**
     * The published name of the FFI within the multiparty network
     */
    networkName?: string;
    /**
     * Indicates if the FFI is published to other members of the multiparty network
     */
    published?: boolean;
    /**
     * A version for the FFI - use of semantic versioning such as 'v1.0.1' is encouraged
     */
    version?: string;
};

export type PostContractsInvokeData = {
    /**
     * When true the HTTP request blocks until the blockchain transaction is confirmed
     */
    confirm?: string;
    requestBody?: {
        /**
         * ContractCallRequest.data
         */
        data?: {
            [key: string]: unknown;
        };
        /**
         * An in-line FFI errors definition for the method to invoke. Alternative to specifying FFI
         */
        errors?: Array<{
            /**
             * A description of the smart contract error
             */
            description?: string;
            /**
             * The name of the error
             */
            name?: string;
            /**
             * An array of error parameter/argument definitions
             */
            params?: Array<{
                /**
                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                 */
                name?: string;
                /**
                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                 */
                schema?: unknown;
            }>;
        }>;
        /**
         * An optional identifier to allow idempotent submission of requests. Stored on the transaction uniquely within a namespace
         */
        idempotencyKey?: string;
        /**
         * A map of named inputs. The name and type of each input must be compatible with the FFI description of the method, so that FireFly knows how to serialize it to the blockchain via the connector
         */
        input?: {
            [key: string]: unknown;
        };
        /**
         * The UUID of a method within a pre-configured FireFly interface (FFI) definition for a smart contract. Required if the 'method' is omitted. Also see Contract APIs as a way to configure a dedicated API for your FFI, including all methods and an OpenAPI/Swagger interface
         */
        interface?: string;
        /**
         * The blockchain signing key that will sign the invocation. Defaults to the first signing key of the organization that operates the node
         */
        key?: string;
        /**
         * A blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
         */
        location?: unknown;
        /**
         * You can specify a message to correlate with the invocation, which can be of type broadcast or private. Your specified method must support on-chain/off-chain correlation by taking a data input on the call
         */
        message?: {
            /**
             * For input allows you to specify data in-line in the message, that will be turned into data attachments. For output when fetchdata is used on API calls, includes the in-line data payloads of all data attachments
             */
            data?: Array<{
                /**
                 * The optional datatype to use for validation of the in-line data
                 */
                datatype?: {
                    /**
                     * The name of the datatype
                     */
                    name?: string;
                    /**
                     * The version of the datatype. Semantic versioning is encouraged, such as v1.0.1
                     */
                    version?: string;
                };
                /**
                 * The UUID of the referenced data resource
                 */
                id?: string;
                /**
                 * The data validator type to use for in-line data
                 */
                validator?: string;
                /**
                 * The in-line value for the data. Can be any JSON type - object, array, string, number or boolean
                 */
                value?: unknown;
            }>;
            /**
             * Allows you to specify details of the private group of recipients in-line in the message. Alternative to using the header.group to specify the hash of a group that has been previously resolved
             */
            group?: {
                /**
                 * An array of members of the group. If no identities local to the sending node are included, then the organization owner of the local node is added automatically
                 */
                members?: Array<{
                    /**
                     * The DID of the group member. On input can be a UUID or org name, and will be resolved to a DID
                     */
                    identity?: string;
                    /**
                     * The UUID of the node that will receive a copy of the off-chain message for the identity. The first applicable node for the identity will be picked automatically on input if not specified
                     */
                    node?: string;
                }>;
                /**
                 * Optional name for the group. Allows you to have multiple separate groups with the same list of participants
                 */
                name?: string;
            };
            /**
             * The message header contains all fields that are used to build the message hash
             */
            header?: {
                /**
                 * The DID of identity of the submitter
                 */
                author?: string;
                /**
                 * The correlation ID of the message. Set this when a message is a response to another message
                 */
                cid?: string;
                /**
                 * Private messages only - the identifier hash of the privacy group. Derived from the name and member list of the group
                 */
                group?: string;
                /**
                 * The on-chain signing key used to sign the transaction
                 */
                key?: string;
                /**
                 * The message tag indicates the purpose of the message to the applications that process it
                 */
                tag?: string;
                /**
                 * A message topic associates this message with an ordered stream of data. A custom topic should be assigned - using the default topic is discouraged
                 */
                topics?: Array<string>;
                /**
                 * The type of transaction used to order/deliver this message
                 */
                txtype?:
                    | 'none'
                    | 'unpinned'
                    | 'batch_pin'
                    | 'network_action'
                    | 'token_pool'
                    | 'token_transfer'
                    | 'contract_deploy'
                    | 'contract_invoke'
                    | 'contract_invoke_pin'
                    | 'token_approval'
                    | 'data_publish'
                    | 'user_operation_send';
                /**
                 * The type of the message
                 */
                type?:
                    | 'definition'
                    | 'broadcast'
                    | 'private'
                    | 'groupinit'
                    | 'transfer_broadcast'
                    | 'transfer_private'
                    | 'approval_broadcast'
                    | 'approval_private';
            };
            /**
             * An optional unique identifier for a message. Cannot be duplicated within a namespace, thus allowing idempotent submission of messages to the API. Local only - not transferred when the message is sent to other members of the network
             */
            idempotencyKey?: string;
        };
        /**
         * An in-line FFI method definition for the method to invoke. Required when FFI is not specified
         */
        method?: {
            /**
             * A description of the smart contract method
             */
            description?: string;
            /**
             * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
             */
            details?: {
                [key: string]: unknown;
            };
            /**
             * The name of the method
             */
            name?: string;
            /**
             * An array of method parameter/argument definitions
             */
            params?: Array<{
                /**
                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                 */
                name?: string;
                /**
                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                 */
                schema?: unknown;
            }>;
            /**
             * An array of method return definitions
             */
            returns?: Array<{
                /**
                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                 */
                name?: string;
                /**
                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                 */
                schema?: unknown;
            }>;
        };
        /**
         * The pathname of the method on the specified FFI
         */
        methodPath?: string;
        /**
         * A map of named inputs that will be passed through to the blockchain connector
         */
        options?: {
            [key: string]: unknown;
        };
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PostContractsInvokeResponse = {
    /**
     * The time the operation was created
     */
    created?: string;
    /**
     * Operation.data
     */
    data?: {
        [key: string]: unknown;
    };
    /**
     * Any error reported back from the plugin for this operation
     */
    error?: string;
    /**
     * The UUID of the operation
     */
    id?: string;
    /**
     * The input to this operation
     */
    input?: {
        [key: string]: unknown;
    };
    /**
     * The namespace of the operation
     */
    namespace?: string;
    /**
     * Any output reported back from the plugin for this operation
     */
    output?: {
        [key: string]: unknown;
    };
    /**
     * The plugin responsible for performing the operation
     */
    plugin?: string;
    /**
     * If this operation was initiated as a retry to a previous operation, this field points to the UUID of the operation being retried
     */
    retry?: string;
    /**
     * The current status of the operation
     */
    status?: string;
    /**
     * The UUID of the FireFly transaction the operation is part of
     */
    tx?: string;
    /**
     * The type of the operation
     */
    type?: 'blockchain_invoke' | 'user_operation_send';
    /**
     * The last update time of the operation
     */
    updated?: string;
};

export type GetContractsListenersData = {
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    _interface?: string;
    /**
     * Ascending sort order (overrides all fields in a multi-field sort)
     */
    ascending?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    backendid?: string;
    /**
     * Return a total count as well as items (adds extra database processing)
     */
    count?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    created?: string;
    /**
     * Descending sort order (overrides all fields in a multi-field sort)
     */
    descending?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    filters?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    id?: string;
    /**
     * The maximum number of records to return (max: 1,000)
     */
    limit?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    location?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    name?: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    signature?: string;
    /**
     * The number of records to skip (max: 1,000). Unsuitable for bulk operations
     */
    skip?: string;
    /**
     * Sort field. For multi-field sort use comma separated values (or multiple query values) with '-' prefix for descending
     */
    sort?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    state?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    topic?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    updated?: string;
};

export type GetContractsListenersResponse = Array<{
    /**
     * An ID assigned by the blockchain connector to this listener
     */
    backendId?: string;
    /**
     * The creation time of the listener
     */
    created?: string;
    /**
     * Deprecated: Please use 'event' in the array of 'filters' instead
     */
    event?: {
        /**
         * A description of the smart contract event
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The name of the event
         */
        name?: string;
        /**
         * An array of event parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
    };
    /**
     * A list of filters for the contract listener. Each filter is made up of an Event and an optional Location. Events matching these filters will always be emitted in the order determined by the blockchain.
     */
    filters?: Array<{
        /**
         * The definition of the event, either provided in-line when creating the listener, or extracted from the referenced FFI
         */
        event?: {
            /**
             * A description of the smart contract event
             */
            description?: string;
            /**
             * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
             */
            details?: {
                [key: string]: unknown;
            };
            /**
             * The name of the event
             */
            name?: string;
            /**
             * An array of event parameter/argument definitions
             */
            params?: Array<{
                /**
                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                 */
                name?: string;
                /**
                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                 */
                schema?: unknown;
            }>;
        };
        /**
         * A reference to an existing FFI, containing pre-registered type information for the event
         */
        interface?: {
            /**
             * The UUID of the FireFly interface
             */
            id?: string;
            /**
             * The name of the FireFly interface
             */
            name?: string;
            /**
             * The version of the FireFly interface
             */
            version?: string;
        };
        /**
         * A blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
         */
        location?: unknown;
        /**
         * The stringified signature of the event and location, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * The UUID of the smart contract listener
     */
    id: string;
    /**
     * Deprecated: Please use 'interface' in the array of 'filters' instead
     */
    interface?: {
        /**
         * The UUID of the FireFly interface
         */
        id?: string;
        /**
         * The name of the FireFly interface
         */
        name?: string;
        /**
         * The version of the FireFly interface
         */
        version?: string;
    };
    /**
     * Deprecated: Please use 'location' in the array of 'filters' instead
     */
    location?: unknown;
    /**
     * A descriptive name for the listener
     */
    name?: string;
    /**
     * The namespace of the listener, which defines the namespace of all blockchain events detected by this listener
     */
    namespace?: string;
    /**
     * Options that control how the listener subscribes to events from the underlying blockchain
     */
    options?: {
        /**
         * A blockchain specific string, such as a block number, to start listening from. The special strings 'oldest' and 'newest' are supported by all blockchain connectors. Default is 'newest'
         */
        firstEvent?: string;
    };
    /**
     * A concatenation of all the stringified signature of the event and location, as computed by the blockchain plugin
     */
    signature?: string;
    /**
     * A topic to set on the FireFly event that is emitted each time a blockchain event is detected from the blockchain. Setting this topic on a number of listeners allows applications to easily subscribe to all events they need
     */
    topic?: string;
}>;

export type GetContractsListenersWithCountResponse = {
    count: number;
    items: GetContractsListenersResponse;
    total: number;
};

export type PostContractsListenersData = {
    requestBody?: {
        /**
         * Deprecated: Please use 'event' in the array of 'filters' instead
         */
        event?: {
            /**
             * A description of the smart contract event
             */
            description?: string;
            /**
             * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
             */
            details?: {
                [key: string]: unknown;
            };
            /**
             * The name of the event
             */
            name?: string;
            /**
             * An array of event parameter/argument definitions
             */
            params?: Array<{
                /**
                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                 */
                name?: string;
                /**
                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                 */
                schema?: unknown;
            }>;
        };
        /**
         * Deprecated: Please use 'eventPath' in the array of 'filters' instead
         */
        eventPath?: string;
        /**
         * A list of filters for the contract listener. Each filter is made up of an Event and an optional Location. Events matching these filters will always be emitted in the order determined by the blockchain.
         */
        filters?: Array<{
            /**
             * The definition of the event, either provided in-line when creating the listener, or extracted from the referenced FFI
             */
            event?: {
                /**
                 * A description of the smart contract event
                 */
                description?: string;
                /**
                 * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                 */
                details?: {
                    [key: string]: unknown;
                };
                /**
                 * The name of the event
                 */
                name?: string;
                /**
                 * An array of event parameter/argument definitions
                 */
                params?: Array<{
                    /**
                     * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                     */
                    name?: string;
                    /**
                     * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                     */
                    schema?: unknown;
                }>;
            };
            /**
             * When creating a listener from an existing FFI, this is the pathname of the event on that FFI to be detected by this listener
             */
            eventPath?: string;
            /**
             * A reference to an existing FFI, containing pre-registered type information for the event
             */
            interface?: {
                /**
                 * The UUID of the FireFly interface
                 */
                id?: string;
                /**
                 * The name of the FireFly interface
                 */
                name?: string;
                /**
                 * The version of the FireFly interface
                 */
                version?: string;
            };
            /**
             * A blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
             */
            location?: unknown;
        }>;
        /**
         * Deprecated: Please use 'interface' in the array of 'filters' instead
         */
        interface?: {
            /**
             * The UUID of the FireFly interface
             */
            id?: string;
            /**
             * The name of the FireFly interface
             */
            name?: string;
            /**
             * The version of the FireFly interface
             */
            version?: string;
        };
        /**
         * Deprecated: Please use 'location' in the array of 'filters' instead
         */
        location?: unknown;
        /**
         * A descriptive name for the listener
         */
        name?: string;
        /**
         * Options that control how the listener subscribes to events from the underlying blockchain
         */
        options?: {
            /**
             * A blockchain specific string, such as a block number, to start listening from. The special strings 'oldest' and 'newest' are supported by all blockchain connectors. Default is 'newest'
             */
            firstEvent?: string;
        };
        /**
         * A topic to set on the FireFly event that is emitted each time a blockchain event is detected from the blockchain. Setting this topic on a number of listeners allows applications to easily subscribe to all events they need
         */
        topic?: string;
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PostContractsListenersResponse = {
    /**
     * An ID assigned by the blockchain connector to this listener
     */
    backendId?: string;
    /**
     * The creation time of the listener
     */
    created?: string;
    /**
     * Deprecated: Please use 'event' in the array of 'filters' instead
     */
    event?: {
        /**
         * A description of the smart contract event
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The name of the event
         */
        name?: string;
        /**
         * An array of event parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
    };
    /**
     * A list of filters for the contract listener. Each filter is made up of an Event and an optional Location. Events matching these filters will always be emitted in the order determined by the blockchain.
     */
    filters?: Array<{
        /**
         * The definition of the event, either provided in-line when creating the listener, or extracted from the referenced FFI
         */
        event?: {
            /**
             * A description of the smart contract event
             */
            description?: string;
            /**
             * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
             */
            details?: {
                [key: string]: unknown;
            };
            /**
             * The name of the event
             */
            name?: string;
            /**
             * An array of event parameter/argument definitions
             */
            params?: Array<{
                /**
                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                 */
                name?: string;
                /**
                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                 */
                schema?: unknown;
            }>;
        };
        /**
         * A reference to an existing FFI, containing pre-registered type information for the event
         */
        interface?: {
            /**
             * The UUID of the FireFly interface
             */
            id?: string;
            /**
             * The name of the FireFly interface
             */
            name?: string;
            /**
             * The version of the FireFly interface
             */
            version?: string;
        };
        /**
         * A blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
         */
        location?: unknown;
        /**
         * The stringified signature of the event and location, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * The UUID of the smart contract listener
     */
    id?: string;
    /**
     * Deprecated: Please use 'interface' in the array of 'filters' instead
     */
    interface?: {
        /**
         * The UUID of the FireFly interface
         */
        id?: string;
        /**
         * The name of the FireFly interface
         */
        name?: string;
        /**
         * The version of the FireFly interface
         */
        version?: string;
    };
    /**
     * Deprecated: Please use 'location' in the array of 'filters' instead
     */
    location?: unknown;
    /**
     * A descriptive name for the listener
     */
    name?: string;
    /**
     * The namespace of the listener, which defines the namespace of all blockchain events detected by this listener
     */
    namespace?: string;
    /**
     * Options that control how the listener subscribes to events from the underlying blockchain
     */
    options?: {
        /**
         * A blockchain specific string, such as a block number, to start listening from. The special strings 'oldest' and 'newest' are supported by all blockchain connectors. Default is 'newest'
         */
        firstEvent?: string;
    };
    /**
     * A concatenation of all the stringified signature of the event and location, as computed by the blockchain plugin
     */
    signature?: string;
    /**
     * A topic to set on the FireFly event that is emitted each time a blockchain event is detected from the blockchain. Setting this topic on a number of listeners allows applications to easily subscribe to all events they need
     */
    topic?: string;
};

export type DeleteContractsListenersByNameOrIdData = {
    /**
     * The contract listener name or ID
     */
    nameOrId: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type DeleteContractsListenersByNameOrIdResponse = void;

export type GetContractsListenersByNameOrIdData = {
    /**
     * When set, the API will return additional status information if available
     */
    fetchstatus?: boolean;
    /**
     * The contract listener name or ID
     */
    nameOrId: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type GetContractsListenersByNameOrIdResponse = {
    error?: string;
    /**
     * An ID assigned by the blockchain connector to this listener
     */
    backendId: string;
    /**
     * The creation time of the listener
     */
    created: string;
    /**
     * Deprecated: Please use 'event' in the array of 'filters' instead
     */
    event: {
        /**
         * A description of the smart contract event
         */
        description?: string;
        /**
         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
         */
        details?: {
            [key: string]: unknown;
        };
        /**
         * The name of the event
         */
        name?: string;
        /**
         * An array of event parameter/argument definitions
         */
        params?: Array<{
            /**
             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
             */
            name?: string;
            /**
             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
             */
            schema?: unknown;
        }>;
    };
    /**
     * A list of filters for the contract listener. Each filter is made up of an Event and an optional Location. Events matching these filters will always be emitted in the order determined by the blockchain.
     */
    filters: Array<{
        /**
         * The definition of the event, either provided in-line when creating the listener, or extracted from the referenced FFI
         */
        event?: {
            /**
             * A description of the smart contract event
             */
            description?: string;
            /**
             * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
             */
            details?: {
                [key: string]: unknown;
            };
            /**
             * The name of the event
             */
            name?: string;
            /**
             * An array of event parameter/argument definitions
             */
            params?: Array<{
                /**
                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                 */
                name?: string;
                /**
                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                 */
                schema?: unknown;
            }>;
        };
        /**
         * A reference to an existing FFI, containing pre-registered type information for the event
         */
        interface?: {
            /**
             * The UUID of the FireFly interface
             */
            id?: string;
            /**
             * The name of the FireFly interface
             */
            name?: string;
            /**
             * The version of the FireFly interface
             */
            version?: string;
        };
        /**
         * A blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
         */
        location?: unknown;
        /**
         * The stringified signature of the event and location, as computed by the blockchain plugin
         */
        signature?: string;
    }>;
    /**
     * The UUID of the smart contract listener
     */
    id: string;
    /**
     * Deprecated: Please use 'interface' in the array of 'filters' instead
     */
    interface: {
        /**
         * The UUID of the FireFly interface
         */
        id?: string;
        /**
         * The name of the FireFly interface
         */
        name?: string;
        /**
         * The version of the FireFly interface
         */
        version?: string;
    };
    /**
     * Deprecated: Please use 'location' in the array of 'filters' instead
     */
    location: { address: string };
    /**
     * A descriptive name for the listener
     */
    name: string;
    /**
     * The namespace of the listener, which defines the namespace of all blockchain events detected by this listener
     */
    namespace: string;
    /**
     * Options that control how the listener subscribes to events from the underlying blockchain
     */
    options: {
        /**
         * A blockchain specific string, such as a block number, to start listening from. The special strings 'oldest' and 'newest' are supported by all blockchain connectors. Default is 'newest'
         */
        firstEvent?: string;
    };
    /**
     * A concatenation of all the stringified signature of the event and location, as computed by the blockchain plugin
     */
    signature: string;
    /**
     * A topic to set on the FireFly event that is emitted each time a blockchain event is detected from the blockchain. Setting this topic on a number of listeners allows applications to easily subscribe to all events they need
     */
    topic: string;

    status: string;
};

export type PostContractsListenersSignatureData = {
    requestBody?: {
        /**
         * Deprecated: Please use 'event' in the array of 'filters' instead
         */
        event?: {
            /**
             * A description of the smart contract event
             */
            description?: string;
            /**
             * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
             */
            details?: {
                [key: string]: unknown;
            };
            /**
             * The name of the event
             */
            name?: string;
            /**
             * An array of event parameter/argument definitions
             */
            params?: Array<{
                /**
                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                 */
                name?: string;
                /**
                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                 */
                schema?: unknown;
            }>;
        };
        /**
         * Deprecated: Please use 'eventPath' in the array of 'filters' instead
         */
        eventPath?: string;
        /**
         * A list of filters for the contract listener. Each filter is made up of an Event and an optional Location. Events matching these filters will always be emitted in the order determined by the blockchain.
         */
        filters?: Array<{
            /**
             * The definition of the event, either provided in-line when creating the listener, or extracted from the referenced FFI
             */
            event?: {
                /**
                 * A description of the smart contract event
                 */
                description?: string;
                /**
                 * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                 */
                details?: {
                    [key: string]: unknown;
                };
                /**
                 * The name of the event
                 */
                name?: string;
                /**
                 * An array of event parameter/argument definitions
                 */
                params?: Array<{
                    /**
                     * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                     */
                    name?: string;
                    /**
                     * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                     */
                    schema?: unknown;
                }>;
            };
            /**
             * When creating a listener from an existing FFI, this is the pathname of the event on that FFI to be detected by this listener
             */
            eventPath?: string;
            /**
             * A reference to an existing FFI, containing pre-registered type information for the event
             */
            interface?: {
                /**
                 * The UUID of the FireFly interface
                 */
                id?: string;
                /**
                 * The name of the FireFly interface
                 */
                name?: string;
                /**
                 * The version of the FireFly interface
                 */
                version?: string;
            };
            /**
             * A blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
             */
            location?: unknown;
        }>;
        /**
         * Deprecated: Please use 'interface' in the array of 'filters' instead
         */
        interface?: {
            /**
             * The UUID of the FireFly interface
             */
            id?: string;
            /**
             * The name of the FireFly interface
             */
            name?: string;
            /**
             * The version of the FireFly interface
             */
            version?: string;
        };
        /**
         * Deprecated: Please use 'location' in the array of 'filters' instead
         */
        location?: unknown;
        /**
         * A descriptive name for the listener
         */
        name?: string;
        /**
         * Options that control how the listener subscribes to events from the underlying blockchain
         */
        options?: {
            /**
             * A blockchain specific string, such as a block number, to start listening from. The special strings 'oldest' and 'newest' are supported by all blockchain connectors. Default is 'newest'
             */
            firstEvent?: string;
        };
        /**
         * A topic to set on the FireFly event that is emitted each time a blockchain event is detected from the blockchain. Setting this topic on a number of listeners allows applications to easily subscribe to all events they need
         */
        topic?: string;
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PostContractsListenersSignatureResponse = {
    /**
     * A concatenation of all the stringified signature of the event and location, as computed by the blockchain plugin
     */
    signature?: string;
};

export type PostContractsQueryData = {
    requestBody?: {
        /**
         * ContractCallRequest.data
         */
        data?: {
            [key: string]: unknown;
        };
        /**
         * An in-line FFI errors definition for the method to invoke. Alternative to specifying FFI
         */
        errors?: Array<{
            /**
             * A description of the smart contract error
             */
            description?: string;
            /**
             * The name of the error
             */
            name?: string;
            /**
             * An array of error parameter/argument definitions
             */
            params?: Array<{
                /**
                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                 */
                name?: string;
                /**
                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                 */
                schema?: unknown;
            }>;
        }>;
        /**
         * An optional identifier to allow idempotent submission of requests. Stored on the transaction uniquely within a namespace
         */
        idempotencyKey?: string;
        /**
         * A map of named inputs. The name and type of each input must be compatible with the FFI description of the method, so that FireFly knows how to serialize it to the blockchain via the connector
         */
        input?: {
            [key: string]: unknown;
        };
        /**
         * The UUID of a method within a pre-configured FireFly interface (FFI) definition for a smart contract. Required if the 'method' is omitted. Also see Contract APIs as a way to configure a dedicated API for your FFI, including all methods and an OpenAPI/Swagger interface
         */
        interface?: string;
        /**
         * The blockchain signing key that will sign the invocation. Defaults to the first signing key of the organization that operates the node
         */
        key?: string;
        /**
         * A blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
         */
        location?: unknown;
        /**
         * An in-line FFI method definition for the method to invoke. Required when FFI is not specified
         */
        method?: {
            /**
             * A description of the smart contract method
             */
            description?: string;
            /**
             * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
             */
            details?: {
                [key: string]: unknown;
            };
            /**
             * The name of the method
             */
            name?: string;
            /**
             * An array of method parameter/argument definitions
             */
            params?: Array<{
                /**
                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                 */
                name?: string;
                /**
                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                 */
                schema?: unknown;
            }>;
            /**
             * An array of method return definitions
             */
            returns?: Array<{
                /**
                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                 */
                name?: string;
                /**
                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                 */
                schema?: unknown;
            }>;
        };
        /**
         * The pathname of the method on the specified FFI
         */
        methodPath?: string;
        /**
         * A map of named inputs that will be passed through to the blockchain connector
         */
        options?: {
            [key: string]: unknown;
        };
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PostContractsQueryResponse = {
    [key: string]: unknown;
};

export type GetEventsData = {
    /**
     * Ascending sort order (overrides all fields in a multi-field sort)
     */
    ascending?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    correlator?: string;
    /**
     * Return a total count as well as items (adds extra database processing)
     */
    count?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    created?: string;
    /**
     * Descending sort order (overrides all fields in a multi-field sort)
     */
    descending?: string;
    /**
     * When set, the API will return the record that this item references in its 'reference' field
     */
    fetchreference?: string;
    /**
     * When set, the API will return the record that this item references in its 'reference' field
     */
    fetchreferences?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    id?: string;
    /**
     * The maximum number of records to return (max: 1,000)
     */
    limit?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    reference?: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    sequence?: string;
    /**
     * The number of records to skip (max: 1,000). Unsuitable for bulk operations
     */
    skip?: string;
    /**
     * Sort field. For multi-field sort use comma separated values (or multiple query values) with '-' prefix for descending
     */
    sort?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    topic?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    tx?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    type?: string;
};

export type GetEventsResponse = Array<{
    /**
     * For message events, this is the 'header.cid' field from the referenced message. For certain other event types, a secondary object is referenced such as a token pool
     */
    correlator?: string;
    /**
     * The time the event was emitted. Not guaranteed to be unique, or to increase between events in the same order as the final sequence events are delivered to your application. As such, the 'sequence' field should be used instead of the 'created' field for querying events in the exact order they are delivered to applications
     */
    created?: string;
    /**
     * The UUID assigned to this event by your local FireFly node
     */
    id?: string;
    /**
     * The namespace of the event. Your application must subscribe to events within a namespace
     */
    namespace?: string;
    /**
     * The UUID of an resource that is the subject of this event. The event type determines what type of resource is referenced, and whether this field might be unset
     */
    reference?: string;
    /**
     * A sequence indicating the order in which events are delivered to your application. Assure to be unique per event in your local FireFly database (unlike the created timestamp)
     */
    sequence?: number;
    /**
     * A stream of information this event relates to. For message confirmation events, a separate event is emitted for each topic in the message. For blockchain events, the listener specifies the topic. Rules exist for how the topic is set for other event types
     */
    topic?: string;
    /**
     * The UUID of a transaction that is event is part of. Not all events are part of a transaction
     */
    tx?: string;
    /**
     * All interesting activity in FireFly is emitted as a FireFly event, of a given type. The 'type' combined with the 'reference' can be used to determine how to process the event within your application
     */
    type?:
        | 'transaction_submitted'
        | 'contract_interface_confirmed'
        | 'contract_api_confirmed'
        | 'blockchain_event_received'
        | 'blockchain_invoke_op_succeeded'
        | 'blockchain_invoke_op_failed';

    blockchainEvent?: GetBlockchaineventsResponse[number];
}>;

export type GetEventsWithCountResponse = {
    count: number;
    items: GetEventsResponse;
    total: number;
};

export type GetEventsByEidData = {
    /**
     * The event ID
     */
    eid: string;
    /**
     * When set, the API will return the record that this item references in its 'reference' field
     */
    fetchreference?: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type GetEventsByEidResponse = {
    /**
     * For message events, this is the 'header.cid' field from the referenced message. For certain other event types, a secondary object is referenced such as a token pool
     */
    correlator?: string;
    /**
     * The time the event was emitted. Not guaranteed to be unique, or to increase between events in the same order as the final sequence events are delivered to your application. As such, the 'sequence' field should be used instead of the 'created' field for querying events in the exact order they are delivered to applications
     */
    created?: string;
    /**
     * The UUID assigned to this event by your local FireFly node
     */
    id?: string;
    /**
     * The namespace of the event. Your application must subscribe to events within a namespace
     */
    namespace?: string;
    /**
     * The UUID of an resource that is the subject of this event. The event type determines what type of resource is referenced, and whether this field might be unset
     */
    reference?: string;
    /**
     * A sequence indicating the order in which events are delivered to your application. Assure to be unique per event in your local FireFly database (unlike the created timestamp)
     */
    sequence?: number;
    /**
     * A stream of information this event relates to. For message confirmation events, a separate event is emitted for each topic in the message. For blockchain events, the listener specifies the topic. Rules exist for how the topic is set for other event types
     */
    topic?: string;
    /**
     * The UUID of a transaction that is event is part of. Not all events are part of a transaction
     */
    tx?: string;
    /**
     * All interesting activity in FireFly is emitted as a FireFly event, of a given type. The 'type' combined with the 'reference' can be used to determine how to process the event within your application
     */
    type?:
        | 'transaction_submitted'
        | 'message_confirmed'
        | 'message_rejected'
        | 'datatype_confirmed'
        | 'identity_confirmed'
        | 'identity_updated'
        | 'token_pool_confirmed'
        | 'token_pool_op_failed'
        | 'token_transfer_confirmed'
        | 'token_transfer_op_failed'
        | 'token_approval_confirmed'
        | 'token_approval_op_failed'
        | 'contract_interface_confirmed'
        | 'contract_api_confirmed'
        | 'blockchain_event_received'
        | 'blockchain_invoke_op_succeeded'
        | 'blockchain_invoke_op_failed'
        | 'blockchain_contract_deploy_op_succeeded'
        | 'blockchain_contract_deploy_op_failed';
};

export type GetNamespacesData = {
    /**
     * When set, the API will return namespaces even if they are not yet initialized, including in error cases where an initializationError is included
     */
    includeinitializing?: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type GetNamespacesResponse = Array<{
    /**
     * The time the namespace was created
     */
    created?: string;
    /**
     * A description of the namespace
     */
    description?: string;
    /**
     * Set to a non-empty string in the case that the namespace is currently failing to initialize
     */
    initializationError?: string;
    /**
     * Set to true if the namespace is still initializing
     */
    initializing?: boolean;
    /**
     * The local namespace name
     */
    name?: string;
    /**
     * The shared namespace name within the multiparty network
     */
    networkName?: string;
}>;

export type GetNamespacesByNsData = {
    /**
     * The namespace which scopes this request
     */
    ns: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type GetNamespacesByNsResponse = {
    /**
     * The time the namespace was created
     */
    created?: string;
    /**
     * A description of the namespace
     */
    description?: string;
    /**
     * The local namespace name
     */
    name?: string;
    /**
     * The shared namespace name within the multiparty network
     */
    networkName?: string;
};

export type PatchOperationsByNsopidData = {
    /**
     * The operation ID as passed to the connector when the operation was performed, including the 'namespace:' prefix
     */
    nsopid: string;
    requestBody?: {
        /**
         * Any error reported back from the plugin for this operation
         */
        error?: string;
        /**
         * Any output reported back from the plugin for this operation
         */
        output?: {
            [key: string]: unknown;
        };
        /**
         * The current status of the operation
         */
        status?: string;
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PatchOperationsByNsopidResponse = {
    [key: string]: unknown;
};

export type PostResetData = {
    requestBody?: unknown;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PostResetResponse = void;

export type GetOperationsData = {
    /**
     * Ascending sort order (overrides all fields in a multi-field sort)
     */
    ascending?: string;
    /**
     * Return a total count as well as items (adds extra database processing)
     */
    count?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    created?: string;
    /**
     * Descending sort order (overrides all fields in a multi-field sort)
     */
    descending?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    error?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    id?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    input?: string;
    /**
     * The maximum number of records to return (max: 1,000)
     */
    limit?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    output?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    data?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    plugin?: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    retry?: string;
    /**
     * The number of records to skip (max: 1,000). Unsuitable for bulk operations
     */
    skip?: string;
    /**
     * Sort field. For multi-field sort use comma separated values (or multiple query values) with '-' prefix for descending
     */
    sort?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    status?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    tx?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    type?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    updated?: string;
};

export type GetOperationsResponse = Array<{
    /**
     * The time the operation was created
     */
    created?: string;
    /**
     * Operation.data
     */
    data?: {
        [key: string]: unknown;
    };
    /**
     * Any error reported back from the plugin for this operation
     */
    error?: string;
    /**
     * The UUID of the operation
     */
    id: string;
    /**
     * The input to this operation
     */
    input?: {
        [key: string]: unknown;
    };
    /**
     * The namespace of the operation
     */
    namespace?: string;
    /**
     * Any output reported back from the plugin for this operation
     */
    output?: {
        [key: string]: unknown;
    };
    /**
     * The plugin responsible for performing the operation
     */
    plugin?: string;
    /**
     * If this operation was initiated as a retry to a previous operation, this field points to the UUID of the operation being retried
     */
    retry?: string;
    /**
     * The current status of the operation
     */
    status?: string;
    /**
     * The UUID of the FireFly transaction the operation is part of
     */
    tx?: string;
    /**
     * The type of the operation
     */
    type?: 'blockchain_invoke' | 'user_operation_send';
    /**
     * The last update time of the operation
     */
    updated?: string;

    detail?: Record<any, any>;
}>;

export type GetOperationsWithCountResponse = {
    count: number;
    items: GetOperationsResponse;
    total: number;
};

export type GetOperationsOnchainByOpidData = {
    /**
     * When set, the API will return additional status information if available
     */
    fetchstatus?: boolean;
    /**
     * The operation ID key to get
     */
    opid: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type GetOperationsOnchainByOpidResponse = {
    /**
     * The time the operation was created
     */
    created?: string;
    /**
     * Operation.data
     */
    data?: {
        [key: string]: unknown;
    };
    /**
     * Additional detailed information about an operation provided by the connector
     */
    detail?: unknown;
    /**
     * Any error reported back from the plugin for this operation
     */
    error?: string;
    /**
     * The UUID of the operation
     */
    id?: string;
    /**
     * The input to this operation
     */
    input?: {
        [key: string]: unknown;
    };
    /**
     * The namespace of the operation
     */
    namespace?: string;
    /**
     * Any output reported back from the plugin for this operation
     */
    output?: {
        [key: string]: unknown;
    };
    /**
     * The plugin responsible for performing the operation
     */
    plugin?: string;
    /**
     * If this operation was initiated as a retry to a previous operation, this field points to the UUID of the operation being retried
     */
    retry?: string;
    /**
     * The current status of the operation
     */
    status?: string;
    /**
     * The UUID of the FireFly transaction the operation is part of
     */
    tx?: string;
    /**
     * The type of the operation
     */
    type?: 'blockchain_invoke' | 'user_operation_send';
    /**
     * The last update time of the operation
     */
    updated?: string;
};

export type PostOperationsByOpidRetryData = {
    /**
     * The UUID of the operation
     */
    opid: string;
    requestBody?: {
        [key: string]: unknown;
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * transaction hash
     */
    txHash?: string;
};

export type PostOperationsByOpidRetryResponse = {
    /**
     * The time the operation was created
     */
    created?: string;
    /**
     * Operation.data
     */
    data?: {
        [key: string]: unknown;
    };
    /**
     * Any error reported back from the plugin for this operation
     */
    error?: string;
    /**
     * The UUID of the operation
     */
    id?: string;
    /**
     * The input to this operation
     */
    input?: {
        [key: string]: unknown;
    };
    /**
     * The namespace of the operation
     */
    namespace?: string;
    /**
     * Any output reported back from the plugin for this operation
     */
    output?: {
        [key: string]: unknown;
    };
    /**
     * The plugin responsible for performing the operation
     */
    plugin?: string;
    /**
     * If this operation was initiated as a retry to a previous operation, this field points to the UUID of the operation being retried
     */
    retry?: string;
    /**
     * The current status of the operation
     */
    status?: string;
    /**
     * The UUID of the FireFly transaction the operation is part of
     */
    tx?: string;
    /**
     * The type of the operation
     */
    type?: 'blockchain_invoke' | 'user_operation_send';
    /**
     * The last update time of the operation
     */
    updated?: string;
};

export type PostOperationsByOpidStatusData = {
    /**
     * The UUID of the operation
     */
    opid: string;
    requestBody?: {
        [key: string]: unknown;
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PostOperationsByOpidStatusResponse = {
    /**
     * The time the operation was created
     */
    created?: string;
    /**
     * Operation.data
     */
    data?: {
        [key: string]: unknown;
    };
    /**
     * Any error reported back from the plugin for this operation
     */
    error?: string;
    /**
     * The UUID of the operation
     */
    id?: string;
    /**
     * The input to this operation
     */
    input?: {
        [key: string]: unknown;
    };
    /**
     * The namespace of the operation
     */
    namespace?: string;
    /**
     * Any output reported back from the plugin for this operation
     */
    output?: {
        [key: string]: unknown;
    };
    /**
     * The plugin responsible for performing the operation
     */
    plugin?: string;
    /**
     * If this operation was initiated as a retry to a previous operation, this field points to the UUID of the operation being retried
     */
    retry?: string;
    /**
     * The current status of the operation
     */
    status?: string;
    /**
     * The UUID of the FireFly transaction the operation is part of
     */
    tx?: string;
    /**
     * The type of the operation
     */
    type?: 'blockchain_invoke' | 'user_operation_send';
    /**
     * The last update time of the operation
     */
    updated?: string;
};

export type GetSignersData = {
    /**
     * Ascending sort order (overrides all fields in a multi-field sort)
     */
    ascending?: string;
    /**
     * Return a total count as well as items (adds extra database processing)
     */
    count?: string;
    /**
     * Descending sort order (overrides all fields in a multi-field sort)
     */
    descending?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    id?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    keyIdentifier?: string;
    /**
     * The maximum number of records to return (max: 1,000)
     */
    limit?: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * The number of records to skip (max: 1,000). Unsuitable for bulk operations
     */
    skip?: string;
    /**
     * Sort field. For multi-field sort use comma separated values (or multiple query values) with '-' prefix for descending
     */
    sort?: string;
};

export type GetSignersResponse = Array<{
    /**
     * Signer.created
     */
    created?: string;
    /**
     * Signer.description
     */
    description?: string;
    /**
     * Signer.id
     */
    id?: string;
    /**
     * Signer.isActive
     */
    isActive?: boolean;
    /**
     * Signer.keyIdentifier
     */
    keyIdentifier?: string;
    /**
     * Signer.name
     */
    name?: string;
    /**
     * Signer.namespace
     */
    namespace?: string;
    /**
     * Signer.provider
     */
    provider?: string;
    /**
     * Signer.providerResource
     */
    providerResource?: string;
    /**
     * Signer.providerService
     */
    providerService?: string;
    /**
     * Signer.updated
     */
    updated?: string;
}>;

export type PostSignersData = {
    requestBody?: {
        /**
         * Signer.created
         */
        created?: string;
        /**
         * Signer.description
         */
        description?: string;
        /**
         * Signer.id
         */
        id?: string;
        /**
         * Signer.isActive
         */
        isActive?: boolean;
        /**
         * Signer.keyIdentifier
         */
        keyIdentifier?: string;
        /**
         * Signer.name
         */
        name?: string;
        /**
         * Signer.namespace
         */
        namespace?: string;
        /**
         * Signer.provider
         */
        provider?: string;
        /**
         * Signer.providerResource
         */
        providerResource?: string;
        /**
         * Signer.providerService
         */
        providerService?: string;
        /**
         * Signer.updated
         */
        updated?: string;
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PostSignersResponse = {
    /**
     * Signer.created
     */
    created?: string;
    /**
     * Signer.description
     */
    description?: string;
    /**
     * Signer.id
     */
    id?: string;
    /**
     * Signer.isActive
     */
    isActive?: boolean;
    /**
     * Signer.keyIdentifier
     */
    keyIdentifier?: string;
    /**
     * Signer.name
     */
    name?: string;
    /**
     * Signer.namespace
     */
    namespace?: string;
    /**
     * Signer.provider
     */
    provider?: string;
    /**
     * Signer.providerResource
     */
    providerResource?: string;
    /**
     * Signer.providerService
     */
    providerService?: string;
    /**
     * Signer.updated
     */
    updated?: string;
};

export type GetSignersByIdData = {
    /**
     * Signer ID
     */
    id: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type GetSignersByIdResponse = {
    /**
     * Signer.created
     */
    created?: string;
    /**
     * Signer.description
     */
    description?: string;
    /**
     * Signer.id
     */
    id?: string;
    /**
     * Signer.isActive
     */
    isActive?: boolean;
    /**
     * Signer.keyIdentifier
     */
    keyIdentifier?: string;
    /**
     * Signer.name
     */
    name?: string;
    /**
     * Signer.namespace
     */
    namespace?: string;
    /**
     * Signer.provider
     */
    provider?: string;
    /**
     * Signer.providerResource
     */
    providerResource?: string;
    /**
     * Signer.providerService
     */
    providerService?: string;
    /**
     * Signer.updated
     */
    updated?: string;
};

export type GetStatusData = {
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type GetStatusResponse = {
    /**
     * The namespace that this status applies to
     */
    namespace?: {
        /**
         * The time the namespace was created
         */
        created?: string;
        /**
         * A description of the namespace
         */
        description?: string;
        /**
         * The local namespace name
         */
        name?: string;
        /**
         * The shared namespace name within the multiparty network
         */
        networkName?: string;
    };
    /**
     * Details of the local node
     */
    node?: {
        /**
         * The UUID of the node, if registered
         */
        id?: string;
        /**
         * The name of this node, as specified in the local configuration
         */
        name?: string;
        /**
         * Whether the node has been successfully registered
         */
        registered?: boolean;
    };
    /**
     * Details of the root organization identity registered for this namespace on the local node
     */
    org?: {
        /**
         * The DID of the organization identity, if registered
         */
        did?: string;
        /**
         * The UUID of the organization, if registered
         */
        id?: string;
        /**
         * The name of the node operator organization, as specified in the local configuration
         */
        name?: string;
        /**
         * Whether the organization has been successfully registered
         */
        registered?: boolean;
        /**
         * Array of verifiers (blockchain keys) owned by this identity
         */
        verifiers?: Array<{
            /**
             * The type of the verifier
             */
            type?: 'ethereum_address';
            /**
             * The verifier string, such as an Ethereum address, or Fabric MSP identifier
             */
            value?: string;
        }>;
    };
    /**
     * Information about plugins configured on this namespace
     */
    plugins?: {
        /**
         * The blockchain plugins on this namespace
         */
        blockchain?: Array<{
            /**
             * The name of the plugin
             */
            name?: string;
            /**
             * The type of the plugin
             */
            pluginType?: string;
        }>;
        /**
         * The database plugins on this namespace
         */
        database?: Array<{
            /**
             * The name of the plugin
             */
            name?: string;
            /**
             * The type of the plugin
             */
            pluginType?: string;
        }>;
        /**
         * The event plugins on this namespace
         */
        events?: Array<{
            /**
             * The name of the plugin
             */
            name?: string;
            /**
             * The type of the plugin
             */
            pluginType?: string;
        }>;
        /**
         * NamespaceStatusPlugins.messageBroker
         */
        messageBroker?: Array<{
            /**
             * The name of the plugin
             */
            name?: string;
            /**
             * The type of the plugin
             */
            pluginType?: string;
        }>;
    };
};

export type GetSubscriptionsData = {
    /**
     * Ascending sort order (overrides all fields in a multi-field sort)
     */
    ascending?: string;
    /**
     * Return a total count as well as items (adds extra database processing)
     */
    count?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    created?: string;
    /**
     * Descending sort order (overrides all fields in a multi-field sort)
     */
    descending?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    events?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    filters?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    id?: string;
    /**
     * The maximum number of records to return (max: 1,000)
     */
    limit?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    name?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    options?: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * The number of records to skip (max: 1,000). Unsuitable for bulk operations
     */
    skip?: string;
    /**
     * Sort field. For multi-field sort use comma separated values (or multiple query values) with '-' prefix for descending
     */
    sort?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    transport?: string;
};

export type GetSubscriptionsResponse = Array<{
    /**
     * Creation time of the subscription
     */
    created: string;
    /**
     * Ephemeral subscriptions only exist as long as the application is connected, and as such will miss events that occur while the application is disconnected, and cannot be created administratively. You can create one over over a connected WebSocket connection
     */
    ephemeral: boolean;
    /**
     * Server-side filter to apply to events
     */
    filter: {
        /**
         * Deprecated: Please use 'message.author' instead
         */
        author?: string;
        /**
         * Filters specific to blockchain events. If an event is not a blockchain event, these filters are ignored
         */
        blockchainevent?: {
            /**
             * Regular expression to apply to the blockchain event 'listener' field, which is the UUID of the event listener. So you can restrict your subscription to certain blockchain listeners. Alternatively to avoid your application need to know listener UUIDs you can set the 'topic' field of blockchain event listeners, and use a topic filter on your subscriptions
             */
            listener?: string;
            /**
             * Regular expression to apply to the blockchain event 'name' field, which is the name of the event in the underlying blockchain smart contract
             */
            name?: string;
        };
        /**
         * Regular expression to apply to the event type, to subscribe to a subset of event types
         */
        events?: string;
        /**
         * Deprecated: Please use 'message.group' instead
         */
        group?: string;
        /**
         * Filters specific to message events. If an event is not a message event, these filters are ignored
         */
        message?: {
            /**
             * Regular expression to apply to the message 'header.author' field
             */
            author?: string;
            /**
             * Regular expression to apply to the message 'header.group' field
             */
            group?: string;
            /**
             * Regular expression to apply to the message 'header.tag' field
             */
            tag?: string;
        };
        /**
         * Deprecated: Please use 'message.tag' instead
         */
        tag?: string;
        /**
         * Regular expression to apply to the topic of the event, to subscribe to a subset of topics. Note for messages sent with multiple topics, a separate event is emitted for each topic
         */
        topic?: string;
        /**
         * Deprecated: Please use 'topic' instead
         */
        topics?: string;
        /**
         * Filters specific to events with a transaction. If an event is not associated with a transaction, this filter is ignored
         */
        transaction?: {
            /**
             * Regular expression to apply to the transaction 'type' field
             */
            type?: string;
        };
    };
    /**
     * The UUID of the subscription
     */
    id: string;
    /**
     * The name of the subscription. The application specifies this name when it connects, in order to attach to the subscription and receive events that arrived while it was disconnected. If multiple apps connect to the same subscription, events are workload balanced across the connected application instances
     */
    name: string;
    /**
     * The namespace of the subscription. A subscription will only receive events generated in the namespace of the subscription
     */
    namespace: string;
    /**
     * Subscription options
     */
    options: {
        /**
         * Events are delivered in batches in an ordered array. The batch size is capped to the readAhead limit. The event payload is always an array even if there is a single event in the batch, allowing client-side optimizations when processing the events in a group. Available for both Webhooks and WebSockets.
         */
        batch?: boolean;
        /**
         * When batching is enabled, the optional timeout to send events even when the batch hasn't filled.
         */
        batchTimeout?: string;
        /**
         * Webhooks only: When true the event will be acknowledged before the webhook is invoked, allowing parallel invocations
         */
        fastack?: boolean;
        /**
         * Whether your application would like to receive events from the 'oldest' event emitted by your FireFly node (from the beginning of time), or the 'newest' event (from now), or a specific event sequence. Default is 'newest'
         */
        firstEvent?: string;
        /**
         * Webhooks only: Static headers to set on the webhook request
         */
        headers?: {
            [key: string]: string;
        };
        /**
         * Webhooks only: a set of options for HTTP
         */
        httpOptions?: {
            /**
             * The maximum amount of time that a connection is allowed to remain with no data transmitted.
             */
            connectionTimeout?: string;
            /**
             * See [ExpectContinueTimeout in the Go docs](https://pkg.go.dev/net/http#Transport)
             */
            expectContinueTimeout?: string;
            /**
             * The max duration to hold a HTTP keepalive connection between calls
             */
            idleTimeout?: string;
            /**
             * The max number of idle connections to hold pooled
             */
            maxIdleConns?: number;
            /**
             * HTTP proxy URL to use for outbound requests to the webhook
             */
            proxyURL?: string;
            /**
             * The max duration to hold a TLS handshake alive
             */
            requestTimeout?: string;
            /**
             * The max duration to hold a TLS handshake alive
             */
            tlsHandshakeTimeout?: string;
        };
        /**
         * Webhooks only: A set of options to extract data from the first JSON input data in the incoming message. Only applies if withData=true
         */
        input?: {
            /**
             * A top-level property of the first data input, to use for the request body. Default is the whole first body
             */
            body?: string;
            /**
             * A top-level property of the first data input, to use for headers
             */
            headers?: string;
            /**
             * A top-level property of the first data input, to use for a path to append with escaping to the webhook path
             */
            path?: string;
            /**
             * A top-level property of the first data input, to use for query parameters
             */
            query?: string;
            /**
             * A top-level property of the first data input, to use to dynamically set whether to pin the response (so the requester can choose)
             */
            replytx?: string;
        };
        /**
         * Webhooks only: Whether to assume the response body is JSON, regardless of the returned Content-Type
         */
        json?: boolean;
        /**
         * Webhooks only: HTTP method to invoke. Default=POST
         */
        method?: string;
        /**
         * Webhooks only: Static query params to set on the webhook request
         */
        query?: {
            [key: string]: string;
        };
        /**
         * The number of events to stream ahead to your application, while waiting for confirmation of consumption of those events. At least once delivery semantics are used in FireFly, so if your application crashes/reconnects this is the maximum number of events you would expect to be redelivered after it restarts
         */
        readAhead?: number;
        /**
         * Webhooks only: Whether to automatically send a reply event, using the body returned by the webhook
         */
        reply?: boolean;
        /**
         * Webhooks only: The tag to set on the reply message
         */
        replytag?: string;
        /**
         * Webhooks only: The transaction type to set on the reply message
         */
        replytx?: string;
        /**
         * Webhooks only: a set of options for retrying the webhook call
         */
        retry?: {
            /**
             * Number of times to retry the webhook call in case of failure
             */
            count?: number;
            /**
             * Enables retry on HTTP calls, defaults to false
             */
            enabled?: boolean;
            /**
             * Initial delay between retries when we retry the webhook call
             */
            initialDelay?: string;
            /**
             * Max delay between retries when we retry the webhookcall
             */
            maxDelay?: string;
        };
        /**
         * The name of an existing TLS configuration associated to the namespace to use
         */
        tlsConfigName?: string;
        /**
         * Webhooks only: HTTP url to invoke. Can be relative if a base URL is set in the webhook plugin config
         */
        url?: string;
        /**
         * Whether message events delivered over the subscription, should be packaged with the full data of those messages in-line as part of the event JSON payload. Or if the application should make separate REST calls to download that data. May not be supported on some transports.
         */
        withData?: boolean;
    };
    /**
     * The transport plugin responsible for event delivery (WebSockets, Webhooks, JMS, NATS etc.)
     */
    transport: string;
    /**
     * Last time the subscription was updated
     */
    updated: string;

    status?: { currentOffset: number };
}>;

export type GetSubscriptionsWithCountResponse = {
    count: number;
    items: GetSubscriptionsResponse;
    total: number;
};

export type PostSubscriptionsData = {
    requestBody?: {
        /**
         * Server-side filter to apply to events
         */
        filter?: {
            /**
             * Deprecated: Please use 'message.author' instead
             */
            author?: string;
            /**
             * Filters specific to blockchain events. If an event is not a blockchain event, these filters are ignored
             */
            blockchainevent?: {
                /**
                 * Regular expression to apply to the blockchain event 'listener' field, which is the UUID of the event listener. So you can restrict your subscription to certain blockchain listeners. Alternatively to avoid your application need to know listener UUIDs you can set the 'topic' field of blockchain event listeners, and use a topic filter on your subscriptions
                 */
                listener?: string;
                /**
                 * Regular expression to apply to the blockchain event 'name' field, which is the name of the event in the underlying blockchain smart contract
                 */
                name?: string;
            };
            /**
             * Regular expression to apply to the event type, to subscribe to a subset of event types
             */
            events?: string;
            /**
             * Deprecated: Please use 'message.group' instead
             */
            group?: string;
            /**
             * Filters specific to message events. If an event is not a message event, these filters are ignored
             */
            message?: {
                /**
                 * Regular expression to apply to the message 'header.author' field
                 */
                author?: string;
                /**
                 * Regular expression to apply to the message 'header.group' field
                 */
                group?: string;
                /**
                 * Regular expression to apply to the message 'header.tag' field
                 */
                tag?: string;
            };
            /**
             * Deprecated: Please use 'message.tag' instead
             */
            tag?: string;
            /**
             * Regular expression to apply to the topic of the event, to subscribe to a subset of topics. Note for messages sent with multiple topics, a separate event is emitted for each topic
             */
            topic?: string;
            /**
             * Deprecated: Please use 'topic' instead
             */
            topics?: string;
            /**
             * Filters specific to events with a transaction. If an event is not associated with a transaction, this filter is ignored
             */
            transaction?: {
                /**
                 * Regular expression to apply to the transaction 'type' field
                 */
                type?: string;
            };
        };
        /**
         * The name of the subscription. The application specifies this name when it connects, in order to attach to the subscription and receive events that arrived while it was disconnected. If multiple apps connect to the same subscription, events are workload balanced across the connected application instances
         */
        name?: string;
        /**
         * The namespace of the subscription. A subscription will only receive events generated in the namespace of the subscription
         */
        namespace?: string;
        /**
         * Subscription options
         */
        options?: {
            /**
             * Events are delivered in batches in an ordered array. The batch size is capped to the readAhead limit. The event payload is always an array even if there is a single event in the batch, allowing client-side optimizations when processing the events in a group. Available for both Webhooks and WebSockets.
             */
            batch?: boolean;
            /**
             * When batching is enabled, the optional timeout to send events even when the batch hasn't filled.
             */
            batchTimeout?: string;
            /**
             * Webhooks only: When true the event will be acknowledged before the webhook is invoked, allowing parallel invocations
             */
            fastack?: boolean;
            /**
             * Whether your application would like to receive events from the 'oldest' event emitted by your FireFly node (from the beginning of time), or the 'newest' event (from now), or a specific event sequence. Default is 'newest'
             */
            firstEvent?: string;
            /**
             * Webhooks only: Static headers to set on the webhook request
             */
            headers?: {
                [key: string]: string;
            };
            /**
             * Webhooks only: a set of options for HTTP
             */
            httpOptions?: {
                /**
                 * The maximum amount of time that a connection is allowed to remain with no data transmitted.
                 */
                connectionTimeout?: string;
                /**
                 * See [ExpectContinueTimeout in the Go docs](https://pkg.go.dev/net/http#Transport)
                 */
                expectContinueTimeout?: string;
                /**
                 * The max duration to hold a HTTP keepalive connection between calls
                 */
                idleTimeout?: string;
                /**
                 * The max number of idle connections to hold pooled
                 */
                maxIdleConns?: number;
                /**
                 * HTTP proxy URL to use for outbound requests to the webhook
                 */
                proxyURL?: string;
                /**
                 * The max duration to hold a TLS handshake alive
                 */
                requestTimeout?: string;
                /**
                 * The max duration to hold a TLS handshake alive
                 */
                tlsHandshakeTimeout?: string;
            };
            /**
             * Webhooks only: A set of options to extract data from the first JSON input data in the incoming message. Only applies if withData=true
             */
            input?: {
                /**
                 * A top-level property of the first data input, to use for the request body. Default is the whole first body
                 */
                body?: string;
                /**
                 * A top-level property of the first data input, to use for headers
                 */
                headers?: string;
                /**
                 * A top-level property of the first data input, to use for a path to append with escaping to the webhook path
                 */
                path?: string;
                /**
                 * A top-level property of the first data input, to use for query parameters
                 */
                query?: string;
                /**
                 * A top-level property of the first data input, to use to dynamically set whether to pin the response (so the requester can choose)
                 */
                replytx?: string;
            };
            /**
             * Webhooks only: Whether to assume the response body is JSON, regardless of the returned Content-Type
             */
            json?: boolean;
            /**
             * Webhooks only: HTTP method to invoke. Default=POST
             */
            method?: string;
            /**
             * Webhooks only: Static query params to set on the webhook request
             */
            query?: {
                [key: string]: string;
            };
            /**
             * The number of events to stream ahead to your application, while waiting for confirmation of consumption of those events. At least once delivery semantics are used in FireFly, so if your application crashes/reconnects this is the maximum number of events you would expect to be redelivered after it restarts
             */
            readAhead?: number;
            /**
             * Webhooks only: Whether to automatically send a reply event, using the body returned by the webhook
             */
            reply?: boolean;
            /**
             * Webhooks only: The tag to set on the reply message
             */
            replytag?: string;
            /**
             * Webhooks only: The transaction type to set on the reply message
             */
            replytx?: string;
            /**
             * Webhooks only: a set of options for retrying the webhook call
             */
            retry?: {
                /**
                 * Number of times to retry the webhook call in case of failure
                 */
                count?: number;
                /**
                 * Enables retry on HTTP calls, defaults to false
                 */
                enabled?: boolean;
                /**
                 * Initial delay between retries when we retry the webhook call
                 */
                initialDelay?: string;
                /**
                 * Max delay between retries when we retry the webhookcall
                 */
                maxDelay?: string;
            };
            /**
             * The name of an existing TLS configuration associated to the namespace to use
             */
            tlsConfigName?: string;
            /**
             * Webhooks only: HTTP url to invoke. Can be relative if a base URL is set in the webhook plugin config
             */
            url?: string;
            /**
             * Whether message events delivered over the subscription, should be packaged with the full data of those messages in-line as part of the event JSON payload. Or if the application should make separate REST calls to download that data. May not be supported on some transports.
             */
            withData?: boolean;
        };
        /**
         * The transport plugin responsible for event delivery (WebSockets, Webhooks, JMS, NATS etc.)
         */
        transport?: string;
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PostSubscriptionsResponse = {
    /**
     * Creation time of the subscription
     */
    created?: string;
    /**
     * Ephemeral subscriptions only exist as long as the application is connected, and as such will miss events that occur while the application is disconnected, and cannot be created administratively. You can create one over over a connected WebSocket connection
     */
    ephemeral?: boolean;
    /**
     * Server-side filter to apply to events
     */
    filter?: {
        /**
         * Deprecated: Please use 'message.author' instead
         */
        author?: string;
        /**
         * Filters specific to blockchain events. If an event is not a blockchain event, these filters are ignored
         */
        blockchainevent?: {
            /**
             * Regular expression to apply to the blockchain event 'listener' field, which is the UUID of the event listener. So you can restrict your subscription to certain blockchain listeners. Alternatively to avoid your application need to know listener UUIDs you can set the 'topic' field of blockchain event listeners, and use a topic filter on your subscriptions
             */
            listener?: string;
            /**
             * Regular expression to apply to the blockchain event 'name' field, which is the name of the event in the underlying blockchain smart contract
             */
            name?: string;
        };
        /**
         * Regular expression to apply to the event type, to subscribe to a subset of event types
         */
        events?: string;
        /**
         * Deprecated: Please use 'message.group' instead
         */
        group?: string;
        /**
         * Filters specific to message events. If an event is not a message event, these filters are ignored
         */
        message?: {
            /**
             * Regular expression to apply to the message 'header.author' field
             */
            author?: string;
            /**
             * Regular expression to apply to the message 'header.group' field
             */
            group?: string;
            /**
             * Regular expression to apply to the message 'header.tag' field
             */
            tag?: string;
        };
        /**
         * Deprecated: Please use 'message.tag' instead
         */
        tag?: string;
        /**
         * Regular expression to apply to the topic of the event, to subscribe to a subset of topics. Note for messages sent with multiple topics, a separate event is emitted for each topic
         */
        topic?: string;
        /**
         * Deprecated: Please use 'topic' instead
         */
        topics?: string;
        /**
         * Filters specific to events with a transaction. If an event is not associated with a transaction, this filter is ignored
         */
        transaction?: {
            /**
             * Regular expression to apply to the transaction 'type' field
             */
            type?: string;
        };
    };
    /**
     * The UUID of the subscription
     */
    id?: string;
    /**
     * The name of the subscription. The application specifies this name when it connects, in order to attach to the subscription and receive events that arrived while it was disconnected. If multiple apps connect to the same subscription, events are workload balanced across the connected application instances
     */
    name?: string;
    /**
     * The namespace of the subscription. A subscription will only receive events generated in the namespace of the subscription
     */
    namespace?: string;
    /**
     * Subscription options
     */
    options?: {
        /**
         * Events are delivered in batches in an ordered array. The batch size is capped to the readAhead limit. The event payload is always an array even if there is a single event in the batch, allowing client-side optimizations when processing the events in a group. Available for both Webhooks and WebSockets.
         */
        batch?: boolean;
        /**
         * When batching is enabled, the optional timeout to send events even when the batch hasn't filled.
         */
        batchTimeout?: string;
        /**
         * Webhooks only: When true the event will be acknowledged before the webhook is invoked, allowing parallel invocations
         */
        fastack?: boolean;
        /**
         * Whether your application would like to receive events from the 'oldest' event emitted by your FireFly node (from the beginning of time), or the 'newest' event (from now), or a specific event sequence. Default is 'newest'
         */
        firstEvent?: string;
        /**
         * Webhooks only: Static headers to set on the webhook request
         */
        headers?: {
            [key: string]: string;
        };
        /**
         * Webhooks only: a set of options for HTTP
         */
        httpOptions?: {
            /**
             * The maximum amount of time that a connection is allowed to remain with no data transmitted.
             */
            connectionTimeout?: string;
            /**
             * See [ExpectContinueTimeout in the Go docs](https://pkg.go.dev/net/http#Transport)
             */
            expectContinueTimeout?: string;
            /**
             * The max duration to hold a HTTP keepalive connection between calls
             */
            idleTimeout?: string;
            /**
             * The max number of idle connections to hold pooled
             */
            maxIdleConns?: number;
            /**
             * HTTP proxy URL to use for outbound requests to the webhook
             */
            proxyURL?: string;
            /**
             * The max duration to hold a TLS handshake alive
             */
            requestTimeout?: string;
            /**
             * The max duration to hold a TLS handshake alive
             */
            tlsHandshakeTimeout?: string;
        };
        /**
         * Webhooks only: A set of options to extract data from the first JSON input data in the incoming message. Only applies if withData=true
         */
        input?: {
            /**
             * A top-level property of the first data input, to use for the request body. Default is the whole first body
             */
            body?: string;
            /**
             * A top-level property of the first data input, to use for headers
             */
            headers?: string;
            /**
             * A top-level property of the first data input, to use for a path to append with escaping to the webhook path
             */
            path?: string;
            /**
             * A top-level property of the first data input, to use for query parameters
             */
            query?: string;
            /**
             * A top-level property of the first data input, to use to dynamically set whether to pin the response (so the requester can choose)
             */
            replytx?: string;
        };
        /**
         * Webhooks only: Whether to assume the response body is JSON, regardless of the returned Content-Type
         */
        json?: boolean;
        /**
         * Webhooks only: HTTP method to invoke. Default=POST
         */
        method?: string;
        /**
         * Webhooks only: Static query params to set on the webhook request
         */
        query?: {
            [key: string]: string;
        };
        /**
         * The number of events to stream ahead to your application, while waiting for confirmation of consumption of those events. At least once delivery semantics are used in FireFly, so if your application crashes/reconnects this is the maximum number of events you would expect to be redelivered after it restarts
         */
        readAhead?: number;
        /**
         * Webhooks only: Whether to automatically send a reply event, using the body returned by the webhook
         */
        reply?: boolean;
        /**
         * Webhooks only: The tag to set on the reply message
         */
        replytag?: string;
        /**
         * Webhooks only: The transaction type to set on the reply message
         */
        replytx?: string;
        /**
         * Webhooks only: a set of options for retrying the webhook call
         */
        retry?: {
            /**
             * Number of times to retry the webhook call in case of failure
             */
            count?: number;
            /**
             * Enables retry on HTTP calls, defaults to false
             */
            enabled?: boolean;
            /**
             * Initial delay between retries when we retry the webhook call
             */
            initialDelay?: string;
            /**
             * Max delay between retries when we retry the webhookcall
             */
            maxDelay?: string;
        };
        /**
         * The name of an existing TLS configuration associated to the namespace to use
         */
        tlsConfigName?: string;
        /**
         * Webhooks only: HTTP url to invoke. Can be relative if a base URL is set in the webhook plugin config
         */
        url?: string;
        /**
         * Whether message events delivered over the subscription, should be packaged with the full data of those messages in-line as part of the event JSON payload. Or if the application should make separate REST calls to download that data. May not be supported on some transports.
         */
        withData?: boolean;
    };
    /**
     * The transport plugin responsible for event delivery (WebSockets, Webhooks, JMS, NATS etc.)
     */
    transport?: string;
    /**
     * Last time the subscription was updated
     */
    updated?: string;
};

export type PutSubscriptionsData = {
    requestBody?: {
        /**
         * Server-side filter to apply to events
         */
        filter?: {
            /**
             * Deprecated: Please use 'message.author' instead
             */
            author?: string;
            /**
             * Filters specific to blockchain events. If an event is not a blockchain event, these filters are ignored
             */
            blockchainevent?: {
                /**
                 * Regular expression to apply to the blockchain event 'listener' field, which is the UUID of the event listener. So you can restrict your subscription to certain blockchain listeners. Alternatively to avoid your application need to know listener UUIDs you can set the 'topic' field of blockchain event listeners, and use a topic filter on your subscriptions
                 */
                listener?: string;
                /**
                 * Regular expression to apply to the blockchain event 'name' field, which is the name of the event in the underlying blockchain smart contract
                 */
                name?: string;
            };
            /**
             * Regular expression to apply to the event type, to subscribe to a subset of event types
             */
            events?: string;
            /**
             * Deprecated: Please use 'message.group' instead
             */
            group?: string;
            /**
             * Filters specific to message events. If an event is not a message event, these filters are ignored
             */
            message?: {
                /**
                 * Regular expression to apply to the message 'header.author' field
                 */
                author?: string;
                /**
                 * Regular expression to apply to the message 'header.group' field
                 */
                group?: string;
                /**
                 * Regular expression to apply to the message 'header.tag' field
                 */
                tag?: string;
            };
            /**
             * Deprecated: Please use 'message.tag' instead
             */
            tag?: string;
            /**
             * Regular expression to apply to the topic of the event, to subscribe to a subset of topics. Note for messages sent with multiple topics, a separate event is emitted for each topic
             */
            topic?: string;
            /**
             * Deprecated: Please use 'topic' instead
             */
            topics?: string;
            /**
             * Filters specific to events with a transaction. If an event is not associated with a transaction, this filter is ignored
             */
            transaction?: {
                /**
                 * Regular expression to apply to the transaction 'type' field
                 */
                type?: string;
            };
        };
        /**
         * The name of the subscription. The application specifies this name when it connects, in order to attach to the subscription and receive events that arrived while it was disconnected. If multiple apps connect to the same subscription, events are workload balanced across the connected application instances
         */
        name?: string;
        /**
         * The namespace of the subscription. A subscription will only receive events generated in the namespace of the subscription
         */
        namespace?: string;
        /**
         * Subscription options
         */
        options?: {
            /**
             * Events are delivered in batches in an ordered array. The batch size is capped to the readAhead limit. The event payload is always an array even if there is a single event in the batch, allowing client-side optimizations when processing the events in a group. Available for both Webhooks and WebSockets.
             */
            batch?: boolean;
            /**
             * When batching is enabled, the optional timeout to send events even when the batch hasn't filled.
             */
            batchTimeout?: string;
            /**
             * Webhooks only: When true the event will be acknowledged before the webhook is invoked, allowing parallel invocations
             */
            fastack?: boolean;
            /**
             * Whether your application would like to receive events from the 'oldest' event emitted by your FireFly node (from the beginning of time), or the 'newest' event (from now), or a specific event sequence. Default is 'newest'
             */
            firstEvent?: string;
            /**
             * Webhooks only: Static headers to set on the webhook request
             */
            headers?: {
                [key: string]: string;
            };
            /**
             * Webhooks only: a set of options for HTTP
             */
            httpOptions?: {
                /**
                 * The maximum amount of time that a connection is allowed to remain with no data transmitted.
                 */
                connectionTimeout?: string;
                /**
                 * See [ExpectContinueTimeout in the Go docs](https://pkg.go.dev/net/http#Transport)
                 */
                expectContinueTimeout?: string;
                /**
                 * The max duration to hold a HTTP keepalive connection between calls
                 */
                idleTimeout?: string;
                /**
                 * The max number of idle connections to hold pooled
                 */
                maxIdleConns?: number;
                /**
                 * HTTP proxy URL to use for outbound requests to the webhook
                 */
                proxyURL?: string;
                /**
                 * The max duration to hold a TLS handshake alive
                 */
                requestTimeout?: string;
                /**
                 * The max duration to hold a TLS handshake alive
                 */
                tlsHandshakeTimeout?: string;
            };
            /**
             * Webhooks only: A set of options to extract data from the first JSON input data in the incoming message. Only applies if withData=true
             */
            input?: {
                /**
                 * A top-level property of the first data input, to use for the request body. Default is the whole first body
                 */
                body?: string;
                /**
                 * A top-level property of the first data input, to use for headers
                 */
                headers?: string;
                /**
                 * A top-level property of the first data input, to use for a path to append with escaping to the webhook path
                 */
                path?: string;
                /**
                 * A top-level property of the first data input, to use for query parameters
                 */
                query?: string;
                /**
                 * A top-level property of the first data input, to use to dynamically set whether to pin the response (so the requester can choose)
                 */
                replytx?: string;
            };
            /**
             * Webhooks only: Whether to assume the response body is JSON, regardless of the returned Content-Type
             */
            json?: boolean;
            /**
             * Webhooks only: HTTP method to invoke. Default=POST
             */
            method?: string;
            /**
             * Webhooks only: Static query params to set on the webhook request
             */
            query?: {
                [key: string]: string;
            };
            /**
             * The number of events to stream ahead to your application, while waiting for confirmation of consumption of those events. At least once delivery semantics are used in FireFly, so if your application crashes/reconnects this is the maximum number of events you would expect to be redelivered after it restarts
             */
            readAhead?: number;
            /**
             * Webhooks only: Whether to automatically send a reply event, using the body returned by the webhook
             */
            reply?: boolean;
            /**
             * Webhooks only: The tag to set on the reply message
             */
            replytag?: string;
            /**
             * Webhooks only: The transaction type to set on the reply message
             */
            replytx?: string;
            /**
             * Webhooks only: a set of options for retrying the webhook call
             */
            retry?: {
                /**
                 * Number of times to retry the webhook call in case of failure
                 */
                count?: number;
                /**
                 * Enables retry on HTTP calls, defaults to false
                 */
                enabled?: boolean;
                /**
                 * Initial delay between retries when we retry the webhook call
                 */
                initialDelay?: string;
                /**
                 * Max delay between retries when we retry the webhookcall
                 */
                maxDelay?: string;
            };
            /**
             * The name of an existing TLS configuration associated to the namespace to use
             */
            tlsConfigName?: string;
            /**
             * Webhooks only: HTTP url to invoke. Can be relative if a base URL is set in the webhook plugin config
             */
            url?: string;
            /**
             * Whether message events delivered over the subscription, should be packaged with the full data of those messages in-line as part of the event JSON payload. Or if the application should make separate REST calls to download that data. May not be supported on some transports.
             */
            withData?: boolean;
        };
        /**
         * The transport plugin responsible for event delivery (WebSockets, Webhooks, JMS, NATS etc.)
         */
        transport?: string;
    };
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type PutSubscriptionsResponse = {
    /**
     * Creation time of the subscription
     */
    created?: string;
    /**
     * Ephemeral subscriptions only exist as long as the application is connected, and as such will miss events that occur while the application is disconnected, and cannot be created administratively. You can create one over over a connected WebSocket connection
     */
    ephemeral?: boolean;
    /**
     * Server-side filter to apply to events
     */
    filter?: {
        /**
         * Deprecated: Please use 'message.author' instead
         */
        author?: string;
        /**
         * Filters specific to blockchain events. If an event is not a blockchain event, these filters are ignored
         */
        blockchainevent?: {
            /**
             * Regular expression to apply to the blockchain event 'listener' field, which is the UUID of the event listener. So you can restrict your subscription to certain blockchain listeners. Alternatively to avoid your application need to know listener UUIDs you can set the 'topic' field of blockchain event listeners, and use a topic filter on your subscriptions
             */
            listener?: string;
            /**
             * Regular expression to apply to the blockchain event 'name' field, which is the name of the event in the underlying blockchain smart contract
             */
            name?: string;
        };
        /**
         * Regular expression to apply to the event type, to subscribe to a subset of event types
         */
        events?: string;
        /**
         * Deprecated: Please use 'message.group' instead
         */
        group?: string;
        /**
         * Filters specific to message events. If an event is not a message event, these filters are ignored
         */
        message?: {
            /**
             * Regular expression to apply to the message 'header.author' field
             */
            author?: string;
            /**
             * Regular expression to apply to the message 'header.group' field
             */
            group?: string;
            /**
             * Regular expression to apply to the message 'header.tag' field
             */
            tag?: string;
        };
        /**
         * Deprecated: Please use 'message.tag' instead
         */
        tag?: string;
        /**
         * Regular expression to apply to the topic of the event, to subscribe to a subset of topics. Note for messages sent with multiple topics, a separate event is emitted for each topic
         */
        topic?: string;
        /**
         * Deprecated: Please use 'topic' instead
         */
        topics?: string;
        /**
         * Filters specific to events with a transaction. If an event is not associated with a transaction, this filter is ignored
         */
        transaction?: {
            /**
             * Regular expression to apply to the transaction 'type' field
             */
            type?: string;
        };
    };
    /**
     * The UUID of the subscription
     */
    id?: string;
    /**
     * The name of the subscription. The application specifies this name when it connects, in order to attach to the subscription and receive events that arrived while it was disconnected. If multiple apps connect to the same subscription, events are workload balanced across the connected application instances
     */
    name?: string;
    /**
     * The namespace of the subscription. A subscription will only receive events generated in the namespace of the subscription
     */
    namespace?: string;
    /**
     * Subscription options
     */
    options?: {
        /**
         * Events are delivered in batches in an ordered array. The batch size is capped to the readAhead limit. The event payload is always an array even if there is a single event in the batch, allowing client-side optimizations when processing the events in a group. Available for both Webhooks and WebSockets.
         */
        batch?: boolean;
        /**
         * When batching is enabled, the optional timeout to send events even when the batch hasn't filled.
         */
        batchTimeout?: string;
        /**
         * Webhooks only: When true the event will be acknowledged before the webhook is invoked, allowing parallel invocations
         */
        fastack?: boolean;
        /**
         * Whether your application would like to receive events from the 'oldest' event emitted by your FireFly node (from the beginning of time), or the 'newest' event (from now), or a specific event sequence. Default is 'newest'
         */
        firstEvent?: string;
        /**
         * Webhooks only: Static headers to set on the webhook request
         */
        headers?: {
            [key: string]: string;
        };
        /**
         * Webhooks only: a set of options for HTTP
         */
        httpOptions?: {
            /**
             * The maximum amount of time that a connection is allowed to remain with no data transmitted.
             */
            connectionTimeout?: string;
            /**
             * See [ExpectContinueTimeout in the Go docs](https://pkg.go.dev/net/http#Transport)
             */
            expectContinueTimeout?: string;
            /**
             * The max duration to hold a HTTP keepalive connection between calls
             */
            idleTimeout?: string;
            /**
             * The max number of idle connections to hold pooled
             */
            maxIdleConns?: number;
            /**
             * HTTP proxy URL to use for outbound requests to the webhook
             */
            proxyURL?: string;
            /**
             * The max duration to hold a TLS handshake alive
             */
            requestTimeout?: string;
            /**
             * The max duration to hold a TLS handshake alive
             */
            tlsHandshakeTimeout?: string;
        };
        /**
         * Webhooks only: A set of options to extract data from the first JSON input data in the incoming message. Only applies if withData=true
         */
        input?: {
            /**
             * A top-level property of the first data input, to use for the request body. Default is the whole first body
             */
            body?: string;
            /**
             * A top-level property of the first data input, to use for headers
             */
            headers?: string;
            /**
             * A top-level property of the first data input, to use for a path to append with escaping to the webhook path
             */
            path?: string;
            /**
             * A top-level property of the first data input, to use for query parameters
             */
            query?: string;
            /**
             * A top-level property of the first data input, to use to dynamically set whether to pin the response (so the requester can choose)
             */
            replytx?: string;
        };
        /**
         * Webhooks only: Whether to assume the response body is JSON, regardless of the returned Content-Type
         */
        json?: boolean;
        /**
         * Webhooks only: HTTP method to invoke. Default=POST
         */
        method?: string;
        /**
         * Webhooks only: Static query params to set on the webhook request
         */
        query?: {
            [key: string]: string;
        };
        /**
         * The number of events to stream ahead to your application, while waiting for confirmation of consumption of those events. At least once delivery semantics are used in FireFly, so if your application crashes/reconnects this is the maximum number of events you would expect to be redelivered after it restarts
         */
        readAhead?: number;
        /**
         * Webhooks only: Whether to automatically send a reply event, using the body returned by the webhook
         */
        reply?: boolean;
        /**
         * Webhooks only: The tag to set on the reply message
         */
        replytag?: string;
        /**
         * Webhooks only: The transaction type to set on the reply message
         */
        replytx?: string;
        /**
         * Webhooks only: a set of options for retrying the webhook call
         */
        retry?: {
            /**
             * Number of times to retry the webhook call in case of failure
             */
            count?: number;
            /**
             * Enables retry on HTTP calls, defaults to false
             */
            enabled?: boolean;
            /**
             * Initial delay between retries when we retry the webhook call
             */
            initialDelay?: string;
            /**
             * Max delay between retries when we retry the webhookcall
             */
            maxDelay?: string;
        };
        /**
         * The name of an existing TLS configuration associated to the namespace to use
         */
        tlsConfigName?: string;
        /**
         * Webhooks only: HTTP url to invoke. Can be relative if a base URL is set in the webhook plugin config
         */
        url?: string;
        /**
         * Whether message events delivered over the subscription, should be packaged with the full data of those messages in-line as part of the event JSON payload. Or if the application should make separate REST calls to download that data. May not be supported on some transports.
         */
        withData?: boolean;
    };
    /**
     * The transport plugin responsible for event delivery (WebSockets, Webhooks, JMS, NATS etc.)
     */
    transport?: string;
    /**
     * Last time the subscription was updated
     */
    updated?: string;
};

export type DeleteSubscriptionsBySubidData = {
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * The subscription ID
     */
    subid: string;
};

export type DeleteSubscriptionsBySubidResponse = void;

export type GetSubscriptionsBySubidData = {
    /**
     * When set, the API will return additional status information if available
     */
    fetchstatus?: boolean;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * The subscription ID
     */
    subid: string;
};

export type GetSubscriptionsBySubidResponse = {
    error?: string;
    /**
     * Creation time of the subscription
     */
    created: string;
    /**
     * Ephemeral subscriptions only exist as long as the application is connected, and as such will miss events that occur while the application is disconnected, and cannot be created administratively. You can create one over over a connected WebSocket connection
     */
    ephemeral: boolean;
    /**
     * Server-side filter to apply to events
     */
    filter: {
        /**
         * Deprecated: Please use 'message.author' instead
         */
        author?: string;
        /**
         * Filters specific to blockchain events. If an event is not a blockchain event, these filters are ignored
         */
        blockchainevent?: {
            /**
             * Regular expression to apply to the blockchain event 'listener' field, which is the UUID of the event listener. So you can restrict your subscription to certain blockchain listeners. Alternatively to avoid your application need to know listener UUIDs you can set the 'topic' field of blockchain event listeners, and use a topic filter on your subscriptions
             */
            listener?: string;
            /**
             * Regular expression to apply to the blockchain event 'name' field, which is the name of the event in the underlying blockchain smart contract
             */
            name?: string;
        };
        /**
         * Regular expression to apply to the event type, to subscribe to a subset of event types
         */
        events?: string;
        /**
         * Deprecated: Please use 'message.group' instead
         */
        group?: string;
        /**
         * Filters specific to message events. If an event is not a message event, these filters are ignored
         */
        message?: {
            /**
             * Regular expression to apply to the message 'header.author' field
             */
            author?: string;
            /**
             * Regular expression to apply to the message 'header.group' field
             */
            group?: string;
            /**
             * Regular expression to apply to the message 'header.tag' field
             */
            tag?: string;
        };
        /**
         * Deprecated: Please use 'message.tag' instead
         */
        tag?: string;
        /**
         * Regular expression to apply to the topic of the event, to subscribe to a subset of topics. Note for messages sent with multiple topics, a separate event is emitted for each topic
         */
        topic?: string;
        /**
         * Deprecated: Please use 'topic' instead
         */
        topics?: string;
        /**
         * Filters specific to events with a transaction. If an event is not associated with a transaction, this filter is ignored
         */
        transaction?: {
            /**
             * Regular expression to apply to the transaction 'type' field
             */
            type?: string;
        };
    };
    /**
     * The UUID of the subscription
     */
    id: string;
    /**
     * The name of the subscription. The application specifies this name when it connects, in order to attach to the subscription and receive events that arrived while it was disconnected. If multiple apps connect to the same subscription, events are workload balanced across the connected application instances
     */
    name: string;
    /**
     * The namespace of the subscription. A subscription will only receive events generated in the namespace of the subscription
     */
    namespace: string;
    /**
     * Subscription options
     */
    options: {
        /**
         * Events are delivered in batches in an ordered array. The batch size is capped to the readAhead limit. The event payload is always an array even if there is a single event in the batch, allowing client-side optimizations when processing the events in a group. Available for both Webhooks and WebSockets.
         */
        batch?: boolean;
        /**
         * When batching is enabled, the optional timeout to send events even when the batch hasn't filled.
         */
        batchTimeout?: string;
        /**
         * Webhooks only: When true the event will be acknowledged before the webhook is invoked, allowing parallel invocations
         */
        fastack?: boolean;
        /**
         * Whether your application would like to receive events from the 'oldest' event emitted by your FireFly node (from the beginning of time), or the 'newest' event (from now), or a specific event sequence. Default is 'newest'
         */
        firstEvent?: string;
        /**
         * Webhooks only: Static headers to set on the webhook request
         */
        headers?: {
            [key: string]: string;
        };
        /**
         * Webhooks only: a set of options for HTTP
         */
        httpOptions?: {
            /**
             * The maximum amount of time that a connection is allowed to remain with no data transmitted.
             */
            connectionTimeout?: string;
            /**
             * See [ExpectContinueTimeout in the Go docs](https://pkg.go.dev/net/http#Transport)
             */
            expectContinueTimeout?: string;
            /**
             * The max duration to hold a HTTP keepalive connection between calls
             */
            idleTimeout?: string;
            /**
             * The max number of idle connections to hold pooled
             */
            maxIdleConns?: number;
            /**
             * HTTP proxy URL to use for outbound requests to the webhook
             */
            proxyURL?: string;
            /**
             * The max duration to hold a TLS handshake alive
             */
            requestTimeout?: string;
            /**
             * The max duration to hold a TLS handshake alive
             */
            tlsHandshakeTimeout?: string;
        };
        /**
         * Webhooks only: A set of options to extract data from the first JSON input data in the incoming message. Only applies if withData=true
         */
        input?: {
            /**
             * A top-level property of the first data input, to use for the request body. Default is the whole first body
             */
            body?: string;
            /**
             * A top-level property of the first data input, to use for headers
             */
            headers?: string;
            /**
             * A top-level property of the first data input, to use for a path to append with escaping to the webhook path
             */
            path?: string;
            /**
             * A top-level property of the first data input, to use for query parameters
             */
            query?: string;
            /**
             * A top-level property of the first data input, to use to dynamically set whether to pin the response (so the requester can choose)
             */
            replytx?: string;
        };
        /**
         * Webhooks only: Whether to assume the response body is JSON, regardless of the returned Content-Type
         */
        json?: boolean;
        /**
         * Webhooks only: HTTP method to invoke. Default=POST
         */
        method?: string;
        /**
         * Webhooks only: Static query params to set on the webhook request
         */
        query?: {
            [key: string]: string;
        };
        /**
         * The number of events to stream ahead to your application, while waiting for confirmation of consumption of those events. At least once delivery semantics are used in FireFly, so if your application crashes/reconnects this is the maximum number of events you would expect to be redelivered after it restarts
         */
        readAhead?: number;
        /**
         * Webhooks only: Whether to automatically send a reply event, using the body returned by the webhook
         */
        reply?: boolean;
        /**
         * Webhooks only: The tag to set on the reply message
         */
        replytag?: string;
        /**
         * Webhooks only: The transaction type to set on the reply message
         */
        replytx?: string;
        /**
         * Webhooks only: a set of options for retrying the webhook call
         */
        retry?: {
            /**
             * Number of times to retry the webhook call in case of failure
             */
            count?: number;
            /**
             * Enables retry on HTTP calls, defaults to false
             */
            enabled?: boolean;
            /**
             * Initial delay between retries when we retry the webhook call
             */
            initialDelay?: string;
            /**
             * Max delay between retries when we retry the webhookcall
             */
            maxDelay?: string;
        };
        /**
         * The name of an existing TLS configuration associated to the namespace to use
         */
        tlsConfigName?: string;
        /**
         * Webhooks only: HTTP url to invoke. Can be relative if a base URL is set in the webhook plugin config
         */
        url?: string;
        /**
         * Whether message events delivered over the subscription, should be packaged with the full data of those messages in-line as part of the event JSON payload. Or if the application should make separate REST calls to download that data. May not be supported on some transports.
         */
        withData?: boolean;
    };
    /**
     * The transport plugin responsible for event delivery (WebSockets, Webhooks, JMS, NATS etc.)
     */
    transport: string;
    /**
     * Last time the subscription was updated
     */
    updated: string;

    status?: { currentOffset: number };
};

export type GetSubscriptionsBySubidEventsData = {
    /**
     * Ascending sort order (overrides all fields in a multi-field sort)
     */
    ascending?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    correlator?: string;
    /**
     * Return a total count as well as items (adds extra database processing)
     */
    count?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    created?: string;
    /**
     * Descending sort order (overrides all fields in a multi-field sort)
     */
    descending?: string;
    /**
     * The sequence ID in the raw event stream to stop indexing through events at. Leave blank to start indexing from the most recent events
     */
    endsequence?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    id?: string;
    /**
     * The maximum number of records to return (max: 1,000)
     */
    limit?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    reference?: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    sequence?: string;
    /**
     * The number of records to skip (max: 1,000). Unsuitable for bulk operations
     */
    skip?: string;
    /**
     * Sort field. For multi-field sort use comma separated values (or multiple query values) with '-' prefix for descending
     */
    sort?: string;
    /**
     * The sequence ID in the raw event stream to start indexing through events from. Leave blank to start indexing from the most recent events
     */
    startsequence?: string;
    /**
     * The subscription ID
     */
    subid: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    topic?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    tx?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    type?: string;
};

export type GetSubscriptionsBySubidEventsResponse = Array<{
    /**
     * For message events, this is the 'header.cid' field from the referenced message. For certain other event types, a secondary object is referenced such as a token pool
     */
    correlator?: string;
    /**
     * The time the event was emitted. Not guaranteed to be unique, or to increase between events in the same order as the final sequence events are delivered to your application. As such, the 'sequence' field should be used instead of the 'created' field for querying events in the exact order they are delivered to applications
     */
    created?: string;
    /**
     * The UUID assigned to this event by your local FireFly node
     */
    id?: string;
    /**
     * The namespace of the event. Your application must subscribe to events within a namespace
     */
    namespace?: string;
    /**
     * The UUID of an resource that is the subject of this event. The event type determines what type of resource is referenced, and whether this field might be unset
     */
    reference?: string;
    /**
     * A sequence indicating the order in which events are delivered to your application. Assure to be unique per event in your local FireFly database (unlike the created timestamp)
     */
    sequence?: number;
    /**
     * A stream of information this event relates to. For message confirmation events, a separate event is emitted for each topic in the message. For blockchain events, the listener specifies the topic. Rules exist for how the topic is set for other event types
     */
    topic?: string;
    /**
     * The UUID of a transaction that is event is part of. Not all events are part of a transaction
     */
    tx?: string;
    /**
     * All interesting activity in FireFly is emitted as a FireFly event, of a given type. The 'type' combined with the 'reference' can be used to determine how to process the event within your application
     */
    type?:
        | 'transaction_submitted'
        | 'message_confirmed'
        | 'message_rejected'
        | 'datatype_confirmed'
        | 'identity_confirmed'
        | 'identity_updated'
        | 'token_pool_confirmed'
        | 'token_pool_op_failed'
        | 'token_transfer_confirmed'
        | 'token_transfer_op_failed'
        | 'token_approval_confirmed'
        | 'token_approval_op_failed'
        | 'contract_interface_confirmed'
        | 'contract_api_confirmed'
        | 'blockchain_event_received'
        | 'blockchain_invoke_op_succeeded'
        | 'blockchain_invoke_op_failed'
        | 'blockchain_contract_deploy_op_succeeded'
        | 'blockchain_contract_deploy_op_failed';
}>;

export type GetTransactionsData = {
    /**
     * Ascending sort order (overrides all fields in a multi-field sort)
     */
    ascending?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    blockchainids?: string;
    /**
     * Return a total count as well as items (adds extra database processing)
     */
    count?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    created?: string;
    /**
     * Descending sort order (overrides all fields in a multi-field sort)
     */
    descending?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    id?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    idempotencykey?: string;
    /**
     * The maximum number of records to return (max: 1,000)
     */
    limit?: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * The number of records to skip (max: 1,000). Unsuitable for bulk operations
     */
    skip?: string;
    /**
     * Sort field. For multi-field sort use comma separated values (or multiple query values) with '-' prefix for descending
     */
    sort?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    type?: string;
};

export type GetTransactionsResponse = Array<{
    /**
     * The blockchain transaction ID, in the format specific to the blockchain involved in the transaction. Not all FireFly transactions include a blockchain. FireFly transactions are extensible to support multiple blockchain transactions
     */
    blockchainIds?: Array<string>;
    /**
     * The time the transaction was created on this node. Note the transaction is individually created with the same UUID on each participant in the FireFly transaction
     */
    created?: string;
    /**
     * The UUID of the FireFly transaction
     */
    id?: string;
    /**
     * An optional unique identifier for a transaction. Cannot be duplicated within a namespace, thus allowing idempotent submission of transactions to the API
     */
    idempotencyKey?: string;
    /**
     * The namespace of the FireFly transaction
     */
    namespace?: string;
    /**
     * The type of the FireFly transaction
     */
    type?:
        | 'none'
        | 'unpinned'
        | 'batch_pin'
        | 'network_action'
        | 'token_pool'
        | 'token_transfer'
        | 'contract_deploy'
        | 'contract_invoke'
        | 'contract_invoke_pin'
        | 'token_approval'
        | 'data_publish'
        | 'user_operation_send';
}>;

export type GetTransactionsByTxnidData = {
    /**
     * Ascending sort order (overrides all fields in a multi-field sort)
     */
    ascending?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    blockchainids?: string;
    /**
     * Return a total count as well as items (adds extra database processing)
     */
    count?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    created?: string;
    /**
     * Descending sort order (overrides all fields in a multi-field sort)
     */
    descending?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    id?: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    idempotencykey?: string;
    /**
     * The maximum number of records to return (max: 1,000)
     */
    limit?: string;
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * The number of records to skip (max: 1,000). Unsuitable for bulk operations
     */
    skip?: string;
    /**
     * Sort field. For multi-field sort use comma separated values (or multiple query values) with '-' prefix for descending
     */
    sort?: string;
    /**
     * The transaction ID
     */
    txnid: string;
    /**
     * Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^
     */
    type?: string;
};

export type GetTransactionsByTxnidResponse = {
    /**
     * The blockchain transaction ID, in the format specific to the blockchain involved in the transaction. Not all FireFly transactions include a blockchain. FireFly transactions are extensible to support multiple blockchain transactions
     */
    blockchainIds?: Array<string>;
    /**
     * The time the transaction was created on this node. Note the transaction is individually created with the same UUID on each participant in the FireFly transaction
     */
    created?: string;
    /**
     * The UUID of the FireFly transaction
     */
    id?: string;
    /**
     * An optional unique identifier for a transaction. Cannot be duplicated within a namespace, thus allowing idempotent submission of transactions to the API
     */
    idempotencyKey?: string;
    /**
     * The namespace of the FireFly transaction
     */
    namespace?: string;
    /**
     * The type of the FireFly transaction
     */
    type?:
        | 'none'
        | 'unpinned'
        | 'batch_pin'
        | 'network_action'
        | 'token_pool'
        | 'token_transfer'
        | 'contract_deploy'
        | 'contract_invoke'
        | 'contract_invoke_pin'
        | 'token_approval'
        | 'data_publish'
        | 'user_operation_send';
};

export type GetTransactionsByTxnidBlockchaineventsData = {
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * The transaction ID
     */
    txnid: string;
};

export type GetTransactionsByTxnidBlockchaineventsResponse = Array<{
    /**
     * The UUID assigned to the event by FireFly
     */
    id?: string;
    /**
     * Detailed blockchain specific information about the event, as generated by the blockchain connector
     */
    info?: {
        [key: string]: unknown;
    };
    /**
     * The UUID of the listener that detected this event, or nil for built-in events in the system namespace
     */
    listener?: string;
    /**
     * The name of the event in the blockchain smart contract
     */
    name?: string;
    /**
     * The namespace of the listener that detected this blockchain event
     */
    namespace?: string;
    /**
     * The data output by the event, parsed to JSON according to the interface of the smart contract
     */
    output?: {
        [key: string]: unknown;
    };
    /**
     * An alphanumerically sortable string that represents this event uniquely on the blockchain (convention for plugins is zero-padded values BLOCKNUMBER/TXN_INDEX/EVENT_INDEX)
     */
    protocolId?: string;
    /**
     * The blockchain plugin or token service that detected the event
     */
    source?: string;
    /**
     * The time allocated to this event by the blockchain. This is the block timestamp for most blockchain connectors
     */
    timestamp?: string;
    /**
     * If this blockchain event is coorelated to FireFly transaction such as a FireFly submitted token transfer, this field is set to the UUID of the FireFly transaction
     */
    tx?: {
        /**
         * The blockchain transaction ID, in the format specific to the blockchain involved in the transaction. Not all FireFly transactions include a blockchain
         */
        blockchainId?: string;
        /**
         * The UUID of the FireFly transaction
         */
        id?: string;
        /**
         * The type of the FireFly transaction
         */
        type?: string;
    };
}>;

export type GetTransactionsByTxnidOperationsData = {
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * The transaction ID
     */
    txnid: string;
};

export type GetTransactionsByTxnidOperationsResponse = Array<{
    /**
     * The time the operation was created
     */
    created?: string;
    /**
     * Operation.data
     */
    data?: {
        [key: string]: unknown;
    };
    /**
     * Any error reported back from the plugin for this operation
     */
    error?: string;
    /**
     * The UUID of the operation
     */
    id?: string;
    /**
     * The input to this operation
     */
    input?: {
        [key: string]: unknown;
    };
    /**
     * The namespace of the operation
     */
    namespace?: string;
    /**
     * Any output reported back from the plugin for this operation
     */
    output?: {
        [key: string]: unknown;
    };
    /**
     * The plugin responsible for performing the operation
     */
    plugin?: string;
    /**
     * If this operation was initiated as a retry to a previous operation, this field points to the UUID of the operation being retried
     */
    retry?: string;
    /**
     * The current status of the operation
     */
    status?: string;
    /**
     * The UUID of the FireFly transaction the operation is part of
     */
    tx?: string;
    /**
     * The type of the operation
     */
    type?: 'blockchain_invoke' | 'user_operation_send';
    /**
     * The last update time of the operation
     */
    updated?: string;
}>;

export type GetTransactionsByTxnidStatusData = {
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
    /**
     * The transaction ID
     */
    txnid: string;
};

export type GetTransactionsByTxnidStatusResponse = {
    /**
     * A set of records describing the activities within the transaction known by the local FireFly node
     */
    details?: Array<{
        /**
         * If an error occurred related to the detail entry, it is included here
         */
        error?: string;
        /**
         * The UUID of the entry referenced by this detail. The type of this record can be inferred from the entry type
         */
        id?: string;
        /**
         * Output details for this entry
         */
        info?: {
            [key: string]: unknown;
        };
        /**
         * The status of the detail record. Cases where an event is required for completion, but has not arrived yet are marked with a 'pending' record
         */
        status?: string;
        /**
         * A sub-type, such as an operation type, or an event type
         */
        subtype?: string;
        /**
         * The time relevant to when the record was updated, such as the time an event was created, or the last update time of an operation
         */
        timestamp?: string;
        /**
         * The type of the transaction status detail record
         */
        type?: string;
    }>;
    /**
     * The overall computed status of the transaction, after analyzing the details during the API call
     */
    status?: string;
};

export type GetWebsocketsData = {
    /**
     * Server-side request timeout (milliseconds, or set a custom suffix like 10s)
     */
    requestTimeout?: string;
};

export type GetWebsocketsResponse = {
    /**
     * List of currently active websocket client connections
     */
    connections?: Array<{
        /**
         * The unique ID assigned to this client connection
         */
        id?: string;
        /**
         * The remote address of the connected client (if available)
         */
        remoteAddress?: string;
        /**
         * List of subscriptions currently started by this client
         */
        subscriptions?: Array<{
            /**
             * Indicates whether the subscription is ephemeral (vs durable)
             */
            ephemeral?: boolean;
            /**
             * The subscription filter specification
             */
            filter?: {
                /**
                 * Deprecated: Please use 'message.author' instead
                 */
                author?: string;
                /**
                 * Filters specific to blockchain events. If an event is not a blockchain event, these filters are ignored
                 */
                blockchainevent?: {
                    /**
                     * Regular expression to apply to the blockchain event 'listener' field, which is the UUID of the event listener. So you can restrict your subscription to certain blockchain listeners. Alternatively to avoid your application need to know listener UUIDs you can set the 'topic' field of blockchain event listeners, and use a topic filter on your subscriptions
                     */
                    listener?: string;
                    /**
                     * Regular expression to apply to the blockchain event 'name' field, which is the name of the event in the underlying blockchain smart contract
                     */
                    name?: string;
                };
                /**
                 * Regular expression to apply to the event type, to subscribe to a subset of event types
                 */
                events?: string;
                /**
                 * Deprecated: Please use 'message.group' instead
                 */
                group?: string;
                /**
                 * Filters specific to message events. If an event is not a message event, these filters are ignored
                 */
                message?: {
                    /**
                     * Regular expression to apply to the message 'header.author' field
                     */
                    author?: string;
                    /**
                     * Regular expression to apply to the message 'header.group' field
                     */
                    group?: string;
                    /**
                     * Regular expression to apply to the message 'header.tag' field
                     */
                    tag?: string;
                };
                /**
                 * Deprecated: Please use 'message.tag' instead
                 */
                tag?: string;
                /**
                 * Regular expression to apply to the topic of the event, to subscribe to a subset of topics. Note for messages sent with multiple topics, a separate event is emitted for each topic
                 */
                topic?: string;
                /**
                 * Deprecated: Please use 'topic' instead
                 */
                topics?: string;
                /**
                 * Filters specific to events with a transaction. If an event is not associated with a transaction, this filter is ignored
                 */
                transaction?: {
                    /**
                     * Regular expression to apply to the transaction 'type' field
                     */
                    type?: string;
                };
            };
            /**
             * The subscription name (for durable subscriptions only)
             */
            name?: string;
            /**
             * The subscription namespace
             */
            namespace?: string;
            /**
             * The time the subscription started (reset on dynamic namespace reload)
             */
            startTime?: string;
        }>;
        /**
         * The user agent of the connected client (if available)
         */
        userAgent?: string;
    }>;
    /**
     * Indicates whether the websockets plugin is enabled
     */
    enabled?: boolean;
};

export type $OpenApiTs = {
    '/admins': {
        get: {
            req: GetAdminsData;
            res: {
                /**
                 * Success
                 */
                200: Array<{
                    /**
                     * Admin.email
                     */
                    email?: string;
                    /**
                     * Admin.id
                     */
                    id?: string;
                    /**
                     * Admin.is_active
                     */
                    is_active?: boolean;
                    /**
                     * Admin.namespace
                     */
                    namespace?: string;
                    /**
                     * Admin.password
                     */
                    password?: string;
                    /**
                     * Admin.role
                     */
                    role?: string;
                }>;
                default: unknown;
            };
        };
        post: {
            req: PostAdminsData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * Admin.email
                     */
                    email?: string;
                    /**
                     * Admin.id
                     */
                    id?: string;
                    /**
                     * Admin.is_active
                     */
                    is_active?: boolean;
                    /**
                     * Admin.namespace
                     */
                    namespace?: string;
                    /**
                     * Admin.password
                     */
                    password?: string;
                    /**
                     * Admin.role
                     */
                    role?: string;
                };
                default: unknown;
            };
        };
    };
    '/admins/{id}': {
        delete: {
            req: DeleteAdminsByIdData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * The time the operation was created
                     */
                    created?: string;
                    /**
                     * Operation.data
                     */
                    data?: {
                        [key: string]: unknown;
                    };
                    /**
                     * Additional detailed information about an operation provided by the connector
                     */
                    detail?: unknown;
                    /**
                     * Any error reported back from the plugin for this operation
                     */
                    error?: string;
                    /**
                     * The UUID of the operation
                     */
                    id?: string;
                    /**
                     * The input to this operation
                     */
                    input?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The namespace of the operation
                     */
                    namespace?: string;
                    /**
                     * Any output reported back from the plugin for this operation
                     */
                    output?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The plugin responsible for performing the operation
                     */
                    plugin?: string;
                    /**
                     * If this operation was initiated as a retry to a previous operation, this field points to the UUID of the operation being retried
                     */
                    retry?: string;
                    /**
                     * The current status of the operation
                     */
                    status?: string;
                    /**
                     * The UUID of the FireFly transaction the operation is part of
                     */
                    tx?: string;
                    /**
                     * The type of the operation
                     */
                    type?: 'blockchain_invoke' | 'user_operation_send';
                    /**
                     * The last update time of the operation
                     */
                    updated?: string;
                };
                default: unknown;
            };
        };
        get: {
            req: GetAdminsByIdData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * Admin.email
                     */
                    email?: string;
                    /**
                     * Admin.id
                     */
                    id?: string;
                    /**
                     * Admin.is_active
                     */
                    is_active?: boolean;
                    /**
                     * Admin.namespace
                     */
                    namespace?: string;
                    /**
                     * Admin.password
                     */
                    password?: string;
                    /**
                     * Admin.role
                     */
                    role?: string;
                };
                default: unknown;
            };
        };
    };
    '/admins/login': {
        post: {
            req: PostAdminsLoginData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * Admin.token
                     */
                    token?: string;
                };
                default: unknown;
            };
        };
    };
    '/apis': {
        get: {
            req: GetApisData;
            res: {
                /**
                 * Success
                 */
                200: Array<{
                    /**
                     * The UUID of the contract API
                     */
                    id?: string;
                    /**
                     * Reference to the FireFly Interface definition associated with the contract API
                     */
                    interface?: {
                        /**
                         * The UUID of the FireFly interface
                         */
                        id?: string;
                        /**
                         * The name of the FireFly interface
                         */
                        name?: string;
                        /**
                         * The version of the FireFly interface
                         */
                        version?: string;
                    };
                    /**
                     * If this API is tied to an individual instance of a smart contract, this field can include a blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
                     */
                    location?: unknown;
                    /**
                     * The UUID of the broadcast message that was used to publish this API to the network
                     */
                    message?: string;
                    /**
                     * The name that is used in the URL to access the API
                     */
                    name?: string;
                    /**
                     * The namespace of the contract API
                     */
                    namespace?: string;
                    /**
                     * The published name of the API within the multiparty network
                     */
                    networkName?: string;
                    /**
                     * Indicates if the API is published to other members of the multiparty network
                     */
                    published?: boolean;
                    /**
                     * The URLs to use to access the API
                     */
                    urls?: {
                        /**
                         * The URL to use to invoke the API
                         */
                        api?: string;
                        /**
                         * The URL to download the OpenAPI v3 (Swagger) description for the API generated in JSON or YAML format
                         */
                        openapi?: string;
                        /**
                         * The URL to use in a web browser to access the SwaggerUI explorer/exerciser for the API
                         */
                        ui?: string;
                    };
                }>;
                default: unknown;
            };
        };
        post: {
            req: PostApisData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * The UUID of the contract API
                     */
                    id?: string;
                    /**
                     * Reference to the FireFly Interface definition associated with the contract API
                     */
                    interface?: {
                        /**
                         * The UUID of the FireFly interface
                         */
                        id?: string;
                        /**
                         * The name of the FireFly interface
                         */
                        name?: string;
                        /**
                         * The version of the FireFly interface
                         */
                        version?: string;
                    };
                    /**
                     * If this API is tied to an individual instance of a smart contract, this field can include a blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
                     */
                    location?: unknown;
                    /**
                     * The UUID of the broadcast message that was used to publish this API to the network
                     */
                    message?: string;
                    /**
                     * The name that is used in the URL to access the API
                     */
                    name?: string;
                    /**
                     * The namespace of the contract API
                     */
                    namespace?: string;
                    /**
                     * The published name of the API within the multiparty network
                     */
                    networkName?: string;
                    /**
                     * Indicates if the API is published to other members of the multiparty network
                     */
                    published?: boolean;
                    /**
                     * The URLs to use to access the API
                     */
                    urls?: {
                        /**
                         * The URL to use to invoke the API
                         */
                        api?: string;
                        /**
                         * The URL to download the OpenAPI v3 (Swagger) description for the API generated in JSON or YAML format
                         */
                        openapi?: string;
                        /**
                         * The URL to use in a web browser to access the SwaggerUI explorer/exerciser for the API
                         */
                        ui?: string;
                    };
                };
                /**
                 * Success
                 */
                202: {
                    /**
                     * The UUID of the contract API
                     */
                    id?: string;
                    /**
                     * Reference to the FireFly Interface definition associated with the contract API
                     */
                    interface?: {
                        /**
                         * The UUID of the FireFly interface
                         */
                        id?: string;
                        /**
                         * The name of the FireFly interface
                         */
                        name?: string;
                        /**
                         * The version of the FireFly interface
                         */
                        version?: string;
                    };
                    /**
                     * If this API is tied to an individual instance of a smart contract, this field can include a blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
                     */
                    location?: unknown;
                    /**
                     * The UUID of the broadcast message that was used to publish this API to the network
                     */
                    message?: string;
                    /**
                     * The name that is used in the URL to access the API
                     */
                    name?: string;
                    /**
                     * The namespace of the contract API
                     */
                    namespace?: string;
                    /**
                     * The published name of the API within the multiparty network
                     */
                    networkName?: string;
                    /**
                     * Indicates if the API is published to other members of the multiparty network
                     */
                    published?: boolean;
                    /**
                     * The URLs to use to access the API
                     */
                    urls?: {
                        /**
                         * The URL to use to invoke the API
                         */
                        api?: string;
                        /**
                         * The URL to download the OpenAPI v3 (Swagger) description for the API generated in JSON or YAML format
                         */
                        openapi?: string;
                        /**
                         * The URL to use in a web browser to access the SwaggerUI explorer/exerciser for the API
                         */
                        ui?: string;
                    };
                };
                default: unknown;
            };
        };
    };
    '/apis/{apiName}': {
        delete: {
            req: DeleteApisByApiNameData;
            res: {
                /**
                 * Success
                 */
                204: void;
                default: unknown;
            };
        };
        get: {
            req: GetApisByApiNameData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * The UUID of the contract API
                     */
                    id?: string;
                    /**
                     * Reference to the FireFly Interface definition associated with the contract API
                     */
                    interface?: {
                        /**
                         * The UUID of the FireFly interface
                         */
                        id?: string;
                        /**
                         * The name of the FireFly interface
                         */
                        name?: string;
                        /**
                         * The version of the FireFly interface
                         */
                        version?: string;
                    };
                    /**
                     * If this API is tied to an individual instance of a smart contract, this field can include a blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
                     */
                    location?: unknown;
                    /**
                     * The UUID of the broadcast message that was used to publish this API to the network
                     */
                    message?: string;
                    /**
                     * The name that is used in the URL to access the API
                     */
                    name?: string;
                    /**
                     * The namespace of the contract API
                     */
                    namespace?: string;
                    /**
                     * The published name of the API within the multiparty network
                     */
                    networkName?: string;
                    /**
                     * Indicates if the API is published to other members of the multiparty network
                     */
                    published?: boolean;
                    /**
                     * The URLs to use to access the API
                     */
                    urls?: {
                        /**
                         * The URL to use to invoke the API
                         */
                        api?: string;
                        /**
                         * The URL to download the OpenAPI v3 (Swagger) description for the API generated in JSON or YAML format
                         */
                        openapi?: string;
                        /**
                         * The URL to use in a web browser to access the SwaggerUI explorer/exerciser for the API
                         */
                        ui?: string;
                    };
                };
                default: unknown;
            };
        };
        put: {
            req: PutApisByApiNameData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * The UUID of the contract API
                     */
                    id?: string;
                    /**
                     * Reference to the FireFly Interface definition associated with the contract API
                     */
                    interface?: {
                        /**
                         * The UUID of the FireFly interface
                         */
                        id?: string;
                        /**
                         * The name of the FireFly interface
                         */
                        name?: string;
                        /**
                         * The version of the FireFly interface
                         */
                        version?: string;
                    };
                    /**
                     * If this API is tied to an individual instance of a smart contract, this field can include a blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
                     */
                    location?: unknown;
                    /**
                     * The UUID of the broadcast message that was used to publish this API to the network
                     */
                    message?: string;
                    /**
                     * The name that is used in the URL to access the API
                     */
                    name?: string;
                    /**
                     * The namespace of the contract API
                     */
                    namespace?: string;
                    /**
                     * The published name of the API within the multiparty network
                     */
                    networkName?: string;
                    /**
                     * Indicates if the API is published to other members of the multiparty network
                     */
                    published?: boolean;
                    /**
                     * The URLs to use to access the API
                     */
                    urls?: {
                        /**
                         * The URL to use to invoke the API
                         */
                        api?: string;
                        /**
                         * The URL to download the OpenAPI v3 (Swagger) description for the API generated in JSON or YAML format
                         */
                        openapi?: string;
                        /**
                         * The URL to use in a web browser to access the SwaggerUI explorer/exerciser for the API
                         */
                        ui?: string;
                    };
                };
                /**
                 * Success
                 */
                202: {
                    /**
                     * The UUID of the contract API
                     */
                    id?: string;
                    /**
                     * Reference to the FireFly Interface definition associated with the contract API
                     */
                    interface?: {
                        /**
                         * The UUID of the FireFly interface
                         */
                        id?: string;
                        /**
                         * The name of the FireFly interface
                         */
                        name?: string;
                        /**
                         * The version of the FireFly interface
                         */
                        version?: string;
                    };
                    /**
                     * If this API is tied to an individual instance of a smart contract, this field can include a blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
                     */
                    location?: unknown;
                    /**
                     * The UUID of the broadcast message that was used to publish this API to the network
                     */
                    message?: string;
                    /**
                     * The name that is used in the URL to access the API
                     */
                    name?: string;
                    /**
                     * The namespace of the contract API
                     */
                    namespace?: string;
                    /**
                     * The published name of the API within the multiparty network
                     */
                    networkName?: string;
                    /**
                     * Indicates if the API is published to other members of the multiparty network
                     */
                    published?: boolean;
                    /**
                     * The URLs to use to access the API
                     */
                    urls?: {
                        /**
                         * The URL to use to invoke the API
                         */
                        api?: string;
                        /**
                         * The URL to download the OpenAPI v3 (Swagger) description for the API generated in JSON or YAML format
                         */
                        openapi?: string;
                        /**
                         * The URL to use in a web browser to access the SwaggerUI explorer/exerciser for the API
                         */
                        ui?: string;
                    };
                };
                default: unknown;
            };
        };
    };
    '/apis/{apiName}/interface': {
        get: {
            req: GetApisByApiNameInterfaceData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * A description of the smart contract this FFI represents
                     */
                    description?: string;
                    /**
                     * An array of smart contract error definitions
                     */
                    errors?: Array<{
                        /**
                         * A description of the smart contract error
                         */
                        description?: string;
                        /**
                         * The UUID of the FFI error definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this error is part of
                         */
                        interface?: string;
                        /**
                         * The name of the error
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of error parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this error within the FFI for use on URL paths
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the error, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * An array of smart contract event definitions
                     */
                    events?: Array<{
                        /**
                         * A description of the smart contract event
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI event definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this event is part of
                         */
                        interface?: string;
                        /**
                         * The name of the event
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of event parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this event within the FFI for use on URL paths. Supports contracts that have multiple event overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the event, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * The UUID of the FireFly interface (FFI) smart contract definition
                     */
                    id?: string;
                    /**
                     * The UUID of the broadcast message that was used to publish this FFI to the network
                     */
                    message?: string;
                    /**
                     * An array of smart contract method definitions
                     */
                    methods?: Array<{
                        /**
                         * A description of the smart contract method
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI method definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this method is part of
                         */
                        interface?: string;
                        /**
                         * The name of the method
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of method parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this method within the FFI for use on URL paths. Supports contracts that have multiple method overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * An array of method return definitions
                         */
                        returns?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                    }>;
                    /**
                     * The name of the FFI - usually matching the smart contract name
                     */
                    name?: string;
                    /**
                     * The namespace of the FFI
                     */
                    namespace?: string;
                    /**
                     * The published name of the FFI within the multiparty network
                     */
                    networkName?: string;
                    /**
                     * Indicates if the FFI is published to other members of the multiparty network
                     */
                    published?: boolean;
                    /**
                     * A version for the FFI - use of semantic versioning such as 'v1.0.1' is encouraged
                     */
                    version?: string;
                };
                default: unknown;
            };
        };
    };
    '/apis/{apiName}/invoke/{methodPath}': {
        post: {
            req: PostApisByApiNameInvokeByMethodPathData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * The time the operation was created
                     */
                    created?: string;
                    /**
                     * Operation.data
                     */
                    data?: {
                        [key: string]: unknown;
                    };
                    /**
                     * Any error reported back from the plugin for this operation
                     */
                    error?: string;
                    /**
                     * The UUID of the operation
                     */
                    id?: string;
                    /**
                     * The input to this operation
                     */
                    input?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The namespace of the operation
                     */
                    namespace?: string;
                    /**
                     * Any output reported back from the plugin for this operation
                     */
                    output?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The plugin responsible for performing the operation
                     */
                    plugin?: string;
                    /**
                     * If this operation was initiated as a retry to a previous operation, this field points to the UUID of the operation being retried
                     */
                    retry?: string;
                    /**
                     * The current status of the operation
                     */
                    status?: string;
                    /**
                     * The UUID of the FireFly transaction the operation is part of
                     */
                    tx?: string;
                    /**
                     * The type of the operation
                     */
                    type?: 'blockchain_invoke' | 'user_operation_send';
                    /**
                     * The last update time of the operation
                     */
                    updated?: string;
                };
                /**
                 * Success
                 */
                202: {
                    /**
                     * The time the operation was created
                     */
                    created?: string;
                    /**
                     * Operation.data
                     */
                    data?: {
                        [key: string]: unknown;
                    };
                    /**
                     * Any error reported back from the plugin for this operation
                     */
                    error?: string;
                    /**
                     * The UUID of the operation
                     */
                    id?: string;
                    /**
                     * The input to this operation
                     */
                    input?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The namespace of the operation
                     */
                    namespace?: string;
                    /**
                     * Any output reported back from the plugin for this operation
                     */
                    output?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The plugin responsible for performing the operation
                     */
                    plugin?: string;
                    /**
                     * If this operation was initiated as a retry to a previous operation, this field points to the UUID of the operation being retried
                     */
                    retry?: string;
                    /**
                     * The current status of the operation
                     */
                    status?: string;
                    /**
                     * The UUID of the FireFly transaction the operation is part of
                     */
                    tx?: string;
                    /**
                     * The type of the operation
                     */
                    type?: 'blockchain_invoke' | 'user_operation_send';
                    /**
                     * The last update time of the operation
                     */
                    updated?: string;
                };
                default: unknown;
            };
        };
    };
    '/apis/{apiName}/listeners/{eventPath}': {
        get: {
            req: GetApisByApiNameListenersByEventPathData;
            res: {
                /**
                 * Success
                 */
                200: Array<{
                    /**
                     * An ID assigned by the blockchain connector to this listener
                     */
                    backendId?: string;
                    /**
                     * The creation time of the listener
                     */
                    created?: string;
                    /**
                     * Deprecated: Please use 'event' in the array of 'filters' instead
                     */
                    event?: {
                        /**
                         * A description of the smart contract event
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The name of the event
                         */
                        name?: string;
                        /**
                         * An array of event parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                    };
                    /**
                     * A list of filters for the contract listener. Each filter is made up of an Event and an optional Location. Events matching these filters will always be emitted in the order determined by the blockchain.
                     */
                    filters?: Array<{
                        /**
                         * The definition of the event, either provided in-line when creating the listener, or extracted from the referenced FFI
                         */
                        event?: {
                            /**
                             * A description of the smart contract event
                             */
                            description?: string;
                            /**
                             * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                             */
                            details?: {
                                [key: string]: unknown;
                            };
                            /**
                             * The name of the event
                             */
                            name?: string;
                            /**
                             * An array of event parameter/argument definitions
                             */
                            params?: Array<{
                                /**
                                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                                 */
                                name?: string;
                                /**
                                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                                 */
                                schema?: unknown;
                            }>;
                        };
                        /**
                         * A reference to an existing FFI, containing pre-registered type information for the event
                         */
                        interface?: {
                            /**
                             * The UUID of the FireFly interface
                             */
                            id?: string;
                            /**
                             * The name of the FireFly interface
                             */
                            name?: string;
                            /**
                             * The version of the FireFly interface
                             */
                            version?: string;
                        };
                        /**
                         * A blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
                         */
                        location?: unknown;
                        /**
                         * The stringified signature of the event and location, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * The UUID of the smart contract listener
                     */
                    id?: string;
                    /**
                     * Deprecated: Please use 'interface' in the array of 'filters' instead
                     */
                    interface?: {
                        /**
                         * The UUID of the FireFly interface
                         */
                        id?: string;
                        /**
                         * The name of the FireFly interface
                         */
                        name?: string;
                        /**
                         * The version of the FireFly interface
                         */
                        version?: string;
                    };
                    /**
                     * Deprecated: Please use 'location' in the array of 'filters' instead
                     */
                    location?: unknown;
                    /**
                     * A descriptive name for the listener
                     */
                    name?: string;
                    /**
                     * The namespace of the listener, which defines the namespace of all blockchain events detected by this listener
                     */
                    namespace?: string;
                    /**
                     * Options that control how the listener subscribes to events from the underlying blockchain
                     */
                    options?: {
                        /**
                         * A blockchain specific string, such as a block number, to start listening from. The special strings 'oldest' and 'newest' are supported by all blockchain connectors. Default is 'newest'
                         */
                        firstEvent?: string;
                    };
                    /**
                     * A concatenation of all the stringified signature of the event and location, as computed by the blockchain plugin
                     */
                    signature?: string;
                    /**
                     * A topic to set on the FireFly event that is emitted each time a blockchain event is detected from the blockchain. Setting this topic on a number of listeners allows applications to easily subscribe to all events they need
                     */
                    topic?: string;
                }>;
                default: unknown;
            };
        };
        post: {
            req: PostApisByApiNameListenersByEventPathData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * An ID assigned by the blockchain connector to this listener
                     */
                    backendId?: string;
                    /**
                     * The creation time of the listener
                     */
                    created?: string;
                    /**
                     * Deprecated: Please use 'event' in the array of 'filters' instead
                     */
                    event?: {
                        /**
                         * A description of the smart contract event
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The name of the event
                         */
                        name?: string;
                        /**
                         * An array of event parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                    };
                    /**
                     * A list of filters for the contract listener. Each filter is made up of an Event and an optional Location. Events matching these filters will always be emitted in the order determined by the blockchain.
                     */
                    filters?: Array<{
                        /**
                         * The definition of the event, either provided in-line when creating the listener, or extracted from the referenced FFI
                         */
                        event?: {
                            /**
                             * A description of the smart contract event
                             */
                            description?: string;
                            /**
                             * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                             */
                            details?: {
                                [key: string]: unknown;
                            };
                            /**
                             * The name of the event
                             */
                            name?: string;
                            /**
                             * An array of event parameter/argument definitions
                             */
                            params?: Array<{
                                /**
                                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                                 */
                                name?: string;
                                /**
                                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                                 */
                                schema?: unknown;
                            }>;
                        };
                        /**
                         * A reference to an existing FFI, containing pre-registered type information for the event
                         */
                        interface?: {
                            /**
                             * The UUID of the FireFly interface
                             */
                            id?: string;
                            /**
                             * The name of the FireFly interface
                             */
                            name?: string;
                            /**
                             * The version of the FireFly interface
                             */
                            version?: string;
                        };
                        /**
                         * A blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
                         */
                        location?: unknown;
                        /**
                         * The stringified signature of the event and location, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * The UUID of the smart contract listener
                     */
                    id?: string;
                    /**
                     * Deprecated: Please use 'interface' in the array of 'filters' instead
                     */
                    interface?: {
                        /**
                         * The UUID of the FireFly interface
                         */
                        id?: string;
                        /**
                         * The name of the FireFly interface
                         */
                        name?: string;
                        /**
                         * The version of the FireFly interface
                         */
                        version?: string;
                    };
                    /**
                     * Deprecated: Please use 'location' in the array of 'filters' instead
                     */
                    location?: unknown;
                    /**
                     * A descriptive name for the listener
                     */
                    name?: string;
                    /**
                     * The namespace of the listener, which defines the namespace of all blockchain events detected by this listener
                     */
                    namespace?: string;
                    /**
                     * Options that control how the listener subscribes to events from the underlying blockchain
                     */
                    options?: {
                        /**
                         * A blockchain specific string, such as a block number, to start listening from. The special strings 'oldest' and 'newest' are supported by all blockchain connectors. Default is 'newest'
                         */
                        firstEvent?: string;
                    };
                    /**
                     * A concatenation of all the stringified signature of the event and location, as computed by the blockchain plugin
                     */
                    signature?: string;
                    /**
                     * A topic to set on the FireFly event that is emitted each time a blockchain event is detected from the blockchain. Setting this topic on a number of listeners allows applications to easily subscribe to all events they need
                     */
                    topic?: string;
                };
                default: unknown;
            };
        };
    };
    '/apis/{apiName}/publish': {
        post: {
            req: PostApisByApiNamePublishData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * A description of the smart contract this FFI represents
                     */
                    description?: string;
                    /**
                     * An array of smart contract error definitions
                     */
                    errors?: Array<{
                        /**
                         * A description of the smart contract error
                         */
                        description?: string;
                        /**
                         * The UUID of the FFI error definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this error is part of
                         */
                        interface?: string;
                        /**
                         * The name of the error
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of error parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this error within the FFI for use on URL paths
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the error, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * An array of smart contract event definitions
                     */
                    events?: Array<{
                        /**
                         * A description of the smart contract event
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI event definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this event is part of
                         */
                        interface?: string;
                        /**
                         * The name of the event
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of event parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this event within the FFI for use on URL paths. Supports contracts that have multiple event overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the event, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * The UUID of the FireFly interface (FFI) smart contract definition
                     */
                    id?: string;
                    /**
                     * The UUID of the broadcast message that was used to publish this FFI to the network
                     */
                    message?: string;
                    /**
                     * An array of smart contract method definitions
                     */
                    methods?: Array<{
                        /**
                         * A description of the smart contract method
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI method definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this method is part of
                         */
                        interface?: string;
                        /**
                         * The name of the method
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of method parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this method within the FFI for use on URL paths. Supports contracts that have multiple method overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * An array of method return definitions
                         */
                        returns?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                    }>;
                    /**
                     * The name of the FFI - usually matching the smart contract name
                     */
                    name?: string;
                    /**
                     * The namespace of the FFI
                     */
                    namespace?: string;
                    /**
                     * The published name of the FFI within the multiparty network
                     */
                    networkName?: string;
                    /**
                     * Indicates if the FFI is published to other members of the multiparty network
                     */
                    published?: boolean;
                    /**
                     * A version for the FFI - use of semantic versioning such as 'v1.0.1' is encouraged
                     */
                    version?: string;
                };
                /**
                 * Success
                 */
                202: {
                    /**
                     * A description of the smart contract this FFI represents
                     */
                    description?: string;
                    /**
                     * An array of smart contract error definitions
                     */
                    errors?: Array<{
                        /**
                         * A description of the smart contract error
                         */
                        description?: string;
                        /**
                         * The UUID of the FFI error definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this error is part of
                         */
                        interface?: string;
                        /**
                         * The name of the error
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of error parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this error within the FFI for use on URL paths
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the error, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * An array of smart contract event definitions
                     */
                    events?: Array<{
                        /**
                         * A description of the smart contract event
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI event definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this event is part of
                         */
                        interface?: string;
                        /**
                         * The name of the event
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of event parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this event within the FFI for use on URL paths. Supports contracts that have multiple event overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the event, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * The UUID of the FireFly interface (FFI) smart contract definition
                     */
                    id?: string;
                    /**
                     * The UUID of the broadcast message that was used to publish this FFI to the network
                     */
                    message?: string;
                    /**
                     * An array of smart contract method definitions
                     */
                    methods?: Array<{
                        /**
                         * A description of the smart contract method
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI method definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this method is part of
                         */
                        interface?: string;
                        /**
                         * The name of the method
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of method parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this method within the FFI for use on URL paths. Supports contracts that have multiple method overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * An array of method return definitions
                         */
                        returns?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                    }>;
                    /**
                     * The name of the FFI - usually matching the smart contract name
                     */
                    name?: string;
                    /**
                     * The namespace of the FFI
                     */
                    namespace?: string;
                    /**
                     * The published name of the FFI within the multiparty network
                     */
                    networkName?: string;
                    /**
                     * Indicates if the FFI is published to other members of the multiparty network
                     */
                    published?: boolean;
                    /**
                     * A version for the FFI - use of semantic versioning such as 'v1.0.1' is encouraged
                     */
                    version?: string;
                };
                default: unknown;
            };
        };
    };
    '/apis/{apiName}/query/{methodPath}': {
        post: {
            req: PostApisByApiNameQueryByMethodPathData;
            res: {
                /**
                 * Success
                 */
                200: {
                    [key: string]: unknown;
                };
                default: unknown;
            };
        };
    };
    '/blockchainevents': {
        get: {
            req: GetBlockchaineventsData;
            res: {
                /**
                 * Success
                 */
                200: Array<{
                    /**
                     * The UUID assigned to the event by FireFly
                     */
                    id?: string;
                    /**
                     * Detailed blockchain specific information about the event, as generated by the blockchain connector
                     */
                    info?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The UUID of the listener that detected this event, or nil for built-in events in the system namespace
                     */
                    listener?: string;
                    /**
                     * The name of the event in the blockchain smart contract
                     */
                    name?: string;
                    /**
                     * The namespace of the listener that detected this blockchain event
                     */
                    namespace?: string;
                    /**
                     * The data output by the event, parsed to JSON according to the interface of the smart contract
                     */
                    output?: {
                        [key: string]: unknown;
                    };
                    /**
                     * An alphanumerically sortable string that represents this event uniquely on the blockchain (convention for plugins is zero-padded values BLOCKNUMBER/TXN_INDEX/EVENT_INDEX)
                     */
                    protocolId?: string;
                    /**
                     * The blockchain plugin or token service that detected the event
                     */
                    source?: string;
                    /**
                     * The time allocated to this event by the blockchain. This is the block timestamp for most blockchain connectors
                     */
                    timestamp?: string;
                    /**
                     * If this blockchain event is coorelated to FireFly transaction such as a FireFly submitted token transfer, this field is set to the UUID of the FireFly transaction
                     */
                    tx?: {
                        /**
                         * The blockchain transaction ID, in the format specific to the blockchain involved in the transaction. Not all FireFly transactions include a blockchain
                         */
                        blockchainId?: string;
                        /**
                         * The UUID of the FireFly transaction
                         */
                        id?: string;
                        /**
                         * The type of the FireFly transaction
                         */
                        type?: string;
                    };
                }>;
                default: unknown;
            };
        };
    };
    '/blockchainevents/{id}': {
        get: {
            req: GetBlockchaineventsByIdData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * The UUID assigned to the event by FireFly
                     */
                    id?: string;
                    /**
                     * Detailed blockchain specific information about the event, as generated by the blockchain connector
                     */
                    info?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The UUID of the listener that detected this event, or nil for built-in events in the system namespace
                     */
                    listener?: string;
                    /**
                     * The name of the event in the blockchain smart contract
                     */
                    name?: string;
                    /**
                     * The namespace of the listener that detected this blockchain event
                     */
                    namespace?: string;
                    /**
                     * The data output by the event, parsed to JSON according to the interface of the smart contract
                     */
                    output?: {
                        [key: string]: unknown;
                    };
                    /**
                     * An alphanumerically sortable string that represents this event uniquely on the blockchain (convention for plugins is zero-padded values BLOCKNUMBER/TXN_INDEX/EVENT_INDEX)
                     */
                    protocolId?: string;
                    /**
                     * The blockchain plugin or token service that detected the event
                     */
                    source?: string;
                    /**
                     * The time allocated to this event by the blockchain. This is the block timestamp for most blockchain connectors
                     */
                    timestamp?: string;
                    /**
                     * If this blockchain event is coorelated to FireFly transaction such as a FireFly submitted token transfer, this field is set to the UUID of the FireFly transaction
                     */
                    tx?: {
                        /**
                         * The blockchain transaction ID, in the format specific to the blockchain involved in the transaction. Not all FireFly transactions include a blockchain
                         */
                        blockchainId?: string;
                        /**
                         * The UUID of the FireFly transaction
                         */
                        id?: string;
                        /**
                         * The type of the FireFly transaction
                         */
                        type?: string;
                    };
                };
                default: unknown;
            };
        };
    };
    '/charts/histogram/{collection}': {
        get: {
            req: GetChartsHistogramByCollectionData;
            res: {
                /**
                 * Success
                 */
                200: Array<{
                    /**
                     * Total count of entries in this time bucket within the histogram
                     */
                    count?: string;
                    /**
                     * Indicates whether there are more results in this bucket that are not being displayed
                     */
                    isCapped?: boolean;
                    /**
                     * Starting timestamp for the bucket
                     */
                    timestamp?: string;
                    /**
                     * Array of separate counts for individual types of record within the bucket
                     */
                    types?: Array<{
                        /**
                         * Count of entries of a given type within a bucket
                         */
                        count?: string;
                        /**
                         * Name of the type
                         */
                        type?: string;
                    }>;
                }>;
                default: unknown;
            };
        };
    };
    '/contracts/interfaces': {
        get: {
            req: GetContractsInterfacesData;
            res: {
                /**
                 * Success
                 */
                200: Array<{
                    /**
                     * A description of the smart contract this FFI represents
                     */
                    description?: string;
                    /**
                     * An array of smart contract error definitions
                     */
                    errors?: Array<{
                        /**
                         * A description of the smart contract error
                         */
                        description?: string;
                        /**
                         * The UUID of the FFI error definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this error is part of
                         */
                        interface?: string;
                        /**
                         * The name of the error
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of error parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this error within the FFI for use on URL paths
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the error, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * An array of smart contract event definitions
                     */
                    events?: Array<{
                        /**
                         * A description of the smart contract event
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI event definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this event is part of
                         */
                        interface?: string;
                        /**
                         * The name of the event
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of event parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this event within the FFI for use on URL paths. Supports contracts that have multiple event overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the event, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * The UUID of the FireFly interface (FFI) smart contract definition
                     */
                    id?: string;
                    /**
                     * The UUID of the broadcast message that was used to publish this FFI to the network
                     */
                    message?: string;
                    /**
                     * An array of smart contract method definitions
                     */
                    methods?: Array<{
                        /**
                         * A description of the smart contract method
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI method definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this method is part of
                         */
                        interface?: string;
                        /**
                         * The name of the method
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of method parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this method within the FFI for use on URL paths. Supports contracts that have multiple method overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * An array of method return definitions
                         */
                        returns?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                    }>;
                    /**
                     * The name of the FFI - usually matching the smart contract name
                     */
                    name?: string;
                    /**
                     * The namespace of the FFI
                     */
                    namespace?: string;
                    /**
                     * The published name of the FFI within the multiparty network
                     */
                    networkName?: string;
                    /**
                     * Indicates if the FFI is published to other members of the multiparty network
                     */
                    published?: boolean;
                    /**
                     * A version for the FFI - use of semantic versioning such as 'v1.0.1' is encouraged
                     */
                    version?: string;
                }>;
                default: unknown;
            };
        };
        post: {
            req: PostContractsInterfacesData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * A description of the smart contract this FFI represents
                     */
                    description?: string;
                    /**
                     * An array of smart contract error definitions
                     */
                    errors?: Array<{
                        /**
                         * A description of the smart contract error
                         */
                        description?: string;
                        /**
                         * The UUID of the FFI error definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this error is part of
                         */
                        interface?: string;
                        /**
                         * The name of the error
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of error parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this error within the FFI for use on URL paths
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the error, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * An array of smart contract event definitions
                     */
                    events?: Array<{
                        /**
                         * A description of the smart contract event
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI event definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this event is part of
                         */
                        interface?: string;
                        /**
                         * The name of the event
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of event parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this event within the FFI for use on URL paths. Supports contracts that have multiple event overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the event, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * The UUID of the FireFly interface (FFI) smart contract definition
                     */
                    id?: string;
                    /**
                     * The UUID of the broadcast message that was used to publish this FFI to the network
                     */
                    message?: string;
                    /**
                     * An array of smart contract method definitions
                     */
                    methods?: Array<{
                        /**
                         * A description of the smart contract method
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI method definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this method is part of
                         */
                        interface?: string;
                        /**
                         * The name of the method
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of method parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this method within the FFI for use on URL paths. Supports contracts that have multiple method overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * An array of method return definitions
                         */
                        returns?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                    }>;
                    /**
                     * The name of the FFI - usually matching the smart contract name
                     */
                    name?: string;
                    /**
                     * The namespace of the FFI
                     */
                    namespace?: string;
                    /**
                     * The published name of the FFI within the multiparty network
                     */
                    networkName?: string;
                    /**
                     * Indicates if the FFI is published to other members of the multiparty network
                     */
                    published?: boolean;
                    /**
                     * A version for the FFI - use of semantic versioning such as 'v1.0.1' is encouraged
                     */
                    version?: string;
                };
                default: unknown;
            };
        };
    };
    '/contracts/interfaces/{interfaceId}': {
        delete: {
            req: DeleteContractsInterfacesByInterfaceIdData;
            res: {
                /**
                 * Success
                 */
                204: void;
                default: unknown;
            };
        };
        get: {
            req: GetContractsInterfacesByInterfaceIdData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * A description of the smart contract this FFI represents
                     */
                    description?: string;
                    /**
                     * An array of smart contract error definitions
                     */
                    errors?: Array<{
                        /**
                         * A description of the smart contract error
                         */
                        description?: string;
                        /**
                         * The UUID of the FFI error definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this error is part of
                         */
                        interface?: string;
                        /**
                         * The name of the error
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of error parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this error within the FFI for use on URL paths
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the error, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * An array of smart contract event definitions
                     */
                    events?: Array<{
                        /**
                         * A description of the smart contract event
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI event definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this event is part of
                         */
                        interface?: string;
                        /**
                         * The name of the event
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of event parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this event within the FFI for use on URL paths. Supports contracts that have multiple event overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the event, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * The UUID of the FireFly interface (FFI) smart contract definition
                     */
                    id?: string;
                    /**
                     * The UUID of the broadcast message that was used to publish this FFI to the network
                     */
                    message?: string;
                    /**
                     * An array of smart contract method definitions
                     */
                    methods?: Array<{
                        /**
                         * A description of the smart contract method
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI method definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this method is part of
                         */
                        interface?: string;
                        /**
                         * The name of the method
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of method parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this method within the FFI for use on URL paths. Supports contracts that have multiple method overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * An array of method return definitions
                         */
                        returns?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                    }>;
                    /**
                     * The name of the FFI - usually matching the smart contract name
                     */
                    name?: string;
                    /**
                     * The namespace of the FFI
                     */
                    namespace?: string;
                    /**
                     * The published name of the FFI within the multiparty network
                     */
                    networkName?: string;
                    /**
                     * Indicates if the FFI is published to other members of the multiparty network
                     */
                    published?: boolean;
                    /**
                     * A version for the FFI - use of semantic versioning such as 'v1.0.1' is encouraged
                     */
                    version?: string;
                };
                default: unknown;
            };
        };
    };
    '/contracts/interfaces/{name}/{version}': {
        get: {
            req: GetContractsInterfacesByNameByVersionData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * A description of the smart contract this FFI represents
                     */
                    description?: string;
                    /**
                     * An array of smart contract error definitions
                     */
                    errors?: Array<{
                        /**
                         * A description of the smart contract error
                         */
                        description?: string;
                        /**
                         * The UUID of the FFI error definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this error is part of
                         */
                        interface?: string;
                        /**
                         * The name of the error
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of error parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this error within the FFI for use on URL paths
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the error, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * An array of smart contract event definitions
                     */
                    events?: Array<{
                        /**
                         * A description of the smart contract event
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI event definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this event is part of
                         */
                        interface?: string;
                        /**
                         * The name of the event
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of event parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this event within the FFI for use on URL paths. Supports contracts that have multiple event overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the event, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * The UUID of the FireFly interface (FFI) smart contract definition
                     */
                    id?: string;
                    /**
                     * The UUID of the broadcast message that was used to publish this FFI to the network
                     */
                    message?: string;
                    /**
                     * An array of smart contract method definitions
                     */
                    methods?: Array<{
                        /**
                         * A description of the smart contract method
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI method definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this method is part of
                         */
                        interface?: string;
                        /**
                         * The name of the method
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of method parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this method within the FFI for use on URL paths. Supports contracts that have multiple method overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * An array of method return definitions
                         */
                        returns?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                    }>;
                    /**
                     * The name of the FFI - usually matching the smart contract name
                     */
                    name?: string;
                    /**
                     * The namespace of the FFI
                     */
                    namespace?: string;
                    /**
                     * The published name of the FFI within the multiparty network
                     */
                    networkName?: string;
                    /**
                     * Indicates if the FFI is published to other members of the multiparty network
                     */
                    published?: boolean;
                    /**
                     * A version for the FFI - use of semantic versioning such as 'v1.0.1' is encouraged
                     */
                    version?: string;
                };
                default: unknown;
            };
        };
    };
    '/contracts/interfaces/{name}/{version}/publish': {
        post: {
            req: PostContractsInterfacesByNameByVersionPublishData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * A description of the smart contract this FFI represents
                     */
                    description?: string;
                    /**
                     * An array of smart contract error definitions
                     */
                    errors?: Array<{
                        /**
                         * A description of the smart contract error
                         */
                        description?: string;
                        /**
                         * The UUID of the FFI error definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this error is part of
                         */
                        interface?: string;
                        /**
                         * The name of the error
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of error parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this error within the FFI for use on URL paths
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the error, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * An array of smart contract event definitions
                     */
                    events?: Array<{
                        /**
                         * A description of the smart contract event
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI event definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this event is part of
                         */
                        interface?: string;
                        /**
                         * The name of the event
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of event parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this event within the FFI for use on URL paths. Supports contracts that have multiple event overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the event, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * The UUID of the FireFly interface (FFI) smart contract definition
                     */
                    id?: string;
                    /**
                     * The UUID of the broadcast message that was used to publish this FFI to the network
                     */
                    message?: string;
                    /**
                     * An array of smart contract method definitions
                     */
                    methods?: Array<{
                        /**
                         * A description of the smart contract method
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI method definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this method is part of
                         */
                        interface?: string;
                        /**
                         * The name of the method
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of method parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this method within the FFI for use on URL paths. Supports contracts that have multiple method overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * An array of method return definitions
                         */
                        returns?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                    }>;
                    /**
                     * The name of the FFI - usually matching the smart contract name
                     */
                    name?: string;
                    /**
                     * The namespace of the FFI
                     */
                    namespace?: string;
                    /**
                     * The published name of the FFI within the multiparty network
                     */
                    networkName?: string;
                    /**
                     * Indicates if the FFI is published to other members of the multiparty network
                     */
                    published?: boolean;
                    /**
                     * A version for the FFI - use of semantic versioning such as 'v1.0.1' is encouraged
                     */
                    version?: string;
                };
                /**
                 * Success
                 */
                202: {
                    /**
                     * A description of the smart contract this FFI represents
                     */
                    description?: string;
                    /**
                     * An array of smart contract error definitions
                     */
                    errors?: Array<{
                        /**
                         * A description of the smart contract error
                         */
                        description?: string;
                        /**
                         * The UUID of the FFI error definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this error is part of
                         */
                        interface?: string;
                        /**
                         * The name of the error
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of error parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this error within the FFI for use on URL paths
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the error, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * An array of smart contract event definitions
                     */
                    events?: Array<{
                        /**
                         * A description of the smart contract event
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI event definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this event is part of
                         */
                        interface?: string;
                        /**
                         * The name of the event
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of event parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this event within the FFI for use on URL paths. Supports contracts that have multiple event overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the event, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * The UUID of the FireFly interface (FFI) smart contract definition
                     */
                    id?: string;
                    /**
                     * The UUID of the broadcast message that was used to publish this FFI to the network
                     */
                    message?: string;
                    /**
                     * An array of smart contract method definitions
                     */
                    methods?: Array<{
                        /**
                         * A description of the smart contract method
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI method definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this method is part of
                         */
                        interface?: string;
                        /**
                         * The name of the method
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of method parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this method within the FFI for use on URL paths. Supports contracts that have multiple method overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * An array of method return definitions
                         */
                        returns?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                    }>;
                    /**
                     * The name of the FFI - usually matching the smart contract name
                     */
                    name?: string;
                    /**
                     * The namespace of the FFI
                     */
                    namespace?: string;
                    /**
                     * The published name of the FFI within the multiparty network
                     */
                    networkName?: string;
                    /**
                     * Indicates if the FFI is published to other members of the multiparty network
                     */
                    published?: boolean;
                    /**
                     * A version for the FFI - use of semantic versioning such as 'v1.0.1' is encouraged
                     */
                    version?: string;
                };
                default: unknown;
            };
        };
    };
    '/contracts/interfaces/generate': {
        post: {
            req: PostContractsInterfacesGenerateData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * A description of the smart contract this FFI represents
                     */
                    description?: string;
                    /**
                     * An array of smart contract error definitions
                     */
                    errors?: Array<{
                        /**
                         * A description of the smart contract error
                         */
                        description?: string;
                        /**
                         * The UUID of the FFI error definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this error is part of
                         */
                        interface?: string;
                        /**
                         * The name of the error
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of error parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this error within the FFI for use on URL paths
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the error, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * An array of smart contract event definitions
                     */
                    events?: Array<{
                        /**
                         * A description of the smart contract event
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI event definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this event is part of
                         */
                        interface?: string;
                        /**
                         * The name of the event
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of event parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this event within the FFI for use on URL paths. Supports contracts that have multiple event overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * The stringified signature of the event, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * The UUID of the FireFly interface (FFI) smart contract definition
                     */
                    id?: string;
                    /**
                     * The UUID of the broadcast message that was used to publish this FFI to the network
                     */
                    message?: string;
                    /**
                     * An array of smart contract method definitions
                     */
                    methods?: Array<{
                        /**
                         * A description of the smart contract method
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this method from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The UUID of the FFI method definition
                         */
                        id?: string;
                        /**
                         * The UUID of the FFI smart contract definition that this method is part of
                         */
                        interface?: string;
                        /**
                         * The name of the method
                         */
                        name?: string;
                        /**
                         * The namespace of the FFI
                         */
                        namespace?: string;
                        /**
                         * An array of method parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                        /**
                         * The unique name allocated to this method within the FFI for use on URL paths. Supports contracts that have multiple method overrides with the same name
                         */
                        pathname?: string;
                        /**
                         * An array of method return definitions
                         */
                        returns?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                    }>;
                    /**
                     * The name of the FFI - usually matching the smart contract name
                     */
                    name?: string;
                    /**
                     * The namespace of the FFI
                     */
                    namespace?: string;
                    /**
                     * The published name of the FFI within the multiparty network
                     */
                    networkName?: string;
                    /**
                     * Indicates if the FFI is published to other members of the multiparty network
                     */
                    published?: boolean;
                    /**
                     * A version for the FFI - use of semantic versioning such as 'v1.0.1' is encouraged
                     */
                    version?: string;
                };
                default: unknown;
            };
        };
    };
    '/contracts/invoke': {
        post: {
            req: PostContractsInvokeData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * The time the operation was created
                     */
                    created?: string;
                    /**
                     * Operation.data
                     */
                    data?: {
                        [key: string]: unknown;
                    };
                    /**
                     * Any error reported back from the plugin for this operation
                     */
                    error?: string;
                    /**
                     * The UUID of the operation
                     */
                    id?: string;
                    /**
                     * The input to this operation
                     */
                    input?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The namespace of the operation
                     */
                    namespace?: string;
                    /**
                     * Any output reported back from the plugin for this operation
                     */
                    output?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The plugin responsible for performing the operation
                     */
                    plugin?: string;
                    /**
                     * If this operation was initiated as a retry to a previous operation, this field points to the UUID of the operation being retried
                     */
                    retry?: string;
                    /**
                     * The current status of the operation
                     */
                    status?: string;
                    /**
                     * The UUID of the FireFly transaction the operation is part of
                     */
                    tx?: string;
                    /**
                     * The type of the operation
                     */
                    type?: 'blockchain_invoke' | 'user_operation_send';
                    /**
                     * The last update time of the operation
                     */
                    updated?: string;
                };
                /**
                 * Success
                 */
                202: {
                    /**
                     * The time the operation was created
                     */
                    created?: string;
                    /**
                     * Operation.data
                     */
                    data?: {
                        [key: string]: unknown;
                    };
                    /**
                     * Any error reported back from the plugin for this operation
                     */
                    error?: string;
                    /**
                     * The UUID of the operation
                     */
                    id?: string;
                    /**
                     * The input to this operation
                     */
                    input?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The namespace of the operation
                     */
                    namespace?: string;
                    /**
                     * Any output reported back from the plugin for this operation
                     */
                    output?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The plugin responsible for performing the operation
                     */
                    plugin?: string;
                    /**
                     * If this operation was initiated as a retry to a previous operation, this field points to the UUID of the operation being retried
                     */
                    retry?: string;
                    /**
                     * The current status of the operation
                     */
                    status?: string;
                    /**
                     * The UUID of the FireFly transaction the operation is part of
                     */
                    tx?: string;
                    /**
                     * The type of the operation
                     */
                    type?: 'blockchain_invoke' | 'user_operation_send';
                    /**
                     * The last update time of the operation
                     */
                    updated?: string;
                };
                default: unknown;
            };
        };
    };
    '/contracts/listeners': {
        get: {
            req: GetContractsListenersData;
            res: {
                /**
                 * Success
                 */
                200: Array<{
                    /**
                     * An ID assigned by the blockchain connector to this listener
                     */
                    backendId?: string;
                    /**
                     * The creation time of the listener
                     */
                    created?: string;
                    /**
                     * Deprecated: Please use 'event' in the array of 'filters' instead
                     */
                    event?: {
                        /**
                         * A description of the smart contract event
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The name of the event
                         */
                        name?: string;
                        /**
                         * An array of event parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                    };
                    /**
                     * A list of filters for the contract listener. Each filter is made up of an Event and an optional Location. Events matching these filters will always be emitted in the order determined by the blockchain.
                     */
                    filters?: Array<{
                        /**
                         * The definition of the event, either provided in-line when creating the listener, or extracted from the referenced FFI
                         */
                        event?: {
                            /**
                             * A description of the smart contract event
                             */
                            description?: string;
                            /**
                             * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                             */
                            details?: {
                                [key: string]: unknown;
                            };
                            /**
                             * The name of the event
                             */
                            name?: string;
                            /**
                             * An array of event parameter/argument definitions
                             */
                            params?: Array<{
                                /**
                                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                                 */
                                name?: string;
                                /**
                                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                                 */
                                schema?: unknown;
                            }>;
                        };
                        /**
                         * A reference to an existing FFI, containing pre-registered type information for the event
                         */
                        interface?: {
                            /**
                             * The UUID of the FireFly interface
                             */
                            id?: string;
                            /**
                             * The name of the FireFly interface
                             */
                            name?: string;
                            /**
                             * The version of the FireFly interface
                             */
                            version?: string;
                        };
                        /**
                         * A blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
                         */
                        location?: unknown;
                        /**
                         * The stringified signature of the event and location, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * The UUID of the smart contract listener
                     */
                    id?: string;
                    /**
                     * Deprecated: Please use 'interface' in the array of 'filters' instead
                     */
                    interface?: {
                        /**
                         * The UUID of the FireFly interface
                         */
                        id?: string;
                        /**
                         * The name of the FireFly interface
                         */
                        name?: string;
                        /**
                         * The version of the FireFly interface
                         */
                        version?: string;
                    };
                    /**
                     * Deprecated: Please use 'location' in the array of 'filters' instead
                     */
                    location?: unknown;
                    /**
                     * A descriptive name for the listener
                     */
                    name?: string;
                    /**
                     * The namespace of the listener, which defines the namespace of all blockchain events detected by this listener
                     */
                    namespace?: string;
                    /**
                     * Options that control how the listener subscribes to events from the underlying blockchain
                     */
                    options?: {
                        /**
                         * A blockchain specific string, such as a block number, to start listening from. The special strings 'oldest' and 'newest' are supported by all blockchain connectors. Default is 'newest'
                         */
                        firstEvent?: string;
                    };
                    /**
                     * A concatenation of all the stringified signature of the event and location, as computed by the blockchain plugin
                     */
                    signature?: string;
                    /**
                     * A topic to set on the FireFly event that is emitted each time a blockchain event is detected from the blockchain. Setting this topic on a number of listeners allows applications to easily subscribe to all events they need
                     */
                    topic?: string;
                }>;
                default: unknown;
            };
        };
        post: {
            req: PostContractsListenersData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * An ID assigned by the blockchain connector to this listener
                     */
                    backendId?: string;
                    /**
                     * The creation time of the listener
                     */
                    created?: string;
                    /**
                     * Deprecated: Please use 'event' in the array of 'filters' instead
                     */
                    event?: {
                        /**
                         * A description of the smart contract event
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The name of the event
                         */
                        name?: string;
                        /**
                         * An array of event parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                    };
                    /**
                     * A list of filters for the contract listener. Each filter is made up of an Event and an optional Location. Events matching these filters will always be emitted in the order determined by the blockchain.
                     */
                    filters?: Array<{
                        /**
                         * The definition of the event, either provided in-line when creating the listener, or extracted from the referenced FFI
                         */
                        event?: {
                            /**
                             * A description of the smart contract event
                             */
                            description?: string;
                            /**
                             * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                             */
                            details?: {
                                [key: string]: unknown;
                            };
                            /**
                             * The name of the event
                             */
                            name?: string;
                            /**
                             * An array of event parameter/argument definitions
                             */
                            params?: Array<{
                                /**
                                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                                 */
                                name?: string;
                                /**
                                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                                 */
                                schema?: unknown;
                            }>;
                        };
                        /**
                         * A reference to an existing FFI, containing pre-registered type information for the event
                         */
                        interface?: {
                            /**
                             * The UUID of the FireFly interface
                             */
                            id?: string;
                            /**
                             * The name of the FireFly interface
                             */
                            name?: string;
                            /**
                             * The version of the FireFly interface
                             */
                            version?: string;
                        };
                        /**
                         * A blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
                         */
                        location?: unknown;
                        /**
                         * The stringified signature of the event and location, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * The UUID of the smart contract listener
                     */
                    id?: string;
                    /**
                     * Deprecated: Please use 'interface' in the array of 'filters' instead
                     */
                    interface?: {
                        /**
                         * The UUID of the FireFly interface
                         */
                        id?: string;
                        /**
                         * The name of the FireFly interface
                         */
                        name?: string;
                        /**
                         * The version of the FireFly interface
                         */
                        version?: string;
                    };
                    /**
                     * Deprecated: Please use 'location' in the array of 'filters' instead
                     */
                    location?: unknown;
                    /**
                     * A descriptive name for the listener
                     */
                    name?: string;
                    /**
                     * The namespace of the listener, which defines the namespace of all blockchain events detected by this listener
                     */
                    namespace?: string;
                    /**
                     * Options that control how the listener subscribes to events from the underlying blockchain
                     */
                    options?: {
                        /**
                         * A blockchain specific string, such as a block number, to start listening from. The special strings 'oldest' and 'newest' are supported by all blockchain connectors. Default is 'newest'
                         */
                        firstEvent?: string;
                    };
                    /**
                     * A concatenation of all the stringified signature of the event and location, as computed by the blockchain plugin
                     */
                    signature?: string;
                    /**
                     * A topic to set on the FireFly event that is emitted each time a blockchain event is detected from the blockchain. Setting this topic on a number of listeners allows applications to easily subscribe to all events they need
                     */
                    topic?: string;
                };
                default: unknown;
            };
        };
    };
    '/contracts/listeners/{nameOrId}': {
        delete: {
            req: DeleteContractsListenersByNameOrIdData;
            res: {
                /**
                 * Success
                 */
                204: void;
                default: unknown;
            };
        };
        get: {
            req: GetContractsListenersByNameOrIdData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * An ID assigned by the blockchain connector to this listener
                     */
                    backendId?: string;
                    /**
                     * The creation time of the listener
                     */
                    created?: string;
                    /**
                     * Deprecated: Please use 'event' in the array of 'filters' instead
                     */
                    event?: {
                        /**
                         * A description of the smart contract event
                         */
                        description?: string;
                        /**
                         * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                         */
                        details?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The name of the event
                         */
                        name?: string;
                        /**
                         * An array of event parameter/argument definitions
                         */
                        params?: Array<{
                            /**
                             * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                             */
                            name?: string;
                            /**
                             * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                             */
                            schema?: unknown;
                        }>;
                    };
                    /**
                     * A list of filters for the contract listener. Each filter is made up of an Event and an optional Location. Events matching these filters will always be emitted in the order determined by the blockchain.
                     */
                    filters?: Array<{
                        /**
                         * The definition of the event, either provided in-line when creating the listener, or extracted from the referenced FFI
                         */
                        event?: {
                            /**
                             * A description of the smart contract event
                             */
                            description?: string;
                            /**
                             * Additional blockchain specific fields about this event from the original smart contract. Used by the blockchain plugin and for documentation generation.
                             */
                            details?: {
                                [key: string]: unknown;
                            };
                            /**
                             * The name of the event
                             */
                            name?: string;
                            /**
                             * An array of event parameter/argument definitions
                             */
                            params?: Array<{
                                /**
                                 * The name of the parameter. Note that parameters must be ordered correctly on the FFI, according to the order in the blockchain smart contract
                                 */
                                name?: string;
                                /**
                                 * FireFly uses an extended subset of JSON Schema to describe parameters, similar to OpenAPI/Swagger. Converters are available for native blockchain interface definitions / type systems - such as an Ethereum ABI. See the documentation for more detail
                                 */
                                schema?: unknown;
                            }>;
                        };
                        /**
                         * A reference to an existing FFI, containing pre-registered type information for the event
                         */
                        interface?: {
                            /**
                             * The UUID of the FireFly interface
                             */
                            id?: string;
                            /**
                             * The name of the FireFly interface
                             */
                            name?: string;
                            /**
                             * The version of the FireFly interface
                             */
                            version?: string;
                        };
                        /**
                         * A blockchain specific contract identifier. For example an Ethereum contract address, or a Fabric chaincode name and channel
                         */
                        location?: unknown;
                        /**
                         * The stringified signature of the event and location, as computed by the blockchain plugin
                         */
                        signature?: string;
                    }>;
                    /**
                     * The UUID of the smart contract listener
                     */
                    id?: string;
                    /**
                     * Deprecated: Please use 'interface' in the array of 'filters' instead
                     */
                    interface?: {
                        /**
                         * The UUID of the FireFly interface
                         */
                        id?: string;
                        /**
                         * The name of the FireFly interface
                         */
                        name?: string;
                        /**
                         * The version of the FireFly interface
                         */
                        version?: string;
                    };
                    /**
                     * Deprecated: Please use 'location' in the array of 'filters' instead
                     */
                    location?: unknown;
                    /**
                     * A descriptive name for the listener
                     */
                    name?: string;
                    /**
                     * The namespace of the listener, which defines the namespace of all blockchain events detected by this listener
                     */
                    namespace?: string;
                    /**
                     * Options that control how the listener subscribes to events from the underlying blockchain
                     */
                    options?: {
                        /**
                         * A blockchain specific string, such as a block number, to start listening from. The special strings 'oldest' and 'newest' are supported by all blockchain connectors. Default is 'newest'
                         */
                        firstEvent?: string;
                    };
                    /**
                     * A concatenation of all the stringified signature of the event and location, as computed by the blockchain plugin
                     */
                    signature?: string;
                    /**
                     * A topic to set on the FireFly event that is emitted each time a blockchain event is detected from the blockchain. Setting this topic on a number of listeners allows applications to easily subscribe to all events they need
                     */
                    topic?: string;
                };
                default: unknown;
            };
        };
    };
    '/contracts/listeners/signature': {
        post: {
            req: PostContractsListenersSignatureData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * A concatenation of all the stringified signature of the event and location, as computed by the blockchain plugin
                     */
                    signature?: string;
                };
                default: unknown;
            };
        };
    };
    '/contracts/query': {
        post: {
            req: PostContractsQueryData;
            res: {
                /**
                 * Success
                 */
                200: {
                    [key: string]: unknown;
                };
                default: unknown;
            };
        };
    };
    '/events': {
        get: {
            req: GetEventsData;
            res: {
                /**
                 * Success
                 */
                200: Array<{
                    /**
                     * For message events, this is the 'header.cid' field from the referenced message. For certain other event types, a secondary object is referenced such as a token pool
                     */
                    correlator?: string;
                    /**
                     * The time the event was emitted. Not guaranteed to be unique, or to increase between events in the same order as the final sequence events are delivered to your application. As such, the 'sequence' field should be used instead of the 'created' field for querying events in the exact order they are delivered to applications
                     */
                    created?: string;
                    /**
                     * The UUID assigned to this event by your local FireFly node
                     */
                    id?: string;
                    /**
                     * The namespace of the event. Your application must subscribe to events within a namespace
                     */
                    namespace?: string;
                    /**
                     * The UUID of an resource that is the subject of this event. The event type determines what type of resource is referenced, and whether this field might be unset
                     */
                    reference?: string;
                    /**
                     * A sequence indicating the order in which events are delivered to your application. Assure to be unique per event in your local FireFly database (unlike the created timestamp)
                     */
                    sequence?: number;
                    /**
                     * A stream of information this event relates to. For message confirmation events, a separate event is emitted for each topic in the message. For blockchain events, the listener specifies the topic. Rules exist for how the topic is set for other event types
                     */
                    topic?: string;
                    /**
                     * The UUID of a transaction that is event is part of. Not all events are part of a transaction
                     */
                    tx?: string;
                    /**
                     * All interesting activity in FireFly is emitted as a FireFly event, of a given type. The 'type' combined with the 'reference' can be used to determine how to process the event within your application
                     */
                    type?:
                        | 'transaction_submitted'
                        | 'message_confirmed'
                        | 'message_rejected'
                        | 'datatype_confirmed'
                        | 'identity_confirmed'
                        | 'identity_updated'
                        | 'token_pool_confirmed'
                        | 'token_pool_op_failed'
                        | 'token_transfer_confirmed'
                        | 'token_transfer_op_failed'
                        | 'token_approval_confirmed'
                        | 'token_approval_op_failed'
                        | 'contract_interface_confirmed'
                        | 'contract_api_confirmed'
                        | 'blockchain_event_received'
                        | 'blockchain_invoke_op_succeeded'
                        | 'blockchain_invoke_op_failed'
                        | 'blockchain_contract_deploy_op_succeeded'
                        | 'blockchain_contract_deploy_op_failed';
                }>;
                default: unknown;
            };
        };
    };
    '/events/{eid}': {
        get: {
            req: GetEventsByEidData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * For message events, this is the 'header.cid' field from the referenced message. For certain other event types, a secondary object is referenced such as a token pool
                     */
                    correlator?: string;
                    /**
                     * The time the event was emitted. Not guaranteed to be unique, or to increase between events in the same order as the final sequence events are delivered to your application. As such, the 'sequence' field should be used instead of the 'created' field for querying events in the exact order they are delivered to applications
                     */
                    created?: string;
                    /**
                     * The UUID assigned to this event by your local FireFly node
                     */
                    id?: string;
                    /**
                     * The namespace of the event. Your application must subscribe to events within a namespace
                     */
                    namespace?: string;
                    /**
                     * The UUID of an resource that is the subject of this event. The event type determines what type of resource is referenced, and whether this field might be unset
                     */
                    reference?: string;
                    /**
                     * A sequence indicating the order in which events are delivered to your application. Assure to be unique per event in your local FireFly database (unlike the created timestamp)
                     */
                    sequence?: number;
                    /**
                     * A stream of information this event relates to. For message confirmation events, a separate event is emitted for each topic in the message. For blockchain events, the listener specifies the topic. Rules exist for how the topic is set for other event types
                     */
                    topic?: string;
                    /**
                     * The UUID of a transaction that is event is part of. Not all events are part of a transaction
                     */
                    tx?: string;
                    /**
                     * All interesting activity in FireFly is emitted as a FireFly event, of a given type. The 'type' combined with the 'reference' can be used to determine how to process the event within your application
                     */
                    type?:
                        | 'transaction_submitted'
                        | 'message_confirmed'
                        | 'message_rejected'
                        | 'datatype_confirmed'
                        | 'identity_confirmed'
                        | 'identity_updated'
                        | 'token_pool_confirmed'
                        | 'token_pool_op_failed'
                        | 'token_transfer_confirmed'
                        | 'token_transfer_op_failed'
                        | 'token_approval_confirmed'
                        | 'token_approval_op_failed'
                        | 'contract_interface_confirmed'
                        | 'contract_api_confirmed'
                        | 'blockchain_event_received'
                        | 'blockchain_invoke_op_succeeded'
                        | 'blockchain_invoke_op_failed'
                        | 'blockchain_contract_deploy_op_succeeded'
                        | 'blockchain_contract_deploy_op_failed';
                };
                default: unknown;
            };
        };
    };
    '/namespaces': {
        get: {
            req: GetNamespacesData;
            res: {
                /**
                 * Success
                 */
                200: Array<{
                    /**
                     * The time the namespace was created
                     */
                    created?: string;
                    /**
                     * A description of the namespace
                     */
                    description?: string;
                    /**
                     * Set to a non-empty string in the case that the namespace is currently failing to initialize
                     */
                    initializationError?: string;
                    /**
                     * Set to true if the namespace is still initializing
                     */
                    initializing?: boolean;
                    /**
                     * The local namespace name
                     */
                    name?: string;
                    /**
                     * The shared namespace name within the multiparty network
                     */
                    networkName?: string;
                }>;
                default: unknown;
            };
        };
    };
    '/namespaces/{ns}': {
        get: {
            req: GetNamespacesByNsData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * The time the namespace was created
                     */
                    created?: string;
                    /**
                     * A description of the namespace
                     */
                    description?: string;
                    /**
                     * The local namespace name
                     */
                    name?: string;
                    /**
                     * The shared namespace name within the multiparty network
                     */
                    networkName?: string;
                };
                default: unknown;
            };
        };
    };
    '/operations/{nsopid}': {
        patch: {
            req: PatchOperationsByNsopidData;
            res: {
                /**
                 * Success
                 */
                200: {
                    [key: string]: unknown;
                };
                default: unknown;
            };
        };
    };
    '/reset': {
        post: {
            req: PostResetData;
            res: {
                /**
                 * Success
                 */
                204: void;
                default: unknown;
            };
        };
    };
    '/operations': {
        get: {
            req: GetOperationsData;
            res: {
                /**
                 * Success
                 */
                200: Array<{
                    /**
                     * The time the operation was created
                     */
                    created?: string;
                    /**
                     * Operation.data
                     */
                    data?: {
                        [key: string]: unknown;
                    };
                    /**
                     * Any error reported back from the plugin for this operation
                     */
                    error?: string;
                    /**
                     * The UUID of the operation
                     */
                    id?: string;
                    /**
                     * The input to this operation
                     */
                    input?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The namespace of the operation
                     */
                    namespace?: string;
                    /**
                     * Any output reported back from the plugin for this operation
                     */
                    output?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The plugin responsible for performing the operation
                     */
                    plugin?: string;
                    /**
                     * If this operation was initiated as a retry to a previous operation, this field points to the UUID of the operation being retried
                     */
                    retry?: string;
                    /**
                     * The current status of the operation
                     */
                    status?: string;
                    /**
                     * The UUID of the FireFly transaction the operation is part of
                     */
                    tx?: string;
                    /**
                     * The type of the operation
                     */
                    type?: 'blockchain_invoke' | 'user_operation_send';
                    /**
                     * The last update time of the operation
                     */
                    updated?: string;
                }>;
                default: unknown;
            };
        };
    };
    '/operations-onchain/{opid}': {
        get: {
            req: GetOperationsOnchainByOpidData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * The time the operation was created
                     */
                    created?: string;
                    /**
                     * Operation.data
                     */
                    data?: {
                        [key: string]: unknown;
                    };
                    /**
                     * Additional detailed information about an operation provided by the connector
                     */
                    detail?: unknown;
                    /**
                     * Any error reported back from the plugin for this operation
                     */
                    error?: string;
                    /**
                     * The UUID of the operation
                     */
                    id?: string;
                    /**
                     * The input to this operation
                     */
                    input?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The namespace of the operation
                     */
                    namespace?: string;
                    /**
                     * Any output reported back from the plugin for this operation
                     */
                    output?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The plugin responsible for performing the operation
                     */
                    plugin?: string;
                    /**
                     * If this operation was initiated as a retry to a previous operation, this field points to the UUID of the operation being retried
                     */
                    retry?: string;
                    /**
                     * The current status of the operation
                     */
                    status?: string;
                    /**
                     * The UUID of the FireFly transaction the operation is part of
                     */
                    tx?: string;
                    /**
                     * The type of the operation
                     */
                    type?: 'blockchain_invoke' | 'user_operation_send';
                    /**
                     * The last update time of the operation
                     */
                    updated?: string;
                };
                default: unknown;
            };
        };
    };
    '/operations/{opid}/retry': {
        post: {
            req: PostOperationsByOpidRetryData;
            res: {
                /**
                 * Success
                 */
                202: {
                    /**
                     * The time the operation was created
                     */
                    created?: string;
                    /**
                     * Operation.data
                     */
                    data?: {
                        [key: string]: unknown;
                    };
                    /**
                     * Any error reported back from the plugin for this operation
                     */
                    error?: string;
                    /**
                     * The UUID of the operation
                     */
                    id?: string;
                    /**
                     * The input to this operation
                     */
                    input?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The namespace of the operation
                     */
                    namespace?: string;
                    /**
                     * Any output reported back from the plugin for this operation
                     */
                    output?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The plugin responsible for performing the operation
                     */
                    plugin?: string;
                    /**
                     * If this operation was initiated as a retry to a previous operation, this field points to the UUID of the operation being retried
                     */
                    retry?: string;
                    /**
                     * The current status of the operation
                     */
                    status?: string;
                    /**
                     * The UUID of the FireFly transaction the operation is part of
                     */
                    tx?: string;
                    /**
                     * The type of the operation
                     */
                    type?: 'blockchain_invoke' | 'user_operation_send';
                    /**
                     * The last update time of the operation
                     */
                    updated?: string;
                };
                default: unknown;
            };
        };
    };
    '/operations/{opid}/status': {
        post: {
            req: PostOperationsByOpidStatusData;
            res: {
                /**
                 * Success
                 */
                202: {
                    /**
                     * The time the operation was created
                     */
                    created?: string;
                    /**
                     * Operation.data
                     */
                    data?: {
                        [key: string]: unknown;
                    };
                    /**
                     * Any error reported back from the plugin for this operation
                     */
                    error?: string;
                    /**
                     * The UUID of the operation
                     */
                    id?: string;
                    /**
                     * The input to this operation
                     */
                    input?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The namespace of the operation
                     */
                    namespace?: string;
                    /**
                     * Any output reported back from the plugin for this operation
                     */
                    output?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The plugin responsible for performing the operation
                     */
                    plugin?: string;
                    /**
                     * If this operation was initiated as a retry to a previous operation, this field points to the UUID of the operation being retried
                     */
                    retry?: string;
                    /**
                     * The current status of the operation
                     */
                    status?: string;
                    /**
                     * The UUID of the FireFly transaction the operation is part of
                     */
                    tx?: string;
                    /**
                     * The type of the operation
                     */
                    type?: 'blockchain_invoke' | 'user_operation_send';
                    /**
                     * The last update time of the operation
                     */
                    updated?: string;
                };
                default: unknown;
            };
        };
    };
    '/signers': {
        get: {
            req: GetSignersData;
            res: {
                /**
                 * Success
                 */
                200: Array<{
                    /**
                     * Signer.created
                     */
                    created?: string;
                    /**
                     * Signer.description
                     */
                    description?: string;
                    /**
                     * Signer.id
                     */
                    id?: string;
                    /**
                     * Signer.isActive
                     */
                    isActive?: boolean;
                    /**
                     * Signer.keyIdentifier
                     */
                    keyIdentifier?: string;
                    /**
                     * Signer.name
                     */
                    name?: string;
                    /**
                     * Signer.namespace
                     */
                    namespace?: string;
                    /**
                     * Signer.provider
                     */
                    provider?: string;
                    /**
                     * Signer.providerResource
                     */
                    providerResource?: string;
                    /**
                     * Signer.providerService
                     */
                    providerService?: string;
                    /**
                     * Signer.updated
                     */
                    updated?: string;
                }>;
                default: unknown;
            };
        };
        post: {
            req: PostSignersData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * Signer.created
                     */
                    created?: string;
                    /**
                     * Signer.description
                     */
                    description?: string;
                    /**
                     * Signer.id
                     */
                    id?: string;
                    /**
                     * Signer.isActive
                     */
                    isActive?: boolean;
                    /**
                     * Signer.keyIdentifier
                     */
                    keyIdentifier?: string;
                    /**
                     * Signer.name
                     */
                    name?: string;
                    /**
                     * Signer.namespace
                     */
                    namespace?: string;
                    /**
                     * Signer.provider
                     */
                    provider?: string;
                    /**
                     * Signer.providerResource
                     */
                    providerResource?: string;
                    /**
                     * Signer.providerService
                     */
                    providerService?: string;
                    /**
                     * Signer.updated
                     */
                    updated?: string;
                };
                default: unknown;
            };
        };
    };
    '/signers/{id}': {
        get: {
            req: GetSignersByIdData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * Signer.created
                     */
                    created?: string;
                    /**
                     * Signer.description
                     */
                    description?: string;
                    /**
                     * Signer.id
                     */
                    id?: string;
                    /**
                     * Signer.isActive
                     */
                    isActive?: boolean;
                    /**
                     * Signer.keyIdentifier
                     */
                    keyIdentifier?: string;
                    /**
                     * Signer.name
                     */
                    name?: string;
                    /**
                     * Signer.namespace
                     */
                    namespace?: string;
                    /**
                     * Signer.provider
                     */
                    provider?: string;
                    /**
                     * Signer.providerResource
                     */
                    providerResource?: string;
                    /**
                     * Signer.providerService
                     */
                    providerService?: string;
                    /**
                     * Signer.updated
                     */
                    updated?: string;
                };
                default: unknown;
            };
        };
    };
    '/status': {
        get: {
            req: GetStatusData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * The namespace that this status applies to
                     */
                    namespace?: {
                        /**
                         * The time the namespace was created
                         */
                        created?: string;
                        /**
                         * A description of the namespace
                         */
                        description?: string;
                        /**
                         * The local namespace name
                         */
                        name?: string;
                        /**
                         * The shared namespace name within the multiparty network
                         */
                        networkName?: string;
                    };
                    /**
                     * Details of the local node
                     */
                    node?: {
                        /**
                         * The UUID of the node, if registered
                         */
                        id?: string;
                        /**
                         * The name of this node, as specified in the local configuration
                         */
                        name?: string;
                        /**
                         * Whether the node has been successfully registered
                         */
                        registered?: boolean;
                    };
                    /**
                     * Details of the root organization identity registered for this namespace on the local node
                     */
                    org?: {
                        /**
                         * The DID of the organization identity, if registered
                         */
                        did?: string;
                        /**
                         * The UUID of the organization, if registered
                         */
                        id?: string;
                        /**
                         * The name of the node operator organization, as specified in the local configuration
                         */
                        name?: string;
                        /**
                         * Whether the organization has been successfully registered
                         */
                        registered?: boolean;
                        /**
                         * Array of verifiers (blockchain keys) owned by this identity
                         */
                        verifiers?: Array<{
                            /**
                             * The type of the verifier
                             */
                            type?: 'ethereum_address';
                            /**
                             * The verifier string, such as an Ethereum address, or Fabric MSP identifier
                             */
                            value?: string;
                        }>;
                    };
                    /**
                     * Information about plugins configured on this namespace
                     */
                    plugins?: {
                        /**
                         * The blockchain plugins on this namespace
                         */
                        blockchain?: Array<{
                            /**
                             * The name of the plugin
                             */
                            name?: string;
                            /**
                             * The type of the plugin
                             */
                            pluginType?: string;
                        }>;
                        /**
                         * The database plugins on this namespace
                         */
                        database?: Array<{
                            /**
                             * The name of the plugin
                             */
                            name?: string;
                            /**
                             * The type of the plugin
                             */
                            pluginType?: string;
                        }>;
                        /**
                         * The event plugins on this namespace
                         */
                        events?: Array<{
                            /**
                             * The name of the plugin
                             */
                            name?: string;
                            /**
                             * The type of the plugin
                             */
                            pluginType?: string;
                        }>;
                        /**
                         * NamespaceStatusPlugins.messageBroker
                         */
                        messageBroker?: Array<{
                            /**
                             * The name of the plugin
                             */
                            name?: string;
                            /**
                             * The type of the plugin
                             */
                            pluginType?: string;
                        }>;
                    };
                };
                default: unknown;
            };
        };
    };
    '/subscriptions': {
        get: {
            req: GetSubscriptionsData;
            res: {
                /**
                 * Success
                 */
                200: Array<{
                    /**
                     * Creation time of the subscription
                     */
                    created?: string;
                    /**
                     * Ephemeral subscriptions only exist as long as the application is connected, and as such will miss events that occur while the application is disconnected, and cannot be created administratively. You can create one over over a connected WebSocket connection
                     */
                    ephemeral?: boolean;
                    /**
                     * Server-side filter to apply to events
                     */
                    filter?: {
                        /**
                         * Deprecated: Please use 'message.author' instead
                         */
                        author?: string;
                        /**
                         * Filters specific to blockchain events. If an event is not a blockchain event, these filters are ignored
                         */
                        blockchainevent?: {
                            /**
                             * Regular expression to apply to the blockchain event 'listener' field, which is the UUID of the event listener. So you can restrict your subscription to certain blockchain listeners. Alternatively to avoid your application need to know listener UUIDs you can set the 'topic' field of blockchain event listeners, and use a topic filter on your subscriptions
                             */
                            listener?: string;
                            /**
                             * Regular expression to apply to the blockchain event 'name' field, which is the name of the event in the underlying blockchain smart contract
                             */
                            name?: string;
                        };
                        /**
                         * Regular expression to apply to the event type, to subscribe to a subset of event types
                         */
                        events?: string;
                        /**
                         * Deprecated: Please use 'message.group' instead
                         */
                        group?: string;
                        /**
                         * Filters specific to message events. If an event is not a message event, these filters are ignored
                         */
                        message?: {
                            /**
                             * Regular expression to apply to the message 'header.author' field
                             */
                            author?: string;
                            /**
                             * Regular expression to apply to the message 'header.group' field
                             */
                            group?: string;
                            /**
                             * Regular expression to apply to the message 'header.tag' field
                             */
                            tag?: string;
                        };
                        /**
                         * Deprecated: Please use 'message.tag' instead
                         */
                        tag?: string;
                        /**
                         * Regular expression to apply to the topic of the event, to subscribe to a subset of topics. Note for messages sent with multiple topics, a separate event is emitted for each topic
                         */
                        topic?: string;
                        /**
                         * Deprecated: Please use 'topic' instead
                         */
                        topics?: string;
                        /**
                         * Filters specific to events with a transaction. If an event is not associated with a transaction, this filter is ignored
                         */
                        transaction?: {
                            /**
                             * Regular expression to apply to the transaction 'type' field
                             */
                            type?: string;
                        };
                    };
                    /**
                     * The UUID of the subscription
                     */
                    id?: string;
                    /**
                     * The name of the subscription. The application specifies this name when it connects, in order to attach to the subscription and receive events that arrived while it was disconnected. If multiple apps connect to the same subscription, events are workload balanced across the connected application instances
                     */
                    name?: string;
                    /**
                     * The namespace of the subscription. A subscription will only receive events generated in the namespace of the subscription
                     */
                    namespace?: string;
                    /**
                     * Subscription options
                     */
                    options?: {
                        /**
                         * Events are delivered in batches in an ordered array. The batch size is capped to the readAhead limit. The event payload is always an array even if there is a single event in the batch, allowing client-side optimizations when processing the events in a group. Available for both Webhooks and WebSockets.
                         */
                        batch?: boolean;
                        /**
                         * When batching is enabled, the optional timeout to send events even when the batch hasn't filled.
                         */
                        batchTimeout?: string;
                        /**
                         * Webhooks only: When true the event will be acknowledged before the webhook is invoked, allowing parallel invocations
                         */
                        fastack?: boolean;
                        /**
                         * Whether your application would like to receive events from the 'oldest' event emitted by your FireFly node (from the beginning of time), or the 'newest' event (from now), or a specific event sequence. Default is 'newest'
                         */
                        firstEvent?: string;
                        /**
                         * Webhooks only: Static headers to set on the webhook request
                         */
                        headers?: {
                            [key: string]: string;
                        };
                        /**
                         * Webhooks only: a set of options for HTTP
                         */
                        httpOptions?: {
                            /**
                             * The maximum amount of time that a connection is allowed to remain with no data transmitted.
                             */
                            connectionTimeout?: string;
                            /**
                             * See [ExpectContinueTimeout in the Go docs](https://pkg.go.dev/net/http#Transport)
                             */
                            expectContinueTimeout?: string;
                            /**
                             * The max duration to hold a HTTP keepalive connection between calls
                             */
                            idleTimeout?: string;
                            /**
                             * The max number of idle connections to hold pooled
                             */
                            maxIdleConns?: number;
                            /**
                             * HTTP proxy URL to use for outbound requests to the webhook
                             */
                            proxyURL?: string;
                            /**
                             * The max duration to hold a TLS handshake alive
                             */
                            requestTimeout?: string;
                            /**
                             * The max duration to hold a TLS handshake alive
                             */
                            tlsHandshakeTimeout?: string;
                        };
                        /**
                         * Webhooks only: A set of options to extract data from the first JSON input data in the incoming message. Only applies if withData=true
                         */
                        input?: {
                            /**
                             * A top-level property of the first data input, to use for the request body. Default is the whole first body
                             */
                            body?: string;
                            /**
                             * A top-level property of the first data input, to use for headers
                             */
                            headers?: string;
                            /**
                             * A top-level property of the first data input, to use for a path to append with escaping to the webhook path
                             */
                            path?: string;
                            /**
                             * A top-level property of the first data input, to use for query parameters
                             */
                            query?: string;
                            /**
                             * A top-level property of the first data input, to use to dynamically set whether to pin the response (so the requester can choose)
                             */
                            replytx?: string;
                        };
                        /**
                         * Webhooks only: Whether to assume the response body is JSON, regardless of the returned Content-Type
                         */
                        json?: boolean;
                        /**
                         * Webhooks only: HTTP method to invoke. Default=POST
                         */
                        method?: string;
                        /**
                         * Webhooks only: Static query params to set on the webhook request
                         */
                        query?: {
                            [key: string]: string;
                        };
                        /**
                         * The number of events to stream ahead to your application, while waiting for confirmation of consumption of those events. At least once delivery semantics are used in FireFly, so if your application crashes/reconnects this is the maximum number of events you would expect to be redelivered after it restarts
                         */
                        readAhead?: number;
                        /**
                         * Webhooks only: Whether to automatically send a reply event, using the body returned by the webhook
                         */
                        reply?: boolean;
                        /**
                         * Webhooks only: The tag to set on the reply message
                         */
                        replytag?: string;
                        /**
                         * Webhooks only: The transaction type to set on the reply message
                         */
                        replytx?: string;
                        /**
                         * Webhooks only: a set of options for retrying the webhook call
                         */
                        retry?: {
                            /**
                             * Number of times to retry the webhook call in case of failure
                             */
                            count?: number;
                            /**
                             * Enables retry on HTTP calls, defaults to false
                             */
                            enabled?: boolean;
                            /**
                             * Initial delay between retries when we retry the webhook call
                             */
                            initialDelay?: string;
                            /**
                             * Max delay between retries when we retry the webhookcall
                             */
                            maxDelay?: string;
                        };
                        /**
                         * The name of an existing TLS configuration associated to the namespace to use
                         */
                        tlsConfigName?: string;
                        /**
                         * Webhooks only: HTTP url to invoke. Can be relative if a base URL is set in the webhook plugin config
                         */
                        url?: string;
                        /**
                         * Whether message events delivered over the subscription, should be packaged with the full data of those messages in-line as part of the event JSON payload. Or if the application should make separate REST calls to download that data. May not be supported on some transports.
                         */
                        withData?: boolean;
                    };
                    /**
                     * The transport plugin responsible for event delivery (WebSockets, Webhooks, JMS, NATS etc.)
                     */
                    transport?: string;
                    /**
                     * Last time the subscription was updated
                     */
                    updated?: string;
                }>;
                default: unknown;
            };
        };
        post: {
            req: PostSubscriptionsData;
            res: {
                /**
                 * Success
                 */
                201: {
                    /**
                     * Creation time of the subscription
                     */
                    created?: string;
                    /**
                     * Ephemeral subscriptions only exist as long as the application is connected, and as such will miss events that occur while the application is disconnected, and cannot be created administratively. You can create one over over a connected WebSocket connection
                     */
                    ephemeral?: boolean;
                    /**
                     * Server-side filter to apply to events
                     */
                    filter?: {
                        /**
                         * Deprecated: Please use 'message.author' instead
                         */
                        author?: string;
                        /**
                         * Filters specific to blockchain events. If an event is not a blockchain event, these filters are ignored
                         */
                        blockchainevent?: {
                            /**
                             * Regular expression to apply to the blockchain event 'listener' field, which is the UUID of the event listener. So you can restrict your subscription to certain blockchain listeners. Alternatively to avoid your application need to know listener UUIDs you can set the 'topic' field of blockchain event listeners, and use a topic filter on your subscriptions
                             */
                            listener?: string;
                            /**
                             * Regular expression to apply to the blockchain event 'name' field, which is the name of the event in the underlying blockchain smart contract
                             */
                            name?: string;
                        };
                        /**
                         * Regular expression to apply to the event type, to subscribe to a subset of event types
                         */
                        events?: string;
                        /**
                         * Deprecated: Please use 'message.group' instead
                         */
                        group?: string;
                        /**
                         * Filters specific to message events. If an event is not a message event, these filters are ignored
                         */
                        message?: {
                            /**
                             * Regular expression to apply to the message 'header.author' field
                             */
                            author?: string;
                            /**
                             * Regular expression to apply to the message 'header.group' field
                             */
                            group?: string;
                            /**
                             * Regular expression to apply to the message 'header.tag' field
                             */
                            tag?: string;
                        };
                        /**
                         * Deprecated: Please use 'message.tag' instead
                         */
                        tag?: string;
                        /**
                         * Regular expression to apply to the topic of the event, to subscribe to a subset of topics. Note for messages sent with multiple topics, a separate event is emitted for each topic
                         */
                        topic?: string;
                        /**
                         * Deprecated: Please use 'topic' instead
                         */
                        topics?: string;
                        /**
                         * Filters specific to events with a transaction. If an event is not associated with a transaction, this filter is ignored
                         */
                        transaction?: {
                            /**
                             * Regular expression to apply to the transaction 'type' field
                             */
                            type?: string;
                        };
                    };
                    /**
                     * The UUID of the subscription
                     */
                    id?: string;
                    /**
                     * The name of the subscription. The application specifies this name when it connects, in order to attach to the subscription and receive events that arrived while it was disconnected. If multiple apps connect to the same subscription, events are workload balanced across the connected application instances
                     */
                    name?: string;
                    /**
                     * The namespace of the subscription. A subscription will only receive events generated in the namespace of the subscription
                     */
                    namespace?: string;
                    /**
                     * Subscription options
                     */
                    options?: {
                        /**
                         * Events are delivered in batches in an ordered array. The batch size is capped to the readAhead limit. The event payload is always an array even if there is a single event in the batch, allowing client-side optimizations when processing the events in a group. Available for both Webhooks and WebSockets.
                         */
                        batch?: boolean;
                        /**
                         * When batching is enabled, the optional timeout to send events even when the batch hasn't filled.
                         */
                        batchTimeout?: string;
                        /**
                         * Webhooks only: When true the event will be acknowledged before the webhook is invoked, allowing parallel invocations
                         */
                        fastack?: boolean;
                        /**
                         * Whether your application would like to receive events from the 'oldest' event emitted by your FireFly node (from the beginning of time), or the 'newest' event (from now), or a specific event sequence. Default is 'newest'
                         */
                        firstEvent?: string;
                        /**
                         * Webhooks only: Static headers to set on the webhook request
                         */
                        headers?: {
                            [key: string]: string;
                        };
                        /**
                         * Webhooks only: a set of options for HTTP
                         */
                        httpOptions?: {
                            /**
                             * The maximum amount of time that a connection is allowed to remain with no data transmitted.
                             */
                            connectionTimeout?: string;
                            /**
                             * See [ExpectContinueTimeout in the Go docs](https://pkg.go.dev/net/http#Transport)
                             */
                            expectContinueTimeout?: string;
                            /**
                             * The max duration to hold a HTTP keepalive connection between calls
                             */
                            idleTimeout?: string;
                            /**
                             * The max number of idle connections to hold pooled
                             */
                            maxIdleConns?: number;
                            /**
                             * HTTP proxy URL to use for outbound requests to the webhook
                             */
                            proxyURL?: string;
                            /**
                             * The max duration to hold a TLS handshake alive
                             */
                            requestTimeout?: string;
                            /**
                             * The max duration to hold a TLS handshake alive
                             */
                            tlsHandshakeTimeout?: string;
                        };
                        /**
                         * Webhooks only: A set of options to extract data from the first JSON input data in the incoming message. Only applies if withData=true
                         */
                        input?: {
                            /**
                             * A top-level property of the first data input, to use for the request body. Default is the whole first body
                             */
                            body?: string;
                            /**
                             * A top-level property of the first data input, to use for headers
                             */
                            headers?: string;
                            /**
                             * A top-level property of the first data input, to use for a path to append with escaping to the webhook path
                             */
                            path?: string;
                            /**
                             * A top-level property of the first data input, to use for query parameters
                             */
                            query?: string;
                            /**
                             * A top-level property of the first data input, to use to dynamically set whether to pin the response (so the requester can choose)
                             */
                            replytx?: string;
                        };
                        /**
                         * Webhooks only: Whether to assume the response body is JSON, regardless of the returned Content-Type
                         */
                        json?: boolean;
                        /**
                         * Webhooks only: HTTP method to invoke. Default=POST
                         */
                        method?: string;
                        /**
                         * Webhooks only: Static query params to set on the webhook request
                         */
                        query?: {
                            [key: string]: string;
                        };
                        /**
                         * The number of events to stream ahead to your application, while waiting for confirmation of consumption of those events. At least once delivery semantics are used in FireFly, so if your application crashes/reconnects this is the maximum number of events you would expect to be redelivered after it restarts
                         */
                        readAhead?: number;
                        /**
                         * Webhooks only: Whether to automatically send a reply event, using the body returned by the webhook
                         */
                        reply?: boolean;
                        /**
                         * Webhooks only: The tag to set on the reply message
                         */
                        replytag?: string;
                        /**
                         * Webhooks only: The transaction type to set on the reply message
                         */
                        replytx?: string;
                        /**
                         * Webhooks only: a set of options for retrying the webhook call
                         */
                        retry?: {
                            /**
                             * Number of times to retry the webhook call in case of failure
                             */
                            count?: number;
                            /**
                             * Enables retry on HTTP calls, defaults to false
                             */
                            enabled?: boolean;
                            /**
                             * Initial delay between retries when we retry the webhook call
                             */
                            initialDelay?: string;
                            /**
                             * Max delay between retries when we retry the webhookcall
                             */
                            maxDelay?: string;
                        };
                        /**
                         * The name of an existing TLS configuration associated to the namespace to use
                         */
                        tlsConfigName?: string;
                        /**
                         * Webhooks only: HTTP url to invoke. Can be relative if a base URL is set in the webhook plugin config
                         */
                        url?: string;
                        /**
                         * Whether message events delivered over the subscription, should be packaged with the full data of those messages in-line as part of the event JSON payload. Or if the application should make separate REST calls to download that data. May not be supported on some transports.
                         */
                        withData?: boolean;
                    };
                    /**
                     * The transport plugin responsible for event delivery (WebSockets, Webhooks, JMS, NATS etc.)
                     */
                    transport?: string;
                    /**
                     * Last time the subscription was updated
                     */
                    updated?: string;
                };
                default: unknown;
            };
        };
        put: {
            req: PutSubscriptionsData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * Creation time of the subscription
                     */
                    created?: string;
                    /**
                     * Ephemeral subscriptions only exist as long as the application is connected, and as such will miss events that occur while the application is disconnected, and cannot be created administratively. You can create one over over a connected WebSocket connection
                     */
                    ephemeral?: boolean;
                    /**
                     * Server-side filter to apply to events
                     */
                    filter?: {
                        /**
                         * Deprecated: Please use 'message.author' instead
                         */
                        author?: string;
                        /**
                         * Filters specific to blockchain events. If an event is not a blockchain event, these filters are ignored
                         */
                        blockchainevent?: {
                            /**
                             * Regular expression to apply to the blockchain event 'listener' field, which is the UUID of the event listener. So you can restrict your subscription to certain blockchain listeners. Alternatively to avoid your application need to know listener UUIDs you can set the 'topic' field of blockchain event listeners, and use a topic filter on your subscriptions
                             */
                            listener?: string;
                            /**
                             * Regular expression to apply to the blockchain event 'name' field, which is the name of the event in the underlying blockchain smart contract
                             */
                            name?: string;
                        };
                        /**
                         * Regular expression to apply to the event type, to subscribe to a subset of event types
                         */
                        events?: string;
                        /**
                         * Deprecated: Please use 'message.group' instead
                         */
                        group?: string;
                        /**
                         * Filters specific to message events. If an event is not a message event, these filters are ignored
                         */
                        message?: {
                            /**
                             * Regular expression to apply to the message 'header.author' field
                             */
                            author?: string;
                            /**
                             * Regular expression to apply to the message 'header.group' field
                             */
                            group?: string;
                            /**
                             * Regular expression to apply to the message 'header.tag' field
                             */
                            tag?: string;
                        };
                        /**
                         * Deprecated: Please use 'message.tag' instead
                         */
                        tag?: string;
                        /**
                         * Regular expression to apply to the topic of the event, to subscribe to a subset of topics. Note for messages sent with multiple topics, a separate event is emitted for each topic
                         */
                        topic?: string;
                        /**
                         * Deprecated: Please use 'topic' instead
                         */
                        topics?: string;
                        /**
                         * Filters specific to events with a transaction. If an event is not associated with a transaction, this filter is ignored
                         */
                        transaction?: {
                            /**
                             * Regular expression to apply to the transaction 'type' field
                             */
                            type?: string;
                        };
                    };
                    /**
                     * The UUID of the subscription
                     */
                    id?: string;
                    /**
                     * The name of the subscription. The application specifies this name when it connects, in order to attach to the subscription and receive events that arrived while it was disconnected. If multiple apps connect to the same subscription, events are workload balanced across the connected application instances
                     */
                    name?: string;
                    /**
                     * The namespace of the subscription. A subscription will only receive events generated in the namespace of the subscription
                     */
                    namespace?: string;
                    /**
                     * Subscription options
                     */
                    options?: {
                        /**
                         * Events are delivered in batches in an ordered array. The batch size is capped to the readAhead limit. The event payload is always an array even if there is a single event in the batch, allowing client-side optimizations when processing the events in a group. Available for both Webhooks and WebSockets.
                         */
                        batch?: boolean;
                        /**
                         * When batching is enabled, the optional timeout to send events even when the batch hasn't filled.
                         */
                        batchTimeout?: string;
                        /**
                         * Webhooks only: When true the event will be acknowledged before the webhook is invoked, allowing parallel invocations
                         */
                        fastack?: boolean;
                        /**
                         * Whether your application would like to receive events from the 'oldest' event emitted by your FireFly node (from the beginning of time), or the 'newest' event (from now), or a specific event sequence. Default is 'newest'
                         */
                        firstEvent?: string;
                        /**
                         * Webhooks only: Static headers to set on the webhook request
                         */
                        headers?: {
                            [key: string]: string;
                        };
                        /**
                         * Webhooks only: a set of options for HTTP
                         */
                        httpOptions?: {
                            /**
                             * The maximum amount of time that a connection is allowed to remain with no data transmitted.
                             */
                            connectionTimeout?: string;
                            /**
                             * See [ExpectContinueTimeout in the Go docs](https://pkg.go.dev/net/http#Transport)
                             */
                            expectContinueTimeout?: string;
                            /**
                             * The max duration to hold a HTTP keepalive connection between calls
                             */
                            idleTimeout?: string;
                            /**
                             * The max number of idle connections to hold pooled
                             */
                            maxIdleConns?: number;
                            /**
                             * HTTP proxy URL to use for outbound requests to the webhook
                             */
                            proxyURL?: string;
                            /**
                             * The max duration to hold a TLS handshake alive
                             */
                            requestTimeout?: string;
                            /**
                             * The max duration to hold a TLS handshake alive
                             */
                            tlsHandshakeTimeout?: string;
                        };
                        /**
                         * Webhooks only: A set of options to extract data from the first JSON input data in the incoming message. Only applies if withData=true
                         */
                        input?: {
                            /**
                             * A top-level property of the first data input, to use for the request body. Default is the whole first body
                             */
                            body?: string;
                            /**
                             * A top-level property of the first data input, to use for headers
                             */
                            headers?: string;
                            /**
                             * A top-level property of the first data input, to use for a path to append with escaping to the webhook path
                             */
                            path?: string;
                            /**
                             * A top-level property of the first data input, to use for query parameters
                             */
                            query?: string;
                            /**
                             * A top-level property of the first data input, to use to dynamically set whether to pin the response (so the requester can choose)
                             */
                            replytx?: string;
                        };
                        /**
                         * Webhooks only: Whether to assume the response body is JSON, regardless of the returned Content-Type
                         */
                        json?: boolean;
                        /**
                         * Webhooks only: HTTP method to invoke. Default=POST
                         */
                        method?: string;
                        /**
                         * Webhooks only: Static query params to set on the webhook request
                         */
                        query?: {
                            [key: string]: string;
                        };
                        /**
                         * The number of events to stream ahead to your application, while waiting for confirmation of consumption of those events. At least once delivery semantics are used in FireFly, so if your application crashes/reconnects this is the maximum number of events you would expect to be redelivered after it restarts
                         */
                        readAhead?: number;
                        /**
                         * Webhooks only: Whether to automatically send a reply event, using the body returned by the webhook
                         */
                        reply?: boolean;
                        /**
                         * Webhooks only: The tag to set on the reply message
                         */
                        replytag?: string;
                        /**
                         * Webhooks only: The transaction type to set on the reply message
                         */
                        replytx?: string;
                        /**
                         * Webhooks only: a set of options for retrying the webhook call
                         */
                        retry?: {
                            /**
                             * Number of times to retry the webhook call in case of failure
                             */
                            count?: number;
                            /**
                             * Enables retry on HTTP calls, defaults to false
                             */
                            enabled?: boolean;
                            /**
                             * Initial delay between retries when we retry the webhook call
                             */
                            initialDelay?: string;
                            /**
                             * Max delay between retries when we retry the webhookcall
                             */
                            maxDelay?: string;
                        };
                        /**
                         * The name of an existing TLS configuration associated to the namespace to use
                         */
                        tlsConfigName?: string;
                        /**
                         * Webhooks only: HTTP url to invoke. Can be relative if a base URL is set in the webhook plugin config
                         */
                        url?: string;
                        /**
                         * Whether message events delivered over the subscription, should be packaged with the full data of those messages in-line as part of the event JSON payload. Or if the application should make separate REST calls to download that data. May not be supported on some transports.
                         */
                        withData?: boolean;
                    };
                    /**
                     * The transport plugin responsible for event delivery (WebSockets, Webhooks, JMS, NATS etc.)
                     */
                    transport?: string;
                    /**
                     * Last time the subscription was updated
                     */
                    updated?: string;
                };
                default: unknown;
            };
        };
    };
    '/subscriptions/{subid}': {
        delete: {
            req: DeleteSubscriptionsBySubidData;
            res: {
                /**
                 * Success
                 */
                204: void;
                default: unknown;
            };
        };
        get: {
            req: GetSubscriptionsBySubidData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * Creation time of the subscription
                     */
                    created?: string;
                    /**
                     * Ephemeral subscriptions only exist as long as the application is connected, and as such will miss events that occur while the application is disconnected, and cannot be created administratively. You can create one over over a connected WebSocket connection
                     */
                    ephemeral?: boolean;
                    /**
                     * Server-side filter to apply to events
                     */
                    filter?: {
                        /**
                         * Deprecated: Please use 'message.author' instead
                         */
                        author?: string;
                        /**
                         * Filters specific to blockchain events. If an event is not a blockchain event, these filters are ignored
                         */
                        blockchainevent?: {
                            /**
                             * Regular expression to apply to the blockchain event 'listener' field, which is the UUID of the event listener. So you can restrict your subscription to certain blockchain listeners. Alternatively to avoid your application need to know listener UUIDs you can set the 'topic' field of blockchain event listeners, and use a topic filter on your subscriptions
                             */
                            listener?: string;
                            /**
                             * Regular expression to apply to the blockchain event 'name' field, which is the name of the event in the underlying blockchain smart contract
                             */
                            name?: string;
                        };
                        /**
                         * Regular expression to apply to the event type, to subscribe to a subset of event types
                         */
                        events?: string;
                        /**
                         * Deprecated: Please use 'message.group' instead
                         */
                        group?: string;
                        /**
                         * Filters specific to message events. If an event is not a message event, these filters are ignored
                         */
                        message?: {
                            /**
                             * Regular expression to apply to the message 'header.author' field
                             */
                            author?: string;
                            /**
                             * Regular expression to apply to the message 'header.group' field
                             */
                            group?: string;
                            /**
                             * Regular expression to apply to the message 'header.tag' field
                             */
                            tag?: string;
                        };
                        /**
                         * Deprecated: Please use 'message.tag' instead
                         */
                        tag?: string;
                        /**
                         * Regular expression to apply to the topic of the event, to subscribe to a subset of topics. Note for messages sent with multiple topics, a separate event is emitted for each topic
                         */
                        topic?: string;
                        /**
                         * Deprecated: Please use 'topic' instead
                         */
                        topics?: string;
                        /**
                         * Filters specific to events with a transaction. If an event is not associated with a transaction, this filter is ignored
                         */
                        transaction?: {
                            /**
                             * Regular expression to apply to the transaction 'type' field
                             */
                            type?: string;
                        };
                    };
                    /**
                     * The UUID of the subscription
                     */
                    id?: string;
                    /**
                     * The name of the subscription. The application specifies this name when it connects, in order to attach to the subscription and receive events that arrived while it was disconnected. If multiple apps connect to the same subscription, events are workload balanced across the connected application instances
                     */
                    name?: string;
                    /**
                     * The namespace of the subscription. A subscription will only receive events generated in the namespace of the subscription
                     */
                    namespace?: string;
                    /**
                     * Subscription options
                     */
                    options?: {
                        /**
                         * Events are delivered in batches in an ordered array. The batch size is capped to the readAhead limit. The event payload is always an array even if there is a single event in the batch, allowing client-side optimizations when processing the events in a group. Available for both Webhooks and WebSockets.
                         */
                        batch?: boolean;
                        /**
                         * When batching is enabled, the optional timeout to send events even when the batch hasn't filled.
                         */
                        batchTimeout?: string;
                        /**
                         * Webhooks only: When true the event will be acknowledged before the webhook is invoked, allowing parallel invocations
                         */
                        fastack?: boolean;
                        /**
                         * Whether your application would like to receive events from the 'oldest' event emitted by your FireFly node (from the beginning of time), or the 'newest' event (from now), or a specific event sequence. Default is 'newest'
                         */
                        firstEvent?: string;
                        /**
                         * Webhooks only: Static headers to set on the webhook request
                         */
                        headers?: {
                            [key: string]: string;
                        };
                        /**
                         * Webhooks only: a set of options for HTTP
                         */
                        httpOptions?: {
                            /**
                             * The maximum amount of time that a connection is allowed to remain with no data transmitted.
                             */
                            connectionTimeout?: string;
                            /**
                             * See [ExpectContinueTimeout in the Go docs](https://pkg.go.dev/net/http#Transport)
                             */
                            expectContinueTimeout?: string;
                            /**
                             * The max duration to hold a HTTP keepalive connection between calls
                             */
                            idleTimeout?: string;
                            /**
                             * The max number of idle connections to hold pooled
                             */
                            maxIdleConns?: number;
                            /**
                             * HTTP proxy URL to use for outbound requests to the webhook
                             */
                            proxyURL?: string;
                            /**
                             * The max duration to hold a TLS handshake alive
                             */
                            requestTimeout?: string;
                            /**
                             * The max duration to hold a TLS handshake alive
                             */
                            tlsHandshakeTimeout?: string;
                        };
                        /**
                         * Webhooks only: A set of options to extract data from the first JSON input data in the incoming message. Only applies if withData=true
                         */
                        input?: {
                            /**
                             * A top-level property of the first data input, to use for the request body. Default is the whole first body
                             */
                            body?: string;
                            /**
                             * A top-level property of the first data input, to use for headers
                             */
                            headers?: string;
                            /**
                             * A top-level property of the first data input, to use for a path to append with escaping to the webhook path
                             */
                            path?: string;
                            /**
                             * A top-level property of the first data input, to use for query parameters
                             */
                            query?: string;
                            /**
                             * A top-level property of the first data input, to use to dynamically set whether to pin the response (so the requester can choose)
                             */
                            replytx?: string;
                        };
                        /**
                         * Webhooks only: Whether to assume the response body is JSON, regardless of the returned Content-Type
                         */
                        json?: boolean;
                        /**
                         * Webhooks only: HTTP method to invoke. Default=POST
                         */
                        method?: string;
                        /**
                         * Webhooks only: Static query params to set on the webhook request
                         */
                        query?: {
                            [key: string]: string;
                        };
                        /**
                         * The number of events to stream ahead to your application, while waiting for confirmation of consumption of those events. At least once delivery semantics are used in FireFly, so if your application crashes/reconnects this is the maximum number of events you would expect to be redelivered after it restarts
                         */
                        readAhead?: number;
                        /**
                         * Webhooks only: Whether to automatically send a reply event, using the body returned by the webhook
                         */
                        reply?: boolean;
                        /**
                         * Webhooks only: The tag to set on the reply message
                         */
                        replytag?: string;
                        /**
                         * Webhooks only: The transaction type to set on the reply message
                         */
                        replytx?: string;
                        /**
                         * Webhooks only: a set of options for retrying the webhook call
                         */
                        retry?: {
                            /**
                             * Number of times to retry the webhook call in case of failure
                             */
                            count?: number;
                            /**
                             * Enables retry on HTTP calls, defaults to false
                             */
                            enabled?: boolean;
                            /**
                             * Initial delay between retries when we retry the webhook call
                             */
                            initialDelay?: string;
                            /**
                             * Max delay between retries when we retry the webhookcall
                             */
                            maxDelay?: string;
                        };
                        /**
                         * The name of an existing TLS configuration associated to the namespace to use
                         */
                        tlsConfigName?: string;
                        /**
                         * Webhooks only: HTTP url to invoke. Can be relative if a base URL is set in the webhook plugin config
                         */
                        url?: string;
                        /**
                         * Whether message events delivered over the subscription, should be packaged with the full data of those messages in-line as part of the event JSON payload. Or if the application should make separate REST calls to download that data. May not be supported on some transports.
                         */
                        withData?: boolean;
                    };
                    /**
                     * The transport plugin responsible for event delivery (WebSockets, Webhooks, JMS, NATS etc.)
                     */
                    transport?: string;
                    /**
                     * Last time the subscription was updated
                     */
                    updated?: string;
                };
                default: unknown;
            };
        };
    };
    '/subscriptions/{subid}/events': {
        get: {
            req: GetSubscriptionsBySubidEventsData;
            res: {
                /**
                 * Success
                 */
                200: Array<{
                    /**
                     * For message events, this is the 'header.cid' field from the referenced message. For certain other event types, a secondary object is referenced such as a token pool
                     */
                    correlator?: string;
                    /**
                     * The time the event was emitted. Not guaranteed to be unique, or to increase between events in the same order as the final sequence events are delivered to your application. As such, the 'sequence' field should be used instead of the 'created' field for querying events in the exact order they are delivered to applications
                     */
                    created?: string;
                    /**
                     * The UUID assigned to this event by your local FireFly node
                     */
                    id?: string;
                    /**
                     * The namespace of the event. Your application must subscribe to events within a namespace
                     */
                    namespace?: string;
                    /**
                     * The UUID of an resource that is the subject of this event. The event type determines what type of resource is referenced, and whether this field might be unset
                     */
                    reference?: string;
                    /**
                     * A sequence indicating the order in which events are delivered to your application. Assure to be unique per event in your local FireFly database (unlike the created timestamp)
                     */
                    sequence?: number;
                    /**
                     * A stream of information this event relates to. For message confirmation events, a separate event is emitted for each topic in the message. For blockchain events, the listener specifies the topic. Rules exist for how the topic is set for other event types
                     */
                    topic?: string;
                    /**
                     * The UUID of a transaction that is event is part of. Not all events are part of a transaction
                     */
                    tx?: string;
                    /**
                     * All interesting activity in FireFly is emitted as a FireFly event, of a given type. The 'type' combined with the 'reference' can be used to determine how to process the event within your application
                     */
                    type?:
                        | 'transaction_submitted'
                        | 'message_confirmed'
                        | 'message_rejected'
                        | 'datatype_confirmed'
                        | 'identity_confirmed'
                        | 'identity_updated'
                        | 'token_pool_confirmed'
                        | 'token_pool_op_failed'
                        | 'token_transfer_confirmed'
                        | 'token_transfer_op_failed'
                        | 'token_approval_confirmed'
                        | 'token_approval_op_failed'
                        | 'contract_interface_confirmed'
                        | 'contract_api_confirmed'
                        | 'blockchain_event_received'
                        | 'blockchain_invoke_op_succeeded'
                        | 'blockchain_invoke_op_failed'
                        | 'blockchain_contract_deploy_op_succeeded'
                        | 'blockchain_contract_deploy_op_failed';
                }>;
                default: unknown;
            };
        };
    };
    '/transactions': {
        get: {
            req: GetTransactionsData;
            res: {
                /**
                 * Success
                 */
                200: Array<{
                    /**
                     * The blockchain transaction ID, in the format specific to the blockchain involved in the transaction. Not all FireFly transactions include a blockchain. FireFly transactions are extensible to support multiple blockchain transactions
                     */
                    blockchainIds?: Array<string>;
                    /**
                     * The time the transaction was created on this node. Note the transaction is individually created with the same UUID on each participant in the FireFly transaction
                     */
                    created?: string;
                    /**
                     * The UUID of the FireFly transaction
                     */
                    id?: string;
                    /**
                     * An optional unique identifier for a transaction. Cannot be duplicated within a namespace, thus allowing idempotent submission of transactions to the API
                     */
                    idempotencyKey?: string;
                    /**
                     * The namespace of the FireFly transaction
                     */
                    namespace?: string;
                    /**
                     * The type of the FireFly transaction
                     */
                    type?:
                        | 'none'
                        | 'unpinned'
                        | 'batch_pin'
                        | 'network_action'
                        | 'token_pool'
                        | 'token_transfer'
                        | 'contract_deploy'
                        | 'contract_invoke'
                        | 'contract_invoke_pin'
                        | 'token_approval'
                        | 'data_publish'
                        | 'user_operation_send';
                }>;
                default: unknown;
            };
        };
    };
    '/transactions/{txnid}': {
        get: {
            req: GetTransactionsByTxnidData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * The blockchain transaction ID, in the format specific to the blockchain involved in the transaction. Not all FireFly transactions include a blockchain. FireFly transactions are extensible to support multiple blockchain transactions
                     */
                    blockchainIds?: Array<string>;
                    /**
                     * The time the transaction was created on this node. Note the transaction is individually created with the same UUID on each participant in the FireFly transaction
                     */
                    created?: string;
                    /**
                     * The UUID of the FireFly transaction
                     */
                    id?: string;
                    /**
                     * An optional unique identifier for a transaction. Cannot be duplicated within a namespace, thus allowing idempotent submission of transactions to the API
                     */
                    idempotencyKey?: string;
                    /**
                     * The namespace of the FireFly transaction
                     */
                    namespace?: string;
                    /**
                     * The type of the FireFly transaction
                     */
                    type?:
                        | 'none'
                        | 'unpinned'
                        | 'batch_pin'
                        | 'network_action'
                        | 'token_pool'
                        | 'token_transfer'
                        | 'contract_deploy'
                        | 'contract_invoke'
                        | 'contract_invoke_pin'
                        | 'token_approval'
                        | 'data_publish'
                        | 'user_operation_send';
                };
                default: unknown;
            };
        };
    };
    '/transactions/{txnid}/blockchainevents': {
        get: {
            req: GetTransactionsByTxnidBlockchaineventsData;
            res: {
                /**
                 * Success
                 */
                200: Array<{
                    /**
                     * The UUID assigned to the event by FireFly
                     */
                    id?: string;
                    /**
                     * Detailed blockchain specific information about the event, as generated by the blockchain connector
                     */
                    info?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The UUID of the listener that detected this event, or nil for built-in events in the system namespace
                     */
                    listener?: string;
                    /**
                     * The name of the event in the blockchain smart contract
                     */
                    name?: string;
                    /**
                     * The namespace of the listener that detected this blockchain event
                     */
                    namespace?: string;
                    /**
                     * The data output by the event, parsed to JSON according to the interface of the smart contract
                     */
                    output?: {
                        [key: string]: unknown;
                    };
                    /**
                     * An alphanumerically sortable string that represents this event uniquely on the blockchain (convention for plugins is zero-padded values BLOCKNUMBER/TXN_INDEX/EVENT_INDEX)
                     */
                    protocolId?: string;
                    /**
                     * The blockchain plugin or token service that detected the event
                     */
                    source?: string;
                    /**
                     * The time allocated to this event by the blockchain. This is the block timestamp for most blockchain connectors
                     */
                    timestamp?: string;
                    /**
                     * If this blockchain event is coorelated to FireFly transaction such as a FireFly submitted token transfer, this field is set to the UUID of the FireFly transaction
                     */
                    tx?: {
                        /**
                         * The blockchain transaction ID, in the format specific to the blockchain involved in the transaction. Not all FireFly transactions include a blockchain
                         */
                        blockchainId?: string;
                        /**
                         * The UUID of the FireFly transaction
                         */
                        id?: string;
                        /**
                         * The type of the FireFly transaction
                         */
                        type?: string;
                    };
                }>;
                default: unknown;
            };
        };
    };
    '/transactions/{txnid}/operations': {
        get: {
            req: GetTransactionsByTxnidOperationsData;
            res: {
                /**
                 * Success
                 */
                200: Array<{
                    /**
                     * The time the operation was created
                     */
                    created?: string;
                    /**
                     * Operation.data
                     */
                    data?: {
                        [key: string]: unknown;
                    };
                    /**
                     * Any error reported back from the plugin for this operation
                     */
                    error?: string;
                    /**
                     * The UUID of the operation
                     */
                    id?: string;
                    /**
                     * The input to this operation
                     */
                    input?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The namespace of the operation
                     */
                    namespace?: string;
                    /**
                     * Any output reported back from the plugin for this operation
                     */
                    output?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The plugin responsible for performing the operation
                     */
                    plugin?: string;
                    /**
                     * If this operation was initiated as a retry to a previous operation, this field points to the UUID of the operation being retried
                     */
                    retry?: string;
                    /**
                     * The current status of the operation
                     */
                    status?: string;
                    /**
                     * The UUID of the FireFly transaction the operation is part of
                     */
                    tx?: string;
                    /**
                     * The type of the operation
                     */
                    type?: 'blockchain_invoke' | 'user_operation_send';
                    /**
                     * The last update time of the operation
                     */
                    updated?: string;
                }>;
                default: unknown;
            };
        };
    };
    '/transactions/{txnid}/status': {
        get: {
            req: GetTransactionsByTxnidStatusData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * A set of records describing the activities within the transaction known by the local FireFly node
                     */
                    details?: Array<{
                        /**
                         * If an error occurred related to the detail entry, it is included here
                         */
                        error?: string;
                        /**
                         * The UUID of the entry referenced by this detail. The type of this record can be inferred from the entry type
                         */
                        id?: string;
                        /**
                         * Output details for this entry
                         */
                        info?: {
                            [key: string]: unknown;
                        };
                        /**
                         * The status of the detail record. Cases where an event is required for completion, but has not arrived yet are marked with a 'pending' record
                         */
                        status?: string;
                        /**
                         * A sub-type, such as an operation type, or an event type
                         */
                        subtype?: string;
                        /**
                         * The time relevant to when the record was updated, such as the time an event was created, or the last update time of an operation
                         */
                        timestamp?: string;
                        /**
                         * The type of the transaction status detail record
                         */
                        type?: string;
                    }>;
                    /**
                     * The overall computed status of the transaction, after analyzing the details during the API call
                     */
                    status?: string;
                };
                default: unknown;
            };
        };
    };
    '/websockets': {
        get: {
            req: GetWebsocketsData;
            res: {
                /**
                 * Success
                 */
                200: {
                    /**
                     * List of currently active websocket client connections
                     */
                    connections?: Array<{
                        /**
                         * The unique ID assigned to this client connection
                         */
                        id?: string;
                        /**
                         * The remote address of the connected client (if available)
                         */
                        remoteAddress?: string;
                        /**
                         * List of subscriptions currently started by this client
                         */
                        subscriptions?: Array<{
                            /**
                             * Indicates whether the subscription is ephemeral (vs durable)
                             */
                            ephemeral?: boolean;
                            /**
                             * The subscription filter specification
                             */
                            filter?: {
                                /**
                                 * Deprecated: Please use 'message.author' instead
                                 */
                                author?: string;
                                /**
                                 * Filters specific to blockchain events. If an event is not a blockchain event, these filters are ignored
                                 */
                                blockchainevent?: {
                                    /**
                                     * Regular expression to apply to the blockchain event 'listener' field, which is the UUID of the event listener. So you can restrict your subscription to certain blockchain listeners. Alternatively to avoid your application need to know listener UUIDs you can set the 'topic' field of blockchain event listeners, and use a topic filter on your subscriptions
                                     */
                                    listener?: string;
                                    /**
                                     * Regular expression to apply to the blockchain event 'name' field, which is the name of the event in the underlying blockchain smart contract
                                     */
                                    name?: string;
                                };
                                /**
                                 * Regular expression to apply to the event type, to subscribe to a subset of event types
                                 */
                                events?: string;
                                /**
                                 * Deprecated: Please use 'message.group' instead
                                 */
                                group?: string;
                                /**
                                 * Filters specific to message events. If an event is not a message event, these filters are ignored
                                 */
                                message?: {
                                    /**
                                     * Regular expression to apply to the message 'header.author' field
                                     */
                                    author?: string;
                                    /**
                                     * Regular expression to apply to the message 'header.group' field
                                     */
                                    group?: string;
                                    /**
                                     * Regular expression to apply to the message 'header.tag' field
                                     */
                                    tag?: string;
                                };
                                /**
                                 * Deprecated: Please use 'message.tag' instead
                                 */
                                tag?: string;
                                /**
                                 * Regular expression to apply to the topic of the event, to subscribe to a subset of topics. Note for messages sent with multiple topics, a separate event is emitted for each topic
                                 */
                                topic?: string;
                                /**
                                 * Deprecated: Please use 'topic' instead
                                 */
                                topics?: string;
                                /**
                                 * Filters specific to events with a transaction. If an event is not associated with a transaction, this filter is ignored
                                 */
                                transaction?: {
                                    /**
                                     * Regular expression to apply to the transaction 'type' field
                                     */
                                    type?: string;
                                };
                            };
                            /**
                             * The subscription name (for durable subscriptions only)
                             */
                            name?: string;
                            /**
                             * The subscription namespace
                             */
                            namespace?: string;
                            /**
                             * The time the subscription started (reset on dynamic namespace reload)
                             */
                            startTime?: string;
                        }>;
                        /**
                         * The user agent of the connected client (if available)
                         */
                        userAgent?: string;
                    }>;
                    /**
                     * Indicates whether the websockets plugin is enabled
                     */
                    enabled?: boolean;
                };
                default: unknown;
            };
        };
    };
};
